%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1409.i047.009.P.m004.c20.business management icons.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: IvAN
%%CreationDate: 9/5/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">data protection icons</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-09-05T08:57:01+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-09-05T08:57:01+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-09-05T08:57:01+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FUJcapbQS+m3JmH2uIBA+8jFUVG6SIroaqwqDireKuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KvKPzh/PO28kzjR9Kt0vtfdBJIspPoW6sKr6gUhmZhuFBG25&#xA;PSsoxtBLxmH/AJyX/NGO69Z7i1lirX6q9sgjp4VXjJ/w2T4Ai30B+U/5taX5+06WkX1LWLMD67Yl&#xA;uQ4tsJYmNOSE9e6nY9iYSjSQWe5FLsVdirsVY5+Yt7d2Xk3Ubm0me3uEEQSaNirrymRTRhuNicxt&#xA;ZIxxEjn+12fY2KM9VCMhY32P9UvNdV8rfmtN5dtNS0rWru7e7WKVbeC7mSURypzqS7Iu1RXfKtFi&#xA;yAiUpWCPNze2NVpyDix4xGcZc6A5WOia6FZ+a5NLsV8yaDf3Gp6XJ6sFyk0bmV+LIHY+spZuDkHn&#xA;Ud82BeeSSDQPzl1TzUZWe+0bTJ3cqhvG9CFAh4ApFIepA6L1OVZ4mUCImpOXoc0MeYSyR4oC9ufT&#xA;zZF5GutfsvzCvvL+qarNfNa23KRXlkkjJdY5FZRIewema/TDJHKYyN7O+7TOnyaQZMcBA8XcAevc&#xA;9RzZvLuxV2KuxV2KuxV2KuxV2KuxV2KsX1r8yfKekytDJcm5uEqHitl9QgjsWqqV9uWYmXW44bXZ&#xA;8nbabsXUZhYHCP6W37UhT8+PJP1s280V7bgGjTSRIUH/ACLkdv8AhcEddA97PJ2Fnh1ifj+sM40b&#xA;XdH1qzF5pV3Hd252LxmpU9aMp+JT7MK5lQmJCwXV5cM8ZqQoo7JNTsVdirsVdirsVfIVz+Xmv+fv&#xA;OPmvUor2CBrfVbiF1n51oJGCBeKtsqqFxyZxjq23DpzkumSaJ/zjxpFpIs+vam94oP8AvNbp6Kn2&#xA;ZyWYj5cfnmLPWnoHMx9ni9zaaeX9I03y5+f/AJft9CjFpY6pp86XNslQv7uCVvHuYEJ9xXrl2nyG&#xA;UDfe4+sxCE6Hc+hcscZ2KuxVxrQ03PYYq818+eZZ5vLeradfQGJ3aEWzgHZlljZopRvxaillb7LD&#xA;3G+vzZo5cMuG+KPMHmN3O7Gz+HroCe0ZXwnz4TsfO+Xfy5p5oeoeYhpmg2FlYJ9Weys3bUpH5RrE&#xA;sS+qpQcW9Tsgrv17HLMU58MQBtQ3cvVYcHiZZzl6uOfp63Zrfu70NcalfieQDWLtQGYBRY1A36A8&#xA;t857Jqsokf32Tn/qX7XV15Ot9SvzPGDrF2wLKCpsaA79CeW2OPVZTIfvsnP/AFL9q15JDpH/AK0F&#xA;rf8AzBJ/yYts6CP9+fd+p22X/EIf1v0yeq5mukdiqW+Zdbi0Ly9qWsyoZY9Otpblol2L+khYKD25&#xA;UpiFfMNp50/5yH8wa4Lyye9tAzhkjMIt7KNSQQCJV4MoH83JvnhlkhEblnHDOXIIbzX/AM5IfmDq&#xA;iQ2+nzRaOkSBLmS0AdppRs7h5AxRCfsqv0k5YIhqJd5S/wCchfzL0pLmS9f9O2KRsD9ZT+5kcERO&#xA;Zo1Vqc6VVjuNhQ74mISLRfl7zV/zkTq2rrqdpNecCfU43Uaw2TJ14iN1RWB6fB8Xvlc8uOPMtsME&#xA;5cg+k/JPmVPM/lPS9eWP0TfwLJJEDUJICVkUE9QHUgYkU1p3gV2KvPPP2v6rqGrw+TtCbjc3AH16&#xA;cGnFWHLhUfZAT4m9ts1uryylLwoczzek7J0mPHiOqzfSPpH6fnsEsu5fInkYLZLZjW9dUKZnkC0R&#xA;jv1YOsfsFBPicqkcODauKblY46vX+ri8LF0r8C/jt3Mb1j8x9Lm1FoNf8rJFay0KsVVmClQKqska&#xA;V+YYZYNUCPVDZol2XOJPhZbI/HQqF3Zy+UXt/Ofku5MujylfrVqWLJ6bNTi1dylfhPL4lb8DOHh/&#xA;vMZ9LHFm8e8GcVMcj+P7C9y0DWrPXNGtNWsyfq93GJFB6qejIad1YFTmwhMSAIefz4TjmYHmEfkm&#xA;p2KuxV2KuxVjOp+XtNsJ57+wtI7eS+k9S/eNQvqS0oHenc9zmJqonYuw0MxuEmv2FEXv1zBk7XGn&#xA;Xlry3pqSx63PaRtqpRooLplrIkDb8VJ6cjU7ZsdLEiHvdPr5iWTboyXMhwnYq7FXYqxjz+tlaaFc&#xA;6xJbrNPaiMKG6HnKijkOjcC3Ja98wNbj4R4sdskR8/I94cvRaX8xlGLvv5gWPuYv5S8weabi40/R&#xA;Lu4jsbBEgkt70RcHmiADRQrWsYaRadug2rhwZjmA4fRVcUeo93fE9C0Ys4wynj1MTLNZAl/DL3/0&#xA;h3dU4uIdQ9eSh1ynJqcG+Hr+zv0zQZIZOI/4zz6HZPydbw6h68dTrlOS15t8PX9rfpjjhk4h/jPP&#xA;qdl+SQ6R/wCtBa3/AMwSf8mLbOgj/fn3fqdtl/xCH9b9MnquZrpHYqg9ZGkNpdzHrBhGmSxtHd/W&#xA;WVYjG44sHLEChrirA9Yl0ufSLlLHUbY2PB4k1BZkNvGoWnNpQSoCchyNds1ssUhOq6u6x54mF30Y&#xA;H5F/KPyRJ5csLrUrG21DUaOJ7uC7e4t5GWRlqpilaFhQdh898vz6iYkQDs4+n00JQBI3Trzlolo3&#xA;knVdD0y0tLSGSPjFEfStoVdWBVmdika7qDyY5ThyE5Bbk6jEBiNJzp76dY+X9Liu9StIrO3gigm1&#xA;Izxi1rGoiLCYkIQXUgb7nbrjLFKU6rquPPGOO76M/wDLf+HhotrF5ektpNIgQRWps3SSEKu1FZCw&#xA;PvvmxdImWKuxV5b5EuA2t+cNekXnc2odoweys0rlf+SKjNTpT68k+o/b+p6ztWFYtPhH0yr9A/SU&#xA;F+Xy29to+t+cr2L69qFs7iLluQ/EOzV3oXMgq1NhXIaShGWU7kN/a5lLLj0sDwwl/Z9lcurD9b/O&#xA;Vb6+m0jzBpcV3FePFGqW6SeoFagb01PPnJQ/BRh8WZ2mkc0DxVTpe0cEdHlAxGXEO/l+hKPI/nW0&#xA;s7HXNDu9P1S7sbgMqJBatI8ZYNG5ZK/CSKfSMdPgIEokghOv1YlKGSMZCQ7wqeTfzzufK+gDR7W3&#xA;hkkFw8vO8ZkCJIq/AFHH9oFuXLvl2lwmMaJv3OL2nqI5MtgEbdX0N5P1HWNT0eLUNSlsJfrIDwfo&#xA;1mliCHxlLOHP+rsPE5cXXp5gV2KuxVj3njzrpnlHRjqN6pmkdvTtbVDRpZKVpXfioAqW7fOgwgWr&#xA;x24/5yK12SqzadZQ2TECVm9VmWMmh35qOXht1wyxgiljMxNhk2uebtMtL3XYIy0jaDZG9M0kZEEh&#xA;4hlTkD0YsgB/art74Y0W+5die0dqA3YDY/8AOWPmRLmM32h2UlqD+8SB5Y5Kf5LMZF/4XM7gdbb6&#xA;G8reZtK8zaDaa3pUhksrteSchR1ZSVdHHZlYEHIEUlNcCuxV2KsV/NH/AJQXU/8Anh/1ER5ia7+6&#xA;Pw+92/YX+Nw/zv8AclSTyvZeYPI+jQTExzpZWzW9wv2kYQrTpkBhMoQlA8M4gUf0HvB/aHXdrYY5&#xA;c2SMuXHL7zuG7fylZQ2c/wBcW8uLi1UlpFclrii8uSKv7THbj45iZexsEiZESs70CfsatPxbQJ7h&#xA;Z+9QsNJsvXi+s6TqVrIrLV/UWWME0Zd0YkinX4djt1pWrH2RhBB4Zg+9zsmniBcckJfMH7R+nzY/&#xA;pH/rQWt/8wSf8mLbNjH+/Pu/U5mX/EIf1v0yeq5mukdirzL87vKfm3zJbaTbaFbG6gheeS8j9WKI&#xA;B6IIifVdK7F+mSiUF4l5n8g/mxoGhzfWbdLbR5BKkhkubMOPrHpF40/e8m5C3FFUVpy98mCEMg/I&#xA;HV9WhW/8v3ir9St4Xv7eRmA9NVZVmWpNOPxhvvzE1WG/UObn6POI+mR2VPzg83Q2trY6ako9DUY/&#xA;rbSJVg8Qb93QjahYV+gZDSacg8UmzXaoSHDE7dWH6d5L/M7zboIPl+FNU0QqIKrc2iOgSZ7j0pFk&#xA;lR1/eS8qEdKZnWA6x67/AM47eQfPPlCXW4/MVk1la3a27WyevBMrSIXDkCGSTieLDr1+jIyIKQ9p&#xA;yCXYq8v0qWPy1+Y+p6ZfDjp+u1aF2+wTKxZAT4VZ4/nmqxnws5ieUvx+x6vPE6rQwyQ+vFz+HP8A&#xA;QUuim1L8u9Xu7O8tWvvLmoEhSaFWU1A3I48+Jo6nr8qZWDLTSIIuBcmUcfaWOMoy4M0Px8u49GOa&#xA;3508lwzTxeWvLx/SU8sbQvcRI3CZKGN4wGmbkr7qBTfLo6mER+7jRLiZezc85/4RMGMfx3D5qul2&#xA;0vknyXqGpaixTW9XHC3gY1dTQhK9d15l2+gdcnAeFjJP1SaMsxq9RGEP7uHP8fYGY/lr+WugTeR7&#xA;M+YdJtr6e6ke9QXMKSNGsqqqAFhUckRWp75kaSBjD3uv7WzDJmNco7M80Ty1oGhQyQ6NYQ6fDKQ0&#xA;kdugjUsNqkDauZFutTLFXYq7FXjP/ORllf3Q8vi1glnC/XC4iRnpX0KV4g++TggvEbzyvq13bmGS&#xA;wugCaqwhkqGHQ9N+uTtCU3sXn7ne281veuLqCCzu+MMjLJDbemYVPw9vRQ+PjjsqUf4b8xf9Wu7/&#xA;AOREv/NOG0Pqr/nGi0vbX8uXhvIZIJBqE5WOZWRgpSPoGA2rXKp82Qer5FLsVdirGfzKgnn8k6lF&#xA;BG0spEJCICzELOjHYeAFcxdaCcRr8bu17EmI6qBJob/7kvPIfzV84aRp9nYxeXvWhtoY4EkKzcj6&#xA;SBdwB3pmJi1cxEDh5O21fZGKWSU/E+ok9Orv+V3ec/8AqWP+Fn/5pyz85P8AmuN/I+H/AFT7nf8A&#xA;K7vOf/Usf8LP/wA04/nJ/wA1f5Hw/wCqfc78tr7Wdc/NS/1++06SyFzZkOODiNSiwxqOTgdQlcOn&#xA;JllMiK2XtCEMelGOMrqX63tObB512KuxV4l/zkd9dlm0OCJXeALcOyICRzrGATT2ycEF4lIPMOnS&#xA;vfafHIH+rz28sLIxVo542jc0puQGqK+AyaEg1q71/WJbWS7tpK2ltFZwKsTKBHCtB0HVmJZj4k4U&#xA;PYf+cU/0lb+ZtatpEkitZbJZGR1KqZI5VVTuOoEjZCaQ+mMrZOxV2KpB5w8n2HmWwEMx9G6hq1td&#xA;AAlSeoI7qe4zH1GnGUUebsezu0Z6WdjeJ5j8dWGR6z+YHlqFtP1rSv05pyjikwq9V7AyBX2/4yJX&#xA;MEZM2IcMo8Ufx+N3dnTaPVHjxT8Kfdy+zb7DTHZvPEx1GceW/JQjvHovOGKtDQA8lhiUkf7IZZDU&#xA;7eiFFozdm7/vc1j3/rKbeWvyw8wa7q8ev+enHGM1t9JBBFAaqHCkqqf5NST+172QwSmeLJ8nHza/&#xA;Hhh4eD/Tfj8dz14AAUGwHQZnOidirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqGv9U03ToRNqF3&#xA;DZwk0ElxIkS18KuQMVdYappuowmbT7uG8hBoZLeRJVr4VQkYqicVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdiqHvr+3so45JyQsssUCUFfjmcRp/wzZGUxHm2YsRmSB0BPyFlEZJrdirsVdirsVdiqD1m&#xA;7vbPSbu7sbM6heQRPJb2KuIzM6iqoHaoHLFXxl50/N78xfMN9Ml/qM+nwo7L+jLUvbRxlTQoygh2&#xA;II/bJNcuEQxt6DoV9qn/ACr/AMmvBcTfWpYr0c0dg7MdQmA3BqTmk7TJExT2Hs3CEsU+IAi+vufQ&#xA;vl11TS4LN7367eWiCO8lZ+b+qPt8q7/arSuZmmyxkOES4pR2PveZ1U4zySlEcMSdh5JnmS47sVdi&#xA;rsVSPzv5og8reU9T1+ZPUWwh5pFWgeV2CRIT2DSMorhAtXw95l80a75l1SXU9au3u7uUk1Y/Cin9&#xA;iNOiKPAZcAwTbyVH5/0x5fM3lqO5hi01DNcXaVWFo03ZHDUWUU6pvkJTiDRLZHHIiwNg+yvI3mmD&#xA;zV5T0zX4U9MX0XKSIGoSVCUlQHwWRWAyBFIT3ArsVdirsVdiqXx+YvL8lwLaPU7R7lm4LCs8ZcvW&#xA;nEKGrWvbKxmgTVi/e5J0eYR4jCXD38JpMMscZKNd82aBoUcjajeRxSRRGc2/IGZowwWqpWp3NMrn&#xA;ljHmW/DpsmQ+kda8lTRfMmia1Ej6ddxzs0Mdw0KspkRJRVeagkqfEHDDJGXIozaeeM+oVvSZ5Npd&#xA;irsVSrVLzVrK9t7iGH63pj0iuoYlJnjZmosy0+2u9GWlR1ynJKUSCN4/b73LwY8c4kE8OTmCeR8v&#xA;I9x+DD/On5meXLeU2IjmvGsZ47iWSEqqc7aQS8AzVrulDt9OYufWQvh50fudvoex8/AchqPFEijz&#xA;qQr9KaaV+Y9p5h0Y3Ply2kudSMiwNZyjj6DuCRJMwJAi+E/EDv065d+Y4o+gWfxzcH+TvDyVlkIw&#xA;q77/ACHn/ayuxju47OFLuUT3SoBNMq8FZ6bkL2zIiCBvzdflMTImIqPQK2Sa3Yq7FXYqo3U/pR1H&#xA;2jsuU58nBHzSA8Y/OX8mofNcMuv6BEsXmWJeVzbLRVvVUfcJgOh/a6H2dNqeLY80SigPy206SLyZ&#xA;5WvrqIoNGtr+Ro5FIIuf0jOkKMDuCJPiI/yTmv7Wy+F+8/mx29/T7XcaTVeHpJxH1TlXwrf9XxTa&#xA;y1C8srtbu3kKTqalvGvUN4g5wODUzxT44mpOARb1nRtTi1PTobyMcfUHxp/K42YffnpOi1Q1GIZB&#xA;1+/q45FFG5lodirsVYZ+cHlPVPNXkDUdG0rg1/KYpYI5G4K5ilVynI7AkLtXauGJoqWNab+X/k60&#xA;igf9A2UdzGihi8MbsrgCu5Db171zWSzTvmXdQwwrkEZqazTWF3Y20an1IZIIoAFCkspULvQDKoy9&#xA;Q97kTgOA+5OPye8qar5V8gado+qhVv4jNJPGjBwhllZwvIbEgEVpm4kbLzgZpgS7FXYqlvmPW4tE&#xA;0e41KSJ51gG0cYJJJNBU/srXqTlWbLwRMnK0elOfKMYIFvMtM/OnUYYLr9I2i3UrMXtTGREqA/sN&#xA;s1QvY9fHNXj7SkAeIW9Tn9moEjglwjr1+LzzTvN+nW/mWK/jngluorj6x9W9QbsH5ca5ixhkifE4&#xA;TV27XJkwZIHAJxsx4eYt6JqP50X8l1ZyafZiC2j+K8hkIcyE7FFcAcQOxpWvtscqfaRscI26uqw+&#xA;zUBGQnK5HkR080g87ajps/n7StR81Revoc9t68drFG0dxHA/IRLcU4M1JN9m6dPezJMGYlL6acbT&#xA;YZQwyhiPrBq+YvrSZfk61vL541uTy/wttBIDfVrhS1wYjzEfpueRCh9yC3SnWmWaX6zw/S4/atjD&#xA;AZN5945Pa82LzrsVdiqUtqGrzSyWq6VPbo3NEvmktyi7Hi/FZTJQn/JrlPHImuEjz2/W5gw44gS4&#xA;4nl6al8uVfa8Ls9BsbixvoNS+sW99BcLbyCJBI/71WXiVZkH2kpXxI7Zz8IUd+Ye31uqmK4OEwlA&#xA;n5V+g/YnH5RWU9n508xXWk20lxpVnHJaxxqygyMZ19MBpGVa8Y2bc/rzZaSwSQLdD2lITw4xMiMp&#xA;b33beT2XTb2+uvU+tadLYcOPD1XhfnWtaei8lKU75sYSJ5ivk6HNihCuGYn7gf0gI3JtDsVdirsV&#xA;Yl5z86aToN5b298sxaWMyIY0DLTlQ7lhvtlGbTSycnC1XaOPAQJ3ux8fm15XBBC3QI6H01/5ryoa&#xA;DIO5xv5dwf0vl+1H6tdXXmLSrOSyt2tbWQtN+/URtJUni4VeWx5Md+ta5ru2NBqNRGMI8NDnv16d&#xA;HZ6XUDJHiAIB70l/wvqXjH/wR/pmg/0N6n+j8/2OT4gZp5HsruysJ4ZypBl5pxNeqgH9WdJ2Nocu&#xA;mxmE652Ka5m2SZuGLsVdiqjd3tnZwma7njt4QaGWV1Ran/KYgYqxW+vtFuLqR9Ov7e7H2plglSUx&#xA;k/z8CePLtXMDUY+E33u10eXiHD1CC0u70O2vhPq2o21kqHnCtzKkRkavVeZWvHvT2yOmxcRvubdd&#xA;n4I8I5lm1lqFhfwC4sbmK6gJoJoHWRCR25KSM2LpVfFXYq7FWHecPzF0jRJrnSpraaa8MBKUSNoS&#xA;ZFPEPycGn83w5hajWRgTEjend9ndjZM4GQECPF53t3bfpfNnmKW5uFeyt24M4pWoHxN93Y5q9Lwi&#xA;QMuT1faZnLHKEOdMhuvyD0vSdIv7u41Oa+vYreaSzEaLbIsqISharSE70/aGbc62zy2eMx9n9x9X&#xA;T3pX5U1K4t5rdpQsstsY5grgMpKEEqQdiK5pclCXEO97fT8U8fBI7mP9r6I0fzL5W87reaf9RlZB&#xA;DxuBcKi8o3YVQNG7N9pQe2bnFqIZrADxmr7PzaLhkZDc7Vf6Qyex06xsYI4LSFYYooo4Iwo3EcQ4&#xA;xqWO5CjpXMoRA5OrnklI2SiMLB2KuxV2KvLPzMuG0HWLnXLe3hnDWcLyQvI8RaeKesctVjlHwhAP&#xA;cZh5NIJ5Lur8v2t2Tto4sQwmNgEm73oggxqvj9QZB+T1vFF+XmlSIgSS5WSa4IJbnI0jAsWIUnYD&#xA;tmTjxeGOFc+s/MS8SqB6dzM8m0uxV2KuxV2KvPfzj8tz6jo0Op2qF5tNLGZV6mB6cj/sCoPyrluK&#xA;VGnSdt6UzxiY5x+55dKun+VYEu9ViW61yRQ9lo77pCDQrLdgEH3WLqf2qDMfV60Q2j9TlezvsvLO&#xA;RlzCod3f+Px3PTvJGpX2p+TNKv76Zri7uBcvLK/Un63KPoAGwA6DIaaRMAT+N3f9pY4wzyjEUBX3&#xA;BOsvcFkWnW5gtVVtnb4mHgT2wKicVdirsVfLX5veYtR1bztqFvcSH6rp0rW1pbgnggj+FmA/mcip&#xA;P9MtiNmJYv5e893nlefWYW5xW2qadLbwTRGjCdRyiblQ03qh8OVffCRa2g/NGuXnnvUvLWjaWks8&#xA;9vZwWaiY8me7kAM7cqA8FNBv0C1yJIiCSvN6B5Kg0r8s/M1rFD5ke91CdXTVNOjQrZycRTiGJJLI&#xA;x+F6dulOQzC1GXUcPFjgJeRNGnFOuxAmyaiaJrYF9GaNq9pq1gl5bH4G2ZT1Vh1B+/HSaqOeHENu&#xA;hB5g9Q5iNzJV2KsL85flxYa5c3OqNdSxXYg4xpVBFyRTx5VFaV675g6nRjITK96d52b2zPBEY+EG&#xA;N+d7vnDXYJI5vWAqr0BPUAjbMLQ4o5DRPJ3/AG3qZ4IicRd9e5NfM/5oRyeRItOimpqqxW8MqOWM&#xA;rfvJlkLUULw9OFD9uvxjxNNp+Rie95SPamSJsAWlXkWO61MRSSKsD3DiCNnPFDyYDnU9F981GrxC&#xA;OTgBev7K1Mp4TlmKq/jXc+nfKXkLTvLNxPPa3E0zXCBHEvGgANduIGbTT6SOIkg83le0O1p6qIEg&#xA;BXcybMp1TsVdiqje3lrZWk15dyrDbW6NJNK3RUUVJOKvHdW/5yPt47p49K0cz26khLi4m9Mt7+mq&#xA;NQf7LJ8CLRWp+bfKHmnyNZ6z5lnuNNa/nNlLa6fcytxMNwTRgvAbIA7ErVa9zTBw0WjNp45Od/o+&#xA;I5H4hI/NP56W35eakvlPRtFS8sbCGMpJLdP6gMo9Qh6pISfirUt3w8N7tsYiIoCgy/8ALD89PL/n&#xA;m7bS3tn0rWQpeO0kcSpKqirelIAlWUCpUqNtxWhoDGmQL0vIpdirsVdiqX+YYtal0W7j0WaODVGj&#xA;ItZZRyUN/XwO9D2OQmDR4ebbgMBMcYuPV8n+YNM17T9Tmj1yGaK/dmeVp6lnJO7hzXmCf2gTmknG&#xA;QPq5vc4MkJRBgRw+T3v8q9Pmufy80VkKhQtyDyJ/5a5fAZttJ/dj8dXku1v8Yl8PuDN7PSoYGDuf&#xA;UkHQ9h8hmQ65HYq7FXYq7FXnWtfkX5S1fVrvVLm7v0uL2VppVjkhCBnNSFDQsafTkuJFJdcf842+&#xA;RLiFopbzUijf8WwVB8R+4648ZWlTyv8A849eTvK2uW2vabeajNe2fqGGO4kgaI+pG0TcgkMbfZc0&#xA;o3XKs9ygQkB5J5l8g+Z7DzVb1sC0KkgX/WNkQnbcFQx51XcEb1yWTtDDCPFOQj7/ANX6nmY6LLDH&#xA;PGRIm9q5G+vF3bbg+T6B/LTSrvT/AC6ouQQZSCin+VVA5U9/1Zq+ywZeJlrhGSZkB5d/xehwYjjx&#xA;xgdzEUyzNq2uxVLPMmijWtGudNM723rrQSxnoRuAw/aU9x3yrNi44mN05Wi1PgZRkoSp5hpv5Lan&#xA;c2l1+kblLWYMUtowBKjqp3ZtxRW7d/EZq8XZ0+ZNHo9TqfaLFYEY8cCPVf3fredW3krTdQ8wwaa0&#xA;EJuGn+rrK4LICW414+H0ZTHUZpS4OLrTnZNDpMeM5vDGw4vwOT0TUPyY1WC5s4bC5S4tpaLczMoj&#xA;9EjqeFTVadKd8tn2dKxRu+bh4PaTEYy4o8JHId71nSrBdP062sVlecW8axiWU8nbiOpObfHDhiB3&#xA;PIZ83iTM6A4j0RWTaXYq7FWCfndJIn5cajwYrze3VqbVBmTbJR5oL5eYVUipFRSo2Ir4ZYhLH1rX&#xA;dG0v9EQykWP16PUYJBWomjRk/EMKj2GFUs8wa3e67rd9rF8Qbq/meeWnQFzXiv8AkqNh7YhCb/lh&#xA;cTW/5j+WJIWKO2qWkZI/llnWNx9KsRgPJIfdeUsnYq7FXYq7FVG7sbK9i9G8t4rmLr6cyLIv3MCM&#xA;BAPNlGcomwadZWNlY2yWtlbx2trHX04IUWONeRLGiqABUknEAAUFnMyNyNlWwsXYq7FXYq7FXYq7&#xA;FXYqpS2lpMytNDHIyGqM6hiD4io2yqeGEjcog13hNquWodirsVdirsVSuLyt5ciulu49Nt0uVf1F&#xA;mEahg9a8q+NcqGCAN0LcuWvzmPCZy4eVWmmWuI7FXYq7FXYqhtS0zTtTtGs9Qto7q1cgvDKoZCVN&#xA;RUHwOKpN/wAq68if9WGx/wCRCf0w2VWS/lp+X8q8JPL1g69eJgQj9WNlaUf+VU/lr/1LOnf9I8f9&#xA;MeIrStafln+X1ndw3dr5esILq3kWWCZIEV0kQhlZSBsQRUY2VZLgV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVp3REZ3YKi&#xA;irMxoAB3JOJKQCTQSyLzV5Zln9CPVbR5iaBBNGST4Dfc5UM+MmuIfNypaDOBZhKvcU0y1xHYq7FX&#xA;Yq7FXYqtlkWKJ5G+yiljTrQCuRnIRBJ6KlOj+adM1a5a2tRIJEQyHmoA4ggdif5s1ui7Ww6mZhC7&#xA;Avf8ebIxITjNoxdirsVdirsVdirsVdirsVdirsVdirsVWXEywQSTuCViRnYClaKKmlaDATQtMRZp&#xA;huk/mhpmo2bTJbmKVXeMRyMQjFTtxcIT7NyUAHxG+ajJ21ijt/H0H7enycrWaM4chhd0mEPm+8e1&#xA;W5fSZRGZDG6IxeQKB9oKUWu+3bK8XbEpQ4pYpDettz7+jjGKbafr2k38UckFylZW4LG5CvzoW4cT&#xA;vWgPTNpp9VjzR4oGwoiTe3JH5kMXYq7FXYq+dPP/APzk/qdrrdxp/lO0tnsrV2ia/ug8hmZTQtGq&#xA;tGFSvSta9dssEEWpWv50XnnewtNO1y1awWOT1r42XIJcwBgvKIScgpRgfhZiCaeG2s7SFCO/pvd6&#xA;P2djc5kAeII+m+X45fapwDy1ytvXa8C+pL9b4CKoip+59Ov7VftV+jNOODa7/HJ66fj71wchXPn1&#xA;vy7lLVP+chdf8s6dB5f0u2iub61qJ7295yBEbdIlRSlSqkblvam2dBoIyOIcX4DwfbZx/mZcHx9/&#xA;X8d7LPyj/wCcgbvzNq8Oh+Y7KK1ursslhf2wdYZJUXkYnVy/FivQhuu1N8ypRdUC9tyCXYq7FVOS&#xA;5to24ySojdaMwBp9OKpH501O1j8qaq0d2iSm2kERWQBuRU0C0Na5KIs0XF1siMMyOfCXkX5b3N/a&#xA;ed9M+uyy28Eqy8vWZkRlaByv2qAgniR9GCOPAL8MQEhzqr+NPOdmzzePDjMqN8732L3b69Zf8tEX&#xA;/Br/AFwPWqySJIodGDqejKaj7xireKuxV2KvLfLv5uSaxbzNqMcGngQNPAVZ6s8ctONT1+FSc1+L&#xA;XAkiVDZ6HU9hGMBLHxSJlR/WjYPzRt2TSLiSSBJL5xFqEVWpAgdgX9tqdfHEa+PDE7WTv5Il2DPj&#xA;yACXDGNxP849yyT8z40t9U4vA0umyqLFeTf6Qp5KSd96GnTCdcPVy25eax7CmTi+r1/V/RQuvfm7&#xA;LpyQzafHb3gntluJ0LP+7k4DkgodtweuRnr6rho2GeDsGxMz4o8MqHmO96XYXLXVhbXLAK08SSFR&#xA;0BdQ1PxzYRNi3npxqRHcr4WLsVdirxD87Pzu0/Rrw+WtLT67eQmuokNwjRuqxFqEsR1YAeG9ajMT&#xA;W6OeohwCXBE8+8+X61BosM/Lz85fLTaitl5i01bSOd1EN4jc4Y3ZiT6iEDipJ3bf7s1sPZ+GO5Xx&#xA;nz8myWYyNl9AXtpHeW5hdmWNiC3A05L3U+xyObEJx4TyQ86802mn+X9U0meVpZkiu4Z5qHiDAsnP&#xA;hQdWDQhq1p7ZR2RoYY9QcYJ3jxfAGgPmV1Ha50mE7WJkD3c9/wDS38aezggio3B6HOmYOxV2KuxV&#xA;4to/5M+UdAto7a/0+31G/tuXO9lRiJRzLIxjcsgPClRTMPPnmJEA7Oz02CBiCRZZJo/lNdT8xabq&#xA;jrCmnaRFPG9n6SkStKqrEoqKKsXxN86ZDTQE7MhbbrM8sQEYHh4udeXJl0XlDytFP68ek2qyg1BE&#xA;SUB9hSg+jMkafGDfCHEl2jqCKM5V73nFx+T3le31zVb7VrOHUrjUr+4v4ZpAw4x3L8/SZOXA8GLD&#xA;3GV6jNIGgaFM9JhhKNkWbRieS4ta1DQorP0tOtNA1GHUwsEYUcIA37lAtABI7Ly9q5XpZkyN9zbr&#xA;4RjjFd71LM51TsVYz+ZXmK68v+S9R1OzNLxFSK3civF5XEfPfb4Q3IVwgbq+T7m5ubqd7i5leeeU&#xA;8pJZGLOxPcsdzlrFCzGRZbaVEMnozJIyAgEha1pyIGEFo1OI5McojqE+83+d9Q8y26xT2TRSVhq4&#xA;MYU+kyVY0djuqdsxMGix4skskb4p19jixw5zOBmY1C+V91JNmU7Fnf5PeaNT0jzjYWUMrGw1KVbe&#xA;5tSTwJk+FXp0DK1N/DbIyCh9QZWydirsVeMflX5T1e58rQ6jYX9vbrcl0eOe1S4P7qWQAgudvtds&#xA;1en08iOIEC/K3qu0O0cUZ+HOEjw90jHnXcq6n5Tt9Z8y/ou48wQHWYk9M20Vi8ShVBl6pxjJo1a1&#xA;yWTs2c/UZD5OJpfavTYpHDCMuK7oyJ6d5CCuvy40211mHRp9fRNSuADDB9VlPINWnxAlB9k9TkP5&#xA;JlV8TkT9tMMcgxmB4j5/sWebvysuND8t3+qPqKTrbx7xCIqTzYJ15H+bK5aA4xxXyczF2/HPIY+C&#xA;uLz+Pc9l0T/ji6f/AMw0P/JsZt4cg8hm+s+8o3JNbsVdir5H8tfkvqPm21k13VNVexvLq5uDeWz2&#xA;xeVZlmZZAxaRKEsO4yvLquA1TlYdJxxu2Tat+UPkvQfJ2uOI5b3UYrKaWO9nIqjxIZF9NV4qu6+5&#xA;98x46qUpgdLcqWijHGT1plHlHzfqqaX5StXYx2y2USak8yVPwQ0NaBnr9jj03ryrmlzdo4fFkLoR&#xA;LXhx4jglKX1givx87+DK/NGhaRr8UH1hmCx0kWaIhSVINFPIHbeuZuHLwS44gGRFfDm6jV6OGoiI&#xA;zugb2ZzZQmCyt4W6xRoh+aqBm6JboigArYEuxVjH5h+doPKGgHUmh+sXEsggtIK8Q0jAtVj2VVUn&#xA;8MIFq8gg/Pm4vWvjrlvaRNBbrJaxwc4WfnOkJDSSvKp4rIWoB2PbIZdMJt+DUnH5pZ/0MxrGjeYb&#xA;jT4NNsr3y/bXMkcckQlS5liV6B/UMjxliB/J92ThhEY0GvLmM5WXumseftD0/wAqP5ijkFxF9Xju&#xA;ILZWAlf1gvpqV3K/bHLbbKY58ZlwiUb94YU8kf8APbVpNRWHX7G1s7NoLi4tlRZEmJihaREMjuyg&#xA;OV4/Y3qKYmMMw9JujWzbhzHGUl1H/nI7VtB1cWujWFjd6W0cE0zSiQzF5YlkdBNHJw+Atx+x45bi&#xA;04gKXPqDklZfQPk3zTZeavLFhr9kjRQX0ZYRPQsjoxjkQkdeLoRXvhIpqTnArAvzx/8AJc3/APxl&#xA;t/8Ak8uSjzQUkuv0rb+Q7OXQbGG61d7a1jt1lUcFMgRWkf2QEtgJA3LKMSTQVPJY8ySW01t5ntbN&#xA;ry34cbq0QiOTnyqp5AfGlBy4im+RhkEhYZ5cRgaK5pXDEfXLMb9PTH/NGcrLX57/AL/H8v8Ajq8I&#xA;7mvVf/lts/8AkWP+aMj+fz/8pGL5f8dTwjuS3zZFFH558iFEVeV69SoAr8cHhnXQPpaS9lwJdirs&#xA;VYF+Sn/kvLH/AIyXH/J5sx9H/dh2PbH+MH4fcv1RVH5s6KQAC1jMSR3NJMzR9JeWyj/DYf1T+lV8&#xA;6BF81eUnIAP1qWrewRe+CJoFlrR++xf1iv8AzWlib8vtZCupPppsCCf71Mw9TOJxmi9H2X/jEfx0&#xA;ZLon/HF0/wD5hof+TYy6HIONm+s+8o3JNbsVdirHteFsZxNHMjMfhkQMCwI70zC1OP8Aidlostjh&#xA;YvcLFM0yPOkHKoDMR8tgSM1moxmcDEbW5eqzcEK6liF2L5vMK6FbULsU9W6T4+MbAMzAduIPfMXR&#xA;+z2OMPFyy4h/N5X73kNT2hkOfwMYo9Zc6Hu/W9S0PSS6wjf6pAFUM25fhsB79PiP0fLc6bBZ4iKH&#xA;R2fIUybNih2KuxVjfnnyNp/nDT7exvria3jt5vXVoOPItxK0PINt8WEGlYHe/wDOM3lG7h9OTUr7&#xA;Y1Vh6NQfb4MlxopLP+VFeVfJuoWmpR3F1eJIxjea4Eb+j0IZFVU+IivXOd9oc0hCEbMccpeoj8e9&#xA;sxhMIodKYxCW4lVWdxMRGDxQD4CBy3Ld/DONhDDtcpDc3t06derbu0n5G6D5rtH1LUrq7gkuz8KJ&#xA;6fEBBxV15KSOnj+Gd32DKQ0sQRXOvdfNpmN0J/0Kf5N/6u+o/fB/1Tzc8ZYU9T8k+U7Lyl5YsvL9&#xA;lNJcW1l6vpyzcfUPqyvMa8Qo2MhHTIk2lPMCsN/N/TLvUfy+1SG1QyTRiOf01FSVikV3p8kBOGPN&#xA;S8r1fXdR13yjott5Y8yWOhXVsiLqSXtx9WkJiRVVVIRyVqCT2O2SrvQD3IjyPe+ZNP1+4u/MvnDR&#xA;r3TbiEr9Ut7wNwmBXi6K6xhdg3Kh3r0wCIAoBlKRkbJZI2vaUWJGq6HSu1Zoq/rznToNXf04P9Kf&#xA;1MuIebX6e0r/AKuuhf8AI6P+uD8hq/5un/0p/UvEPNLLzVLXzJ+Zflaz0aRbwaVK9zeXEPxRKoKM&#xA;3xjagEXXpUgZ0cRUd2t7dkUuxV2KvOfya1PTYPIFjFPdwxSCSeqPIisKysehOYukkBjG7tO18cjq&#xA;CQD0+5lMp8pzatBq8lzbNqFtGYoZ/rAHFGrUcQ/E/aPUZleIKq3UHRXMTMTxD3pf5uXQNUsBIs8F&#xA;xf2tfqXCYVVpCFf4Vah+HxGa/tUHJppwjvKVfeGf5W5xlKJuPLmw7zPYWdj5J1X94j3LwUdwR3Yf&#xA;Cvt+vMLR9mQ0uE9chG5/QPL73Y6Cznjt1eo6J/xxdP8A+YaH/k2M3cOQcLN9Z95RuSa3Yq8s/P8A&#xA;8xappmgWNjYzNbrqUsi3MkZ4uY4lB9Oo3oxff5U6VyUQgvBNB81XflfXbTV44y9ugliuWShdUmjM&#xA;dQCCPhLBh7gfTMi0A0kXnHzlN5is9EhlMjPp1tJHM8p5s00kzMSGoCV9MRgV364YxA5JlInm9E/5&#xA;xc1Jn84X2kXCCe2msnmjD/FweKRBsDtRlc1HyyOQAjdrjjjxcVbvqfK212KuxV2KuxV2KrJoYZ4m&#xA;imRZI3FGRwCCPcHIzhGYqQsFUtTyp5dSQSCxj5A1oakf8CSRmvj2RpQb4Ay4imoAUAAUA2AHSmbE&#xA;CmLsKuxV2KuxVi17+V3kC9uXubjRYDNIauU5xAnx4xsq/hhsrSh/yqL8uf8AqyRf8jJv+a8eIrTv&#xA;+VRflz/1ZIv+Rk3/ADXjxFad/wAqi/Ln/qyRf8jJv+a8eIrSd6D5V8u6BG6aPYRWYl/vGQEu1OgZ&#xA;2JYgdhXElU1wK7FXYqxH/lUv5d/9WaP/AJGTf815R+Wx9zn/AMp6j+d9zv8AlUv5d/8AVmj/AORk&#xA;3/NeP5bH3L/Keo/nfc7/AJVL+Xf/AFZo/wDkZN/zXj+Wx9y/ynqP533O/wCVS/l3/wBWaP8A5GTf&#xA;814/lsfcv8p6j+d9zK4YY4YUhiXjHGoRF8FUUA3y8BwSbNlfih2KpT5g8p+XvMKQprNmt4tuWMIZ&#xA;nXiXoG+wy9aDCCqSN+UH5bspVtEiKsKEepN0P+zx4itIT/lRX5T/APUvQ/8AI24/6qYeIopNfLn5&#xA;ZeRfLWoHUdD0mOyvTG0RmR5WPBiCVo7sP2RgJKWT4FdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdiqQebPOeleWreN7qstxMR6VrGRzK1+JjXoB+OY+o1McQ35ux7P7NyaokR2iOqaaVqtjqtj&#xA;FfWMomt5hVWHUHuCOxHcZbjyCYscnEz4J4pmExUgi8m0uxV2KuxV2KuxV2KuxV2KuxV2KuxVTkuI&#xA;IiBJIqk9id8VXqysAVIIPQjcYq3irsVdirsVdirsVSLzD5kh0VXnu5o7e0TjylkBoCxoOnvhAVj/&#xA;APytvyv/ANXa1/4bDwrbv+Vt+V/+rta/8NjwraK038x9H1O6FrYX9vcXBBYRpWtF6nBSsxhYvEjn&#xA;qygn6RgVdirsVS7zDr1joWly6jeE+nHQKiirO5+yo+eVZsoxx4i5Wj0k9RkEI8ywLyl+bTXeqyWu&#xA;uBIILl62ky7LFXYRue6/5R79dumv0/aFyqfXk9B2h7P8GMSxWTEbjv8AMfq/BlnnPzpYeW7Dm1Jr&#xA;+YH6ra16/wCW1OiD8czNTqRiHm6js3syeqnXKA5n8dXhrvrfmbW6nneajePQAfqHZVUfQBmhJnln&#xA;3yL3oGLS4v5sI/j5vc/JHlGLy1pRt/VM11ORJdPU8OYFKIp6AePU/gN9pdP4Ua6vA9qdoHVZOKqi&#xA;OX7WQ5kutdirsVYD+Zv5j6t5T1LQtN0nSY9WvdbNyEikuFtuJtxGftOOPxCQ9SOmSAtCS/8AKyPz&#xA;h/6kCH/uKW39caHerv8AlZH5w/8AUgQ/9xS2/rjQ71d/ysj84f8AqQIf+4pbf1xod6t6f+bXnhPN&#xA;GiaN5g8pxaVFrU5ghuFvY5yCoqx4xhulR1pjwhber5FLsVS3V9estLQPdssKFgiyzMscZYgkAM3U&#xA;0B2wgWwyZYwFyIA89mA+Y/zF1yQvFoj6aF3AuJ72JR8xGjcvvcfLJCDT+cw/z4/6YPNtWt/Puqy+&#xA;peeYbM0PJY47+KJAR0PFCoqPE75KvJH5zD/Pj/pgnfl/zB+YukFVfV9Mv4B1S4vYi9P+MgIY/wCy&#xA;riY+S/nMP8+P+mD0rR/zFs5YAdTms7eYfaVbuGQfMMpFfpUZDgKfzmH+fH/TBmMEwljDhWT2cUOR&#xA;clfirsVY958g1KTy5PJpt3LZXduyTJPCSCApoeQH2lofiU/rzC7Qzzw4vEiL4TZHeOv62MsfGKsj&#xA;zDzjy7+cOuademw8yRi6WMgSSoFWZQejrQKsiHtsD9NRmXpc+PU4xkxnY/Z5F0Utdm0uTgzDij0k&#xA;zTzpqFotnJdGwfV4aR1s4YhM7EkD+7P8vU+GWAO9EgRYYN/iHSf+pDv/APuHJ/TDXml3+IdJ/wCp&#xA;Dv8A/uHJ/TGvNU08tatYXWprFD5WutJcox+uTWawIAP2eYA64Cr1W2/3ni/1F/VkUqmKvMNS/Pzy&#xA;5Y+eD5QfTrx74Xsdh9YX0vS5ysqBt35cRz8Mlwmltmt7qenXdrJa3lsZreZSkkbUIIOY+aQAqQsF&#xA;ydLGfFxQNSi8p1L8tpDeynTrlRZk1iWevqKD+ySoINPHNJPTb+nk9rh7YHCOMery5IO68laxLIDN&#xA;fRzuiqgZmdqKgoqgkdAOmQlhkeZbYdp4ojaJHyZz5Kg0Py1aGkMk+ozD/SLqijbrwSp2Ufj+rP00&#xA;oYhy9Toe05ZdVLmBAch+k+aZec/zM03ypobaxeWk08CyJEY4SvOsnQ/EVGbUAl5sgBU/Lj8x9L8+&#xA;aXdajp1rPaxWs/1d0uOHItwV6jgzClGwkUhluBWI/mt5xuPKPkbUNYtFD34CQWQYVAmmYIrEd+AJ&#xA;anelMMRZUvjo6X528z6k9y9rfapfTt+9uHSSQ1P8zsKKB7mgywzjHmVjjlLkHtH5V3HnLyx5gt/J&#xA;3mV/VgvrNrvTh6nqmBoyQ0Ifw4qSVBIG1OpyuOSMxYZ5MUoGi9gxYMZ8y+YbiLy/Lfaa7QSxzrFy&#xA;ZUJ99jzHfNT/ACkMuEzx2Klw71+123Y+lhlziGQXGj3/AKEp83MW8+/lyx3JvpiT7mJM28eTqsgq&#xA;RD2fIodirAvzpsdSuvKEbWFq129tdxzTRJ9oRiORCwABLULjYZPHKi4Ov0f5iAjfDRvv73zpZa/J&#xA;e3lzaW9nJI9rEZ5ih5UjWnNjQdF5Cpy/jdOewD/P+z9rrHX2vTemC0kaOwK/WJAahQzcQTQbDltj&#xA;xo/kCX8/7P2usvMJu7O4vY7R/qttIIpZa1UFgStSBtyCmnyx41/kCX8/7P2ovy5e3eumyNtZukV9&#xA;eLp8U7H92J3K0UtSlaSA4ma/yBL+f9n7X17mK9O7FXYq06I6MjgMjAqyncEHYg4JRBFHkrxn8xvI&#xA;JR+UP7sAltPvaV4E7mKTxU03HfqNxtxsxl7Lz8cN8MvxXvHT+1GfTwzw4ZsG0LzZr2iSXVlAUgvF&#xA;oJ7Serxhu0i0IJVh0YfTuM7XT6jHqMYnA2C8tE5dBl4Zb4z+L97O4ZvzanhSaFtIeKRQ8bj1aFSK&#xA;g4dnp4yEgCORX/8AIX/+1T/yVx2ZJjoP/Kwf0gP059Q+ocW5fVufqcv2ftbUwGlem23+88X+ov6s&#xA;ilUxV8feaQT/AM5FEDcnX7Sg/wCe0WWjkx6vpO4R1UclI37imYGqOwdhoRuUDdPKBwRSa9WArmCX&#xA;axA6qSWTGMljRz0H9cFMjPdDMpUlWFCOoyLYCxb8/wBHH5cyEqQPrNvuR7nN5jLy8xzVP+cT/wDl&#xA;DdX/AO2if+TEeSnzYh7fkEpJ5v8AKlh5o0f9GXrvGizRXMUkZAZZIHDr1BBBpQ+2KRzSK75RI4aq&#xA;uPhp3BzUHZ6CG9JRbeV7O58w2fmOZ5DdWEMtvbR1Hp0l+0xFKk0qOuZ2jvhLru0SOMe5MZtdt4tf&#xA;g0UxuZ54TOsgpwCjlsd61+DMzh2t0stVEZhirci/v/UxTX/+UOuv+Yxf1DOP7N/xSf8Aw0/cHqew&#xA;f8aH9Ut+bP8AlPPy4/5jpf8Ak0mddD6XRZfqPve0YGLsVS7zF/xxrr/UOIV8ifl5/wApL5l/7Yd/&#xA;/wAm0y4sQp+SP+Ob52/4wwf9RqYlVPyt/wCS98yf8xtn/wAm58TzVk35Tf8AKOeXv/Awg/5NQYJK&#xA;H1dlTJ2KuxV2KqV3aW15bvb3MYkhkFGQ5VmwwyxMJi4lQXjf5rfl9bMxvbBorKa1Rfqty704kjeO&#xA;UufiR2+7tmkjps2izceCPFhPOI5+/fr/AGMc+GGaBjNiPkxxq8NxbX3me60C+sWEcmnLdenHxIrz&#xA;jq6hlJ7rtnRjIJgSHVwtDgnhiccjYB2PkyS/8tCxsVvpfOuqPbyGkTxTtJzP+TxffKs2eOMXJ3Gk&#xA;0WTUS4YCymPkfTVkuP0jD5i1DUkjUpJZXcjEBmANSpY9OxyOHURyi4s9ZoMmmlwzH6nr1t/vPF/q&#xA;L+rLHDVMVYVcfk75DuPNQ80y2Uh1lbqO9E/ryhfXiYOjcA3Hqo2ph4iimW39r9atJIAQrMPhcitD&#xA;45XkhxCm3Dk4JAsTlhntpmhnUqQSsbsKeoFNOQzWygYmi7uExIWP7GsilNNH0lJpku5kDRqD6dT+&#xA;0D3GZOnxWeI8nD1WoocIO6J81+U9E81aQ2k61C09izrI0au0Z5IaqeSEHM8GnVqHk7yL5b8n2M9j&#xA;oNu1vbXEvryq8jykvxC1q5Y9FGJNqn+BXkf5pfnJqXl/Wn0PRIYjcW6qbu6nBejSKHVEUFRsrAkm&#xA;vhTJxigljGi/nDFqNpCdanje+k1I2l6w4QrHB6SsklKb/Erj6PlWjLpYyNuVh1koCmCWv/OQ3m+3&#xA;1As0Ntc6aHPG3eP039Kuw5odmp3ocyBjAFBxpTMjZZ+n5jaTfavaeYofLfmSUrb+nCYrFHhdG5Hk&#xA;GEm/2+oOHpTiS0sTmGXewK+/9a28856bdaXJpz+WPNCxSSiYuNPXlUU23kp2zVYOyoY8ZxiRoy4n&#xA;b6PXSwZPEiLNUuOv3Xmbz95KNp5f1iyg0u8d7me/szEgV0AB5Kzj9netM2YFBw5Gzb3/ACCuxVhf&#xA;5pebl0DRBDDALq/vSUhgLcAEA+OQk+Gwp13yUYkuNn1ePFXGat8y+XbbWNI1fVLsWqyR39jNYqTI&#xA;ooJ1VWagP7IXLjEuP/Kmn/nfet0C01fTYddga1DJqwjRX9RaqqTCatAf8kDExK/ypp/533rdGsdY&#xA;svL2p6Q9sv8Ap9xHN6vqKaCFXVdgf2vUx4Sv8qaf+d96c/l/PqGjwaPYX1sI7ez1uLVp5xIrMEX0&#xA;kK8Qeyxk9cBgV/lTT/zvvfW1vPFcQRzwtzhmVZI3HdWFQd/bKHYRkJAEcivxS7FXYq7FWLebNK0/&#xA;VTJZahCJ7VwheIkgEqajdSD1GEKwLWvyd8o3j2lxY2q2V3azRyMwaRkmiVgZIZAWPwutRUbg5LiR&#xA;SN81+VLU+X7e308C2i04kww1JXi5+IVPJuvvmq7WoYjM/wALuexu0RppniFxkxbydr0egatLb6hG&#xA;Y4bkKjyfyFSeLe6770yzsvADi8SJ4uL8fN1Xb3tTDNqBi4THHC9zzvv5/TVeb32zdHtIHRgyNGpV&#xA;gagggEEEZnNYNiwq4pdirsVQmpabFexcTRJgKRzUqVqRWgqMryYxIN2DOcZ8u5LrTy+6TlbhucSj&#xA;4XXYk1HUb5jw02+/Jy8mtBj6eaeAACgFBmY652KuxV2KvKvN/wCRf+IvMd7rX6b+q/XGVvQ+q+px&#xA;4oqfa9ZK/Z8MkJIpjGo/84qQ3hDjzL6Uo2LixrUe4+sD78PGtIL/AKFF/wC/s/7l/wD2c4eNae6e&#xA;VNC/QHlrTNE9f6z+jraO2+scfT5+moXlwq/GvhU5AlKa4FdirsVdirDbnyd5vuJWkk80qan4Q2nW&#xA;5oPDdsBx4ybI+0utlpdQf8r/ALCKl/gXzX/1M6f9w23/AOasHhY+77Sj8nqP9V/2EXf4F81/9TOn&#xA;/cNt/wDmrHwsfd9pX8nqP9V/2EXf4F81/wDUzp/3Dbf/AJqx8LH3faV/J6j/AFX/AGEXf4F81/8A&#xA;Uzp/3Dbf/mrHwsfd9pX8nqP9V/2EU88vaNr+nPINS1r9JwsoEUX1WO34Gu5qhNdu2SEYgUBTk6fF&#xA;liTxz4/80D7k7xcp2KuxV2KtFVPUA4q7gn8o+7FUDremtf6XPZxFUebiA5GwAYEnb2GYev05zYZY&#xA;xsZfrTE0Uli8g6VLa2Md/Gk1xp05lhnCj4058vTdTWqsOoPQ4OzNNLTYfDJuifvcbU6XHmkJSG8f&#xA;xXuZNDDDBEsUMaxRIKJGgCqB4ADYZmt8YgChyX4pdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:2c2c10bd-5825-6a41-a4ee-ede0f1fa4bbe</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:2c2c10bd-5825-6a41-a4ee-ede0f1fa4bbe</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:558459ab-82a6-704b-9a01-eee2b45d67c8</stRef:instanceID>
            <stRef:documentID>xmp.did:558459ab-82a6-704b-9a01-eee2b45d67c8</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:90D8A7B9BC31E41181C8ECE195D9A672</stEvt:instanceID>
                  <stEvt:when>2014-09-01T17:45:36+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:DC6B69D76933E41186919D0755A3BF18</stEvt:instanceID>
                  <stEvt:when>2014-09-03T23:56:06+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:558459ab-82a6-704b-9a01-eee2b45d67c8</stEvt:instanceID>
                  <stEvt:when>2014-09-05T08:54:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2c2c10bd-5825-6a41-a4ee-ede0f1fa4bbe</stEvt:instanceID>
                  <stEvt:when>2014-09-05T08:57:01+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
67.7421 83.8573 mo
62.2303 78.3443 li
65.3251 89.7196 li
67.7421 83.8573 li
cp
f
56.6658 83.9076 mo
59.0737 89.944 li
62.2303 78.3443 li
56.6658 83.9076 li
cp
.870588 .870588 .878431 rgb
f
59.1068 76.19 mo
55.2116 72.2948 li
55.2116 76.19 li
55.2735 76.19 li
56.9921 77.3676 59.0232 78.1222 61.217 78.3014 cv
59.1068 76.19 li
cp
1 .792157 .701961 rgb
f
55.2116 69.7307 mo
55.2116 72.2948 li
59.1068 76.19 li
61.217 78.3014 li
61.5514 78.3282 61.8892 78.3443 62.2303 78.3443 cv
62.4502 78.3443 62.6654 78.3311 62.8841 78.3191 cv
65.2084 78.1965 67.3644 77.4352 69.1745 76.198 cv
69.1985 76.19 li
69.1985 69.7307 li
55.2116 69.7307 li
cp
.976471 .709804 .615686 rgb
f
68.791 50.406 mo
66.0855 50.406 62.8704 52.7824 61.248 54.6979 cv
62.2303 75.0651 li
69.3943 75.0005 75.2829 66.1756 76.1198 58.7127 cv
76.1863 58.1122 76.2252 57.5191 76.2252 56.9414 cv
76.2252 53.8707 li
75.481 51.9305 70.8428 50.406 68.791 50.406 cv
cp
f
73.3044 43.4205 mo
66.9601 47.8235 59.2557 50.406 50.9478 50.406 cv
49.9849 50.406 49.0358 50.3591 48.0923 50.2892 cv
48.0236 50.8508 47.9778 51.4199 47.9778 52.001 cv
47.9778 56.9414 li
47.9778 57.5191 48.0167 58.1122 48.0832 58.7127 cv
48.9258 66.2157 54.8796 75.0686 62.1021 75.0686 cv
62.1456 75.0686 62.1879 75.0668 62.2303 75.0651 cv
62.2303 65.8207 li
63.1314 65.8207 63.7233 64.9619 63.7233 64.1548 cv
63.7233 55.034 li
63.7233 55.034 63.9146 54.7923 64.2478 54.438 cv
65.1877 53.4322 67.2865 51.504 69.5272 51.504 cv
74.162 51.504 76.2252 53.8707 76.2252 53.8707 cv
76.2252 52.001 li
76.2252 48.7686 75.1295 45.8004 73.3044 43.4205 cv
cp
1 .792157 .701961 rgb
f
77.3862 40.1699 mo
74.0452 35.3886 68.5047 32.2577 62.2303 32.2577 cv
52.3595 32.2577 44.2967 39.9983 43.7781 49.7413 cv
43.7608 50.0705 43.7494 50.4031 43.7494 50.7374 cv
43.7494 54.438 li
43.7494 56.7909 45.6489 58.6967 47.9996 58.7127 cv
48.0832 58.7127 li
48.0167 58.1122 47.9778 57.5191 47.9778 56.9414 cv
47.9778 52.001 li
47.9778 51.4199 48.0236 50.8508 48.0923 50.2892 cv
49.0358 50.3591 49.9849 50.406 50.9478 50.406 cv
59.2591 50.406 66.9636 47.8218 73.309 43.4165 cv
73.3078 43.4182 73.3067 43.4194 73.3044 43.4205 cv
75.1295 45.8004 76.2252 48.7686 76.2252 52.001 cv
76.2252 53.8707 li
76.2252 56.9414 li
76.2252 57.5191 76.1863 58.1122 76.1198 58.7127 cv
76.4611 58.7127 li
78.8116 58.6967 80.7101 56.7909 80.7101 54.438 cv
80.7101 50.7374 li
80.7101 46.8068 79.4781 43.1652 77.3862 40.1699 cv
cp
.180392 .192157 .239216 rgb
f
55.2735 76.19 mo
55.2116 76.19 li
55.2116 80.2575 li
56.6658 83.9076 li
62.2303 78.3443 li
59.6472 78.3443 57.2543 77.5474 55.2735 76.19 cv
cp
.972549 .972549 .976471 rgb
f
69.2271 80.2575 mo
69.1985 80.2575 li
69.1985 76.19 li
69.186 76.19 li
67.2063 77.5474 64.8134 78.3443 62.2303 78.3443 cv
67.7421 83.8573 li
69.2271 80.2575 li
cp
.870588 .870588 .878431 rgb
f
76.768 76.19 mo
69.1985 76.19 li
69.2271 80.2575 li
65.3251 89.7196 li
62.2303 78.3443 li
59.0737 89.944 li
55.2116 80.2575 li
49.4754 85.9926 li
61.019 97.5357 li
62.1021 97.5357 li
73.1361 97.5357 li
89.0924 97.5357 li
89.0924 88.5213 li
89.0924 88.5156 li
89.0924 81.7077 83.5737 76.19 76.768 76.19 cv
cp
.180392 .192157 .239216 rgb
f
55.2116 76.19 mo
51.1448 76.19 li
55.2116 80.2575 li
55.2116 76.19 li
cp
f
49.4754 85.9926 mo
55.2116 80.2575 li
51.1448 76.19 li
47.656 76.19 li
47.6481 76.19 li
40.8412 76.19 35.3236 81.7077 35.3236 88.5156 cv
35.3236 97.5357 li
51.2719 97.5357 li
61.019 97.5357 li
49.4754 85.9926 li
cp
.345098 .352941 .392157 rgb
f
65.3984 81.5125 mo
62.2303 84.6805 li
59.0622 81.5125 li
62.2303 78.3443 li
65.3984 81.5125 li
cp
f
174.071 174.947 mo
168.777 169.653 li
171.749 180.577 li
174.071 174.947 li
cp
1 1 1 rgb
f
163.433 174.995 mo
165.745 180.792 li
168.777 169.653 li
163.433 174.995 li
cp
.870588 .870588 .878431 rgb
f
165.776 167.584 mo
162.036 163.843 li
162.036 167.584 li
162.096 167.584 li
163.747 168.716 165.697 169.439 167.805 169.611 cv
165.776 167.584 li
cp
1 .792157 .701961 rgb
f
162.036 161.381 mo
162.036 163.843 li
165.776 167.584 li
167.805 169.611 li
168.124 169.637 168.449 169.653 168.777 169.653 cv
168.989 169.653 169.194 169.639 169.403 169.628 cv
171.638 169.511 173.707 168.78 175.445 167.592 cv
175.468 167.584 li
175.468 161.381 li
162.036 161.381 li
cp
.976471 .709804 .615686 rgb
f
175.077 142.822 mo
172.48 142.822 169.391 145.105 167.835 146.944 cv
168.777 166.504 li
175.658 166.442 181.311 157.967 182.116 150.8 cv
182.18 150.223 182.216 149.655 182.216 149.099 cv
182.216 146.15 li
181.502 144.286 177.047 142.822 175.077 142.822 cv
cp
f
179.411 136.115 mo
173.319 140.342 165.92 142.822 157.942 142.822 cv
157.019 142.822 156.105 142.778 155.199 142.71 cv
155.133 143.251 155.089 143.796 155.089 144.354 cv
155.089 149.099 li
155.089 149.655 155.127 150.223 155.191 150.8 cv
156.001 158.005 161.717 166.506 168.654 166.506 cv
168.695 166.506 168.736 166.505 168.777 166.504 cv
168.777 157.625 li
169.642 157.625 170.21 156.801 170.21 156.025 cv
170.21 147.267 li
170.21 147.267 170.394 147.035 170.714 146.694 cv
171.617 145.729 173.631 143.877 175.784 143.877 cv
180.236 143.877 182.216 146.15 182.216 146.15 cv
182.216 144.354 li
182.216 141.251 181.165 138.4 179.411 136.115 cv
cp
1 .792157 .701961 rgb
f
183.331 132.992 mo
180.124 128.401 174.802 125.395 168.777 125.395 cv
159.297 125.395 151.554 132.828 151.056 142.184 cv
151.04 142.501 151.029 142.82 151.029 143.141 cv
151.029 146.694 li
151.029 148.955 152.854 150.784 155.109 150.8 cv
155.191 150.8 li
155.127 150.223 155.089 149.655 155.089 149.099 cv
155.089 144.354 li
155.089 143.796 155.133 143.251 155.199 142.71 cv
156.105 142.778 157.019 142.822 157.942 142.822 cv
165.923 142.822 173.322 140.341 179.417 136.111 cv
179.415 136.112 179.414 136.113 179.411 136.115 cv
181.165 138.4 182.216 141.251 182.216 144.354 cv
182.216 146.15 li
182.216 149.099 li
182.216 149.655 182.18 150.223 182.116 150.8 cv
182.444 150.8 li
184.7 150.784 186.524 148.955 186.524 146.694 cv
186.524 143.141 li
186.524 139.366 185.341 135.868 183.331 132.992 cv
cp
.180392 .192157 .239216 rgb
f
162.096 167.584 mo
162.036 167.584 li
162.036 171.49 li
163.433 174.995 li
168.777 169.653 li
166.296 169.653 163.999 168.887 162.096 167.584 cv
cp
.972549 .972549 .976471 rgb
f
175.496 171.49 mo
175.468 171.49 li
175.468 167.584 li
175.458 167.584 li
173.555 168.887 171.257 169.653 168.777 169.653 cv
174.071 174.947 li
175.496 171.49 li
cp
.870588 .870588 .878431 rgb
f
182.736 167.584 mo
175.468 167.584 li
175.496 171.49 li
171.749 180.577 li
168.777 169.653 li
165.745 180.792 li
162.036 171.49 li
156.527 176.997 li
167.613 188.083 li
168.654 188.083 li
179.25 188.083 li
194.573 188.083 li
194.573 179.426 li
194.573 179.421 li
194.573 172.883 189.274 167.584 182.736 167.584 cv
cp
.180392 .192157 .239216 rgb
f
162.036 167.584 mo
158.131 167.584 li
162.036 171.49 li
162.036 167.584 li
cp
f
156.527 176.997 mo
162.036 171.49 li
158.131 167.584 li
154.78 167.584 li
154.773 167.584 li
148.236 167.584 142.937 172.883 142.937 179.421 cv
142.937 188.083 li
158.253 188.083 li
167.613 188.083 li
156.527 176.997 li
cp
.345098 .352941 .392157 rgb
f
171.819 172.695 mo
168.777 175.738 li
165.734 172.695 li
168.777 169.653 li
171.819 172.695 li
cp
f
185.281 192.397 mo
182.105 189.221 182.105 184.074 185.281 180.898 cv
186.867 179.311 188.948 178.517 191.031 178.517 cv
191.031 174.947 li
188.036 174.947 185.04 176.089 182.756 178.374 cv
178.187 182.944 178.187 190.352 182.756 194.921 cv
185.04 197.206 188.036 198.349 191.031 198.349 cv
191.031 194.779 li
188.948 194.779 186.867 193.985 185.281 192.397 cv
cp
.937255 .945098 .760784 rgb
f
191.031 174.947 mo
191.031 178.517 li
193.112 178.517 195.193 179.311 196.779 180.898 cv
199.955 184.074 199.955 189.221 196.779 192.397 cv
195.193 193.985 193.112 194.779 191.031 194.779 cv
191.031 198.349 li
194.025 198.349 197.02 197.206 199.305 194.921 cv
203.874 190.352 203.874 182.944 199.305 178.374 cv
197.02 176.089 194.025 174.947 191.031 174.947 cv
cp
.717647 .756863 .117647 rgb
f
196.779 180.898 mo
195.193 179.311 193.112 178.517 191.031 178.517 cv
188.948 178.517 186.867 179.311 185.281 180.898 cv
182.105 184.074 182.105 189.221 185.281 192.397 cv
186.867 193.985 188.948 194.779 191.031 194.779 cv
193.112 194.779 195.193 193.985 196.779 192.397 cv
199.955 189.221 199.955 184.074 196.779 180.898 cv
cp
.137255 .639216 .560784 rgb
f
193.35 186.458 mo
192.983 186.162 192.447 185.892 191.736 185.643 cv
191.282 185.493 li
191.192 185.46 191.112 185.427 191.031 185.395 cv
190.67 185.25 190.403 185.098 190.244 184.94 cv
190.048 184.745 189.951 184.49 189.951 184.176 cv
189.951 183.853 190.047 183.588 190.24 183.382 cv
190.433 183.178 190.685 183.075 190.996 183.075 cv
191.008 183.075 191.018 183.077 191.031 183.078 cv
191.347 183.084 191.613 183.18 191.82 183.371 cv
192.035 183.569 192.158 183.838 192.187 184.176 cv
194.208 184.176 li
194.177 183.602 194.025 183.085 193.752 182.625 cv
193.479 182.165 193.107 181.809 192.643 181.555 cv
192.416 181.43 192.175 181.337 191.921 181.273 cv
191.921 179.465 li
191.031 179.465 li
190.244 179.465 li
190.244 181.284 li
190.245 181.284 li
190 181.35 189.766 181.446 189.538 181.573 cv
189.061 181.84 188.683 182.203 188.406 182.664 cv
188.129 183.124 187.991 183.624 187.991 184.162 cv
187.991 184.665 188.113 185.14 188.361 185.587 cv
188.608 186.032 188.94 186.387 189.361 186.653 cv
189.576 186.786 189.867 186.922 190.239 187.063 cv
190.293 187.077 190.433 187.122 190.662 187.199 cv
190.794 187.241 190.916 187.285 191.031 187.329 cv
191.469 187.495 191.801 187.674 192.021 187.861 cv
192.343 188.137 192.504 188.505 192.504 188.964 cv
192.504 189.357 192.373 189.682 192.109 189.939 cv
191.847 190.195 191.509 190.324 191.104 190.324 cv
191.078 190.324 191.056 190.32 191.031 190.318 cv
190.642 190.304 190.322 190.189 190.077 189.963 cv
189.82 189.722 189.677 189.395 189.648 188.979 cv
187.595 188.979 li
187.621 189.462 187.701 189.855 187.838 190.154 cv
187.984 190.533 188.211 190.875 188.517 191.182 cv
189.008 191.686 189.585 192.003 190.244 192.142 cv
190.244 193.909 li
191.031 193.909 li
191.921 193.909 li
191.921 192.115 li
192.215 192.041 192.493 191.927 192.763 191.773 cv
193.29 191.473 193.704 191.062 194.01 190.542 cv
194.314 190.023 194.465 189.451 194.465 188.828 cv
194.465 187.857 194.094 187.067 193.35 186.458 cv
cp
.180392 .192157 .239216 rgb
f
305.045 73.0557 mo
302.021 70.0313 li
303.718 76.2713 li
305.045 73.0557 li
cp
1 1 1 rgb
f
298.968 73.0836 mo
300.289 76.3947 li
302.021 70.0313 li
298.968 73.0836 li
cp
.870588 .870588 .878431 rgb
f
300.307 68.8494 mo
298.17 66.7124 li
298.17 68.8494 li
298.204 68.8494 li
299.147 69.4961 300.262 69.9098 301.465 70.0081 cv
300.307 68.8494 li
cp
1 .792157 .701961 rgb
f
298.17 65.3059 mo
298.17 66.7124 li
300.307 68.8494 li
301.465 70.0081 li
301.649 70.0226 301.833 70.0313 302.021 70.0313 cv
302.141 70.0313 302.26 70.0239 302.38 70.0179 cv
303.655 69.9507 304.837 69.5327 305.83 68.8541 cv
305.843 68.8494 li
305.843 65.3059 li
298.17 65.3059 li
cp
.976471 .709804 .615686 rgb
f
305.619 54.7047 mo
304.135 54.7047 302.371 56.0091 301.483 57.0589 cv
302.021 68.233 li
305.952 68.1972 309.18 63.3558 309.64 59.2613 cv
309.677 58.9328 309.699 58.6073 309.699 58.2913 cv
309.699 56.6061 li
309.29 55.542 306.746 54.7047 305.619 54.7047 cv
cp
f
308.095 50.8736 mo
304.616 53.289 300.389 54.7047 295.831 54.7047 cv
295.304 54.7047 294.783 54.6792 294.265 54.6411 cv
294.227 54.9497 294.202 55.2618 294.202 55.5805 cv
294.202 58.2913 li
294.202 58.6073 294.223 58.9328 294.26 59.2613 cv
294.722 63.3786 297.988 68.2348 301.95 68.2348 cv
301.974 68.2348 301.997 68.2334 302.021 68.233 cv
302.021 63.161 li
302.514 63.161 302.841 62.6897 302.841 62.2467 cv
302.841 57.2435 li
302.841 57.2435 302.945 57.1112 303.127 56.9165 cv
303.644 56.3654 304.795 55.3073 306.023 55.3073 cv
308.567 55.3073 309.699 56.6061 309.699 56.6061 cv
309.699 55.5805 li
309.699 53.8071 309.097 52.1785 308.095 50.8736 cv
cp
1 .792157 .701961 rgb
f
310.335 49.0901 mo
308.502 46.4673 305.463 44.7488 302.021 44.7488 cv
296.604 44.7488 292.181 48.9964 291.898 54.3405 cv
291.889 54.5206 291.883 54.7038 291.883 54.8865 cv
291.883 56.9165 li
291.883 58.2078 292.925 59.2529 294.213 59.2613 cv
294.26 59.2613 li
294.223 58.9328 294.202 58.6073 294.202 58.2913 cv
294.202 55.5805 li
294.202 55.2618 294.227 54.9497 294.265 54.6411 cv
294.783 54.6792 295.304 54.7047 295.831 54.7047 cv
300.392 54.7047 304.617 53.2876 308.098 50.8709 cv
308.098 50.8723 308.096 50.8728 308.095 50.8736 cv
309.097 52.1785 309.699 53.8071 309.699 55.5805 cv
309.699 56.6061 li
309.699 58.2913 li
309.699 58.6073 309.677 58.9328 309.64 59.2613 cv
309.828 59.2613 li
311.117 59.2529 312.159 58.2078 312.159 56.9165 cv
312.159 54.8865 li
312.159 52.731 311.483 50.7326 310.335 49.0901 cv
cp
.180392 .192157 .239216 rgb
f
298.204 68.8494 mo
298.17 68.8494 li
298.17 71.0806 li
298.968 73.0836 li
302.021 70.0313 li
300.604 70.0313 299.291 69.5939 298.204 68.8494 cv
cp
.972549 .972549 .976471 rgb
f
305.86 71.0806 mo
305.843 71.0806 li
305.843 68.8494 li
305.837 68.8494 li
304.751 69.5939 303.437 70.0313 302.021 70.0313 cv
305.045 73.0557 li
305.86 71.0806 li
cp
.870588 .870588 .878431 rgb
f
309.995 68.8494 mo
305.843 68.8494 li
305.86 71.0806 li
303.718 76.2713 li
302.021 70.0313 li
300.289 76.3947 li
298.17 71.0806 li
295.024 74.2275 li
301.356 80.5593 li
301.95 80.5593 li
308.004 80.5593 li
316.757 80.5593 li
316.757 75.6145 li
316.757 75.6117 li
316.757 71.8775 313.73 68.8494 309.995 68.8494 cv
cp
.180392 .192157 .239216 rgb
f
298.17 68.8494 mo
295.939 68.8494 li
298.17 71.0806 li
298.17 68.8494 li
cp
f
295.024 74.2275 mo
298.17 71.0806 li
295.939 68.8494 li
294.026 68.8494 li
294.023 68.8494 li
290.288 68.8494 287.26 71.8775 287.26 75.6117 cv
287.26 80.5593 li
296.01 80.5593 li
301.356 80.5593 li
295.024 74.2275 li
cp
.345098 .352941 .392157 rgb
f
303.758 71.7694 mo
302.021 73.508 li
300.283 71.7694 li
302.021 70.0313 li
303.758 71.7694 li
cp
f
264.244 73.1156 mo
261.22 70.0907 li
262.918 76.3311 li
264.244 73.1156 li
cp
1 1 1 rgb
f
258.168 73.1429 mo
259.488 76.4541 li
261.22 70.0907 li
258.168 73.1429 li
cp
.870588 .870588 .878431 rgb
f
259.506 68.9093 mo
257.369 66.7722 li
257.369 68.9093 li
257.403 68.9093 li
258.347 69.5555 259.462 69.9687 260.663 70.068 cv
259.506 68.9093 li
cp
1 .792157 .701961 rgb
f
257.369 65.3653 mo
257.369 66.7722 li
259.506 68.9093 li
260.663 70.068 li
260.848 70.0819 261.032 70.0907 261.22 70.0907 cv
261.34 70.0907 261.459 70.0833 261.578 70.0773 cv
262.854 70.01 264.035 69.592 265.028 68.9134 cv
265.043 68.9093 li
265.043 65.3653 li
257.369 65.3653 li
cp
.976471 .709804 .615686 rgb
f
264.82 54.764 mo
263.334 54.764 261.572 56.068 260.682 57.1182 cv
261.22 68.2923 li
265.151 68.2566 268.379 63.4152 268.839 59.3206 cv
268.877 58.9917 268.898 58.6666 268.898 58.3507 cv
268.898 56.6655 li
268.489 55.6009 265.945 54.764 264.82 54.764 cv
cp
f
267.296 50.9335 mo
263.814 53.3484 259.588 54.764 255.03 54.764 cv
254.502 54.764 253.983 54.7386 253.463 54.701 cv
253.426 55.0091 253.402 55.3212 253.402 55.6399 cv
253.402 58.3507 li
253.402 58.6666 253.422 58.9917 253.46 59.3206 cv
253.921 63.4379 257.187 68.2941 261.149 68.2941 cv
261.173 68.2941 261.197 68.2928 261.22 68.2923 cv
261.22 63.2199 li
261.713 63.2199 262.04 62.7491 262.04 62.3061 cv
262.04 57.3028 li
262.04 57.3028 262.144 57.1706 262.327 56.9758 cv
262.842 56.4243 263.993 55.3666 265.223 55.3666 cv
267.767 55.3666 268.898 56.6655 268.898 56.6655 cv
268.898 55.6399 li
268.898 53.8665 268.296 52.2384 267.296 50.9335 cv
cp
1 .792157 .701961 rgb
f
269.534 49.149 mo
267.702 46.5267 264.663 44.8085 261.22 44.8085 cv
255.804 44.8085 251.381 49.0553 251.097 54.4004 cv
251.088 54.5799 251.083 54.7632 251.083 54.9464 cv
251.083 56.9758 li
251.083 58.2668 252.123 59.3123 253.412 59.3206 cv
253.46 59.3206 li
253.422 58.9917 253.402 58.6666 253.402 58.3507 cv
253.402 55.6399 li
253.402 55.3212 253.426 55.0091 253.463 54.701 cv
253.983 54.7386 254.502 54.764 255.03 54.764 cv
259.59 54.764 263.817 53.3474 267.298 50.9307 cv
267.298 50.9317 267.296 50.9321 267.296 50.9335 cv
268.296 52.2384 268.898 53.8665 268.898 55.6399 cv
268.898 56.6655 li
268.898 58.3507 li
268.898 58.6666 268.877 58.9917 268.839 59.3206 cv
269.027 59.3206 li
270.315 59.3123 271.358 58.2668 271.358 56.9758 cv
271.358 54.9464 li
271.358 52.7903 270.683 50.7925 269.534 49.149 cv
cp
.180392 .192157 .239216 rgb
f
257.403 68.9093 mo
257.369 68.9093 li
257.369 71.14 li
258.168 73.1429 li
261.22 70.0907 li
259.803 70.0907 258.49 69.6533 257.403 68.9093 cv
cp
.972549 .972549 .976471 rgb
f
265.059 71.14 mo
265.043 71.14 li
265.043 68.9093 li
265.038 68.9093 li
263.95 69.6533 262.637 70.0907 261.22 70.0907 cv
264.244 73.1156 li
265.059 71.14 li
cp
.870588 .870588 .878431 rgb
f
269.195 68.9093 mo
265.043 68.9093 li
265.059 71.14 li
262.918 76.3311 li
261.22 70.0907 li
259.488 76.4541 li
257.369 71.14 li
254.223 74.2864 li
260.556 80.6187 li
261.149 80.6187 li
267.203 80.6187 li
275.956 80.6187 li
275.956 75.6738 li
275.956 75.6711 li
275.956 71.9369 272.928 68.9093 269.195 68.9093 cv
cp
.180392 .192157 .239216 rgb
f
257.369 68.9093 mo
255.139 68.9093 li
257.369 71.14 li
257.369 68.9093 li
cp
f
254.223 74.2864 mo
257.369 71.14 li
255.139 68.9093 li
253.225 68.9093 li
253.221 68.9093 li
249.487 68.9093 246.46 71.9369 246.46 75.6711 cv
246.46 80.6187 li
255.208 80.6187 li
260.556 80.6187 li
254.223 74.2864 li
cp
.345098 .352941 .392157 rgb
f
262.957 71.8293 mo
261.22 73.5674 li
259.482 71.8293 li
261.22 70.0907 li
262.957 71.8293 li
cp
f
286.111 86.7723 mo
281.644 82.3048 li
284.152 91.5223 li
286.111 86.7723 li
cp
1 1 1 rgb
f
277.135 86.8132 mo
279.085 91.7041 li
281.644 82.3048 li
277.135 86.8132 li
cp
.870588 .870588 .878431 rgb
f
279.112 80.5593 mo
275.956 77.4036 li
275.956 80.5593 li
276.006 80.5593 li
277.4 81.514 279.044 82.1248 280.822 82.2704 cv
279.112 80.5593 li
cp
1 .792157 .701961 rgb
f
275.956 75.3259 mo
275.956 77.4036 li
279.112 80.5593 li
280.822 82.2704 li
281.093 82.2923 281.366 82.3048 281.644 82.3048 cv
281.822 82.3048 281.997 82.2941 282.173 82.2849 cv
284.057 82.1861 285.804 81.5687 287.27 80.5672 cv
287.289 80.5593 li
287.289 75.3259 li
275.956 75.3259 li
cp
.976471 .709804 .615686 rgb
f
286.96 59.6672 mo
284.768 59.6672 282.163 61.5931 280.849 63.1448 cv
281.644 79.6487 li
287.449 79.5963 292.218 72.4457 292.897 66.3978 cv
292.952 65.9113 292.984 65.4316 292.984 64.9636 cv
292.984 62.4749 li
292.38 60.9025 288.622 59.6672 286.96 59.6672 cv
cp
f
290.617 54.0076 mo
285.475 57.5751 279.234 59.6672 272.502 59.6672 cv
271.723 59.6672 270.953 59.6296 270.187 59.5734 cv
270.132 60.0289 270.095 60.4891 270.095 60.9599 cv
270.095 64.9636 li
270.095 65.4316 270.126 65.9113 270.182 66.3978 cv
270.865 72.4777 275.686 79.651 281.54 79.651 cv
281.574 79.651 281.61 79.6501 281.644 79.6487 cv
281.644 72.1572 li
282.373 72.1572 282.854 71.4619 282.854 70.8074 cv
282.854 63.4175 li
282.854 63.4175 283.009 63.2209 283.278 62.9341 cv
284.041 62.1201 285.74 60.5569 287.555 60.5569 cv
291.313 60.5569 292.984 62.4749 292.984 62.4749 cv
292.984 60.9599 li
292.984 58.341 292.096 55.9358 290.617 54.0076 cv
cp
1 .792157 .701961 rgb
f
293.923 51.3737 mo
291.217 47.5 286.729 44.9626 281.644 44.9626 cv
273.645 44.9626 267.112 51.235 266.693 59.1291 cv
266.678 59.3953 266.669 59.6658 266.669 59.9367 cv
266.669 62.9341 li
266.669 64.8416 268.208 66.3854 270.112 66.3978 cv
270.182 66.3978 li
270.126 65.9113 270.095 65.4316 270.095 64.9636 cv
270.095 60.9599 li
270.095 60.4891 270.132 60.0289 270.187 59.5734 cv
270.952 59.6296 271.723 59.6672 272.502 59.6672 cv
279.236 59.6672 285.479 57.5741 290.621 54.0042 cv
290.62 54.0052 290.618 54.0066 290.617 54.0076 cv
292.096 55.9358 292.984 58.341 292.984 60.9599 cv
292.984 62.4749 li
292.984 64.9636 li
292.984 65.4316 292.952 65.9113 292.897 66.3978 cv
293.175 66.3978 li
295.078 66.3854 296.617 64.8416 296.617 62.9341 cv
296.617 59.9367 li
296.617 56.7517 295.62 53.8002 293.923 51.3737 cv
cp
.180392 .192157 .239216 rgb
f
276.006 80.5593 mo
275.956 80.5593 li
275.956 83.8546 li
277.135 86.8132 li
281.644 82.3048 li
279.551 82.3048 277.612 81.6596 276.006 80.5593 cv
cp
.972549 .972549 .976471 rgb
f
287.314 83.8546 mo
287.289 83.8546 li
287.289 80.5593 li
287.281 80.5593 li
285.675 81.6596 283.735 82.3048 281.644 82.3048 cv
286.111 86.7723 li
287.314 83.8546 li
cp
.870588 .870588 .878431 rgb
f
293.422 80.5593 mo
287.29 80.5593 li
287.314 83.8546 li
284.152 91.5223 li
281.644 82.3048 li
279.085 91.7041 li
275.956 83.8546 li
271.308 88.5025 li
280.661 97.856 li
281.54 97.856 li
290.48 97.856 li
303.409 97.856 li
303.409 90.551 li
303.409 90.5472 li
303.409 85.0319 298.939 80.5593 293.422 80.5593 cv
cp
.180392 .192157 .239216 rgb
f
275.956 80.5593 mo
272.661 80.5593 li
275.956 83.8546 li
275.956 80.5593 li
cp
f
271.308 88.5025 mo
275.956 83.8546 li
272.661 80.5593 li
269.834 80.5593 li
269.827 80.5593 li
264.313 80.5593 259.841 85.0319 259.841 90.5472 cv
259.841 97.856 li
272.765 97.856 li
280.661 97.856 li
271.308 88.5025 li
cp
.345098 .352941 .392157 rgb
f
284.21 84.8728 mo
281.644 87.4402 li
279.076 84.8728 li
281.644 82.3048 li
284.21 84.8728 li
cp
f
43.8244 277.838 mo
40.2256 274.24 li
42.2459 281.665 li
43.8244 277.838 li
cp
1 1 1 rgb
f
36.5933 277.871 mo
38.1644 281.811 li
40.2256 274.24 li
36.5933 277.871 li
cp
.870588 .870588 .878431 rgb
f
38.186 272.833 mo
35.6434 270.29 li
35.6434 272.833 li
35.6845 272.833 li
36.8071 273.602 38.1322 274.095 39.5642 274.212 cv
38.186 272.833 li
cp
1 .792157 .701961 rgb
f
35.6434 268.617 mo
35.6434 270.29 li
38.186 272.833 li
39.5642 274.212 li
39.7824 274.229 40.0022 274.24 40.2256 274.24 cv
40.3691 274.24 40.5096 274.23 40.6517 274.223 cv
42.1703 274.143 43.5769 273.646 44.7578 272.839 cv
44.7743 272.833 li
44.7743 268.617 li
35.6434 268.617 li
cp
.976471 .709804 .615686 rgb
f
44.5075 256.001 mo
42.7429 256.001 40.6427 257.554 39.5859 258.804 cv
40.2256 272.1 li
44.9021 272.057 48.7452 266.297 49.2923 261.424 cv
49.3363 261.033 49.3611 260.646 49.3611 260.269 cv
49.3611 258.264 li
48.8745 256.997 45.8468 256.001 44.5075 256.001 cv
cp
f
47.4544 251.443 mo
43.3124 254.317 38.2839 256.001 32.8601 256.001 cv
32.2323 256.001 31.6119 255.973 30.9961 255.926 cv
30.952 256.293 30.9221 256.665 30.9221 257.043 cv
30.9221 260.269 li
30.9221 260.646 30.9468 261.033 30.9901 261.424 cv
31.541 266.323 35.4266 272.102 40.1412 272.102 cv
40.1688 272.102 40.1972 272.1 40.2256 272.1 cv
40.2256 266.065 li
40.8131 266.065 41.1995 265.505 41.1995 264.977 cv
41.1995 259.024 li
41.1995 259.024 41.3251 258.865 41.5411 258.634 cv
42.1562 257.977 43.5254 256.719 44.9888 256.719 cv
48.015 256.719 49.3611 258.264 49.3611 258.264 cv
49.3611 257.043 li
49.3611 254.934 48.6458 252.996 47.4544 251.443 cv
cp
1 .792157 .701961 rgb
f
50.1181 249.321 mo
47.9388 246.2 44.3214 244.156 40.2256 244.156 cv
33.7809 244.156 28.5178 249.209 28.1807 255.568 cv
28.1687 255.784 28.162 256 28.162 256.219 cv
28.162 258.634 li
28.162 260.17 29.4027 261.414 30.9356 261.424 cv
30.9901 261.424 li
30.9468 261.033 30.9221 260.646 30.9221 260.269 cv
30.9221 257.043 li
30.9221 256.665 30.952 256.293 30.9961 255.926 cv
31.6112 255.973 32.2323 256.001 32.8601 256.001 cv
38.2861 256.001 43.3153 254.316 47.4581 251.441 cv
47.4567 251.441 47.4544 251.442 47.4544 251.443 cv
48.6458 252.996 49.3611 254.934 49.3611 257.043 cv
49.3611 258.264 li
49.3611 260.269 li
49.3611 260.646 49.3363 261.033 49.2923 261.424 cv
49.515 261.424 li
51.0486 261.414 52.2885 260.17 52.2885 258.634 cv
52.2885 256.219 li
52.2885 253.653 51.4844 251.276 50.1181 249.321 cv
cp
.180392 .192157 .239216 rgb
f
35.6845 272.833 mo
35.6434 272.833 li
35.6434 275.488 li
36.5933 277.871 li
40.2256 274.24 li
38.5395 274.24 36.976 273.72 35.6845 272.833 cv
cp
.972549 .972549 .976471 rgb
f
44.793 275.488 mo
44.7743 275.488 li
44.7743 272.833 li
44.766 272.833 li
43.4738 273.72 41.911 274.24 40.2256 274.24 cv
43.8244 277.838 li
44.793 275.488 li
cp
.870588 .870588 .878431 rgb
f
49.7146 272.833 mo
44.7743 272.833 li
44.793 275.488 li
42.2459 281.665 li
40.2256 274.24 li
38.1644 281.811 li
35.6434 275.488 li
31.8997 279.232 li
39.4349 286.767 li
40.1412 286.767 li
47.3446 286.767 li
57.7602 286.767 li
57.7602 280.883 li
57.7602 280.88 li
57.7602 276.436 54.1578 272.833 49.7146 272.833 cv
cp
.180392 .192157 .239216 rgb
f
35.6434 272.833 mo
32.9879 272.833 li
35.6434 275.488 li
35.6434 272.833 li
cp
f
31.8997 279.232 mo
35.6434 275.488 li
32.9879 272.833 li
30.7106 272.833 li
30.7068 272.833 li
26.2637 272.833 22.6619 276.436 22.6619 280.88 cv
22.6619 286.767 li
33.0723 286.767 li
39.4349 286.767 li
31.8997 279.232 li
cp
.345098 .352941 .392157 rgb
f
42.2937 276.309 mo
40.2256 278.375 li
38.1569 276.309 li
40.2256 274.24 li
42.2937 276.309 li
cp
f
87.8189 277.838 mo
84.2201 274.24 li
86.2396 281.665 li
87.8189 277.838 li
cp
1 1 1 rgb
f
80.5886 277.871 mo
82.1603 281.811 li
84.2201 274.24 li
80.5886 277.871 li
cp
.870588 .870588 .878431 rgb
f
82.1812 272.833 mo
79.6379 270.29 li
79.6379 272.833 li
79.679 272.833 li
80.8001 273.602 82.1267 274.095 83.5594 274.212 cv
82.1812 272.833 li
cp
1 .792157 .701961 rgb
f
79.6379 268.617 mo
79.6379 270.29 li
82.1812 272.833 li
83.5594 274.212 li
83.7769 274.229 83.9982 274.24 84.2201 274.24 cv
84.3636 274.24 84.5049 274.23 84.6469 274.223 cv
86.1634 274.143 87.5714 273.646 88.7516 272.839 cv
88.768 272.833 li
88.768 268.617 li
79.6379 268.617 li
cp
.976471 .709804 .615686 rgb
f
88.5019 256.001 mo
86.7358 256.001 84.6372 257.554 83.5796 258.804 cv
84.2201 272.1 li
88.8973 272.057 92.7396 266.297 93.2867 261.424 cv
93.3308 261.033 93.3555 260.646 93.3555 260.269 cv
93.3555 258.264 li
92.8697 256.997 89.8428 256.001 88.5019 256.001 cv
cp
f
91.4481 251.443 mo
87.3061 254.317 82.2784 256.001 76.8554 256.001 cv
76.2275 256.001 75.6064 255.973 74.9899 255.926 cv
74.9457 256.293 74.9166 256.665 74.9166 257.043 cv
74.9166 260.269 li
74.9166 260.646 74.942 261.033 74.9854 261.424 cv
75.5354 266.323 79.4211 272.102 84.1357 272.102 cv
84.1633 272.102 84.1917 272.1 84.2201 272.1 cv
84.2201 266.065 li
84.8076 266.065 85.1955 265.505 85.1955 264.977 cv
85.1955 259.024 li
85.1955 259.024 85.3203 258.865 85.5363 258.634 cv
86.1514 257.977 87.5206 256.719 88.9825 256.719 cv
92.0094 256.719 93.3555 258.264 93.3555 258.264 cv
93.3555 257.043 li
93.3555 254.934 92.6395 252.996 91.4481 251.443 cv
cp
1 .792157 .701961 rgb
f
94.1134 249.321 mo
91.9332 246.2 88.3165 244.156 84.2201 244.156 cv
77.7754 244.156 72.5123 249.209 72.1751 255.568 cv
72.1632 255.784 72.1572 256 72.1572 256.219 cv
72.1572 258.634 li
72.1572 260.17 73.3971 261.414 74.93 261.424 cv
74.9854 261.424 li
74.942 261.033 74.9166 260.646 74.9166 260.269 cv
74.9166 257.043 li
74.9166 256.665 74.9457 256.293 74.9899 255.926 cv
75.6064 255.973 76.2275 256.001 76.8554 256.001 cv
82.2806 256.001 87.3098 254.316 91.4519 251.441 cv
91.4504 251.441 91.4489 251.442 91.4481 251.443 cv
92.6395 252.996 93.3555 254.934 93.3555 257.043 cv
93.3555 258.264 li
93.3555 260.269 li
93.3555 260.646 93.3308 261.033 93.2867 261.424 cv
93.5095 261.424 li
95.0423 261.414 96.283 260.17 96.283 258.634 cv
96.283 256.219 li
96.283 253.653 95.4796 251.276 94.1134 249.321 cv
cp
.180392 .192157 .239216 rgb
f
79.679 272.833 mo
79.6379 272.833 li
79.6379 275.488 li
80.5886 277.871 li
84.2201 274.24 li
82.534 274.24 80.9712 273.72 79.679 272.833 cv
cp
.972549 .972549 .976471 rgb
f
88.7882 275.488 mo
88.768 275.488 li
88.768 272.833 li
88.7613 272.833 li
87.469 273.72 85.9048 274.24 84.2201 274.24 cv
87.8189 277.838 li
88.7882 275.488 li
cp
.870588 .870588 .878431 rgb
f
93.709 272.833 mo
88.7688 272.833 li
88.7882 275.488 li
86.2396 281.665 li
84.2201 274.24 li
82.1603 281.811 li
79.6379 275.488 li
75.8949 279.232 li
83.4286 286.767 li
84.1357 286.767 li
91.3391 286.767 li
101.754 286.767 li
101.754 280.883 li
101.754 280.88 li
101.754 276.436 98.1523 272.833 93.709 272.833 cv
cp
.180392 .192157 .239216 rgb
f
79.6379 272.833 mo
76.9831 272.833 li
79.6379 275.488 li
79.6379 272.833 li
cp
f
75.8949 279.232 mo
79.6379 275.488 li
76.9831 272.833 li
74.7059 272.833 li
74.7021 272.833 li
70.2588 272.833 66.6557 276.436 66.6557 280.88 cv
66.6557 286.767 li
77.0668 286.767 li
83.4286 286.767 li
75.8949 279.232 li
cp
.345098 .352941 .392157 rgb
f
86.2874 276.309 mo
84.2201 278.375 li
82.1521 276.309 li
84.2201 274.24 li
86.2874 276.309 li
cp
f
75.1251 278.272 mo
69.6355 281.925 li
67.5383 280.795 64.9419 280.128 62.1287 280.128 cv
55.1705 280.128 49.53 284.214 49.53 289.256 cv
49.53 294.298 55.1705 298.385 62.1287 298.385 cv
69.087 298.385 74.7275 294.298 74.7275 289.256 cv
74.7275 287.564 74.09 285.981 72.9831 284.622 cv
75.1251 278.272 li
cp
.717647 .756863 .117647 rgb
f
57.4433 289.256 mo
57.4433 290.265 56.6256 291.082 55.6167 291.082 cv
54.6069 291.082 53.7908 290.265 53.7908 289.256 cv
53.7908 288.247 54.6069 287.429 55.6167 287.429 cv
56.6256 287.429 57.4433 288.247 57.4433 289.256 cv
cp
1 1 1 rgb
f
63.9546 289.256 mo
63.9546 290.265 63.137 291.082 62.1287 291.082 cv
61.1197 291.082 60.3028 290.265 60.3028 289.256 cv
60.3028 288.247 61.1197 287.429 62.1287 287.429 cv
63.137 287.429 63.9546 288.247 63.9546 289.256 cv
cp
f
70.4666 289.256 mo
70.4666 290.265 69.6489 291.082 68.6408 291.082 cv
67.6302 291.082 66.8141 290.265 66.8141 289.256 cv
66.8141 288.247 67.6302 287.429 68.6408 287.429 cv
69.6489 287.429 70.4666 288.247 70.4666 289.256 cv
cp
f
49.1301 257.198 mo
54.6189 253.545 li
56.7153 254.675 59.3133 255.342 62.1258 255.342 cv
69.084 255.342 74.7253 251.255 74.7253 246.214 cv
74.7253 241.173 69.084 237.085 62.1258 237.085 cv
55.1675 237.085 49.5269 241.173 49.5269 246.214 cv
49.5269 247.906 50.1637 249.489 51.2706 250.849 cv
49.1301 257.198 li
cp
.941176 .337255 .239216 rgb
f
66.8104 246.214 mo
66.8104 245.205 67.628 244.388 68.637 244.388 cv
69.6467 244.388 70.4636 245.205 70.4636 246.214 cv
70.4636 247.224 69.6467 248.041 68.637 248.041 cv
67.628 248.041 66.8104 247.224 66.8104 246.214 cv
cp
1 1 1 rgb
f
60.2991 246.214 mo
60.2991 245.205 61.1167 244.388 62.1258 244.388 cv
63.1339 244.388 63.9524 245.205 63.9524 246.214 cv
63.9524 247.224 63.1339 248.041 62.1258 248.041 cv
61.1167 248.041 60.2991 247.224 60.2991 246.214 cv
cp
f
53.7871 246.214 mo
53.7871 245.205 54.6047 244.388 55.6137 244.388 cv
56.6234 244.388 57.4403 245.205 57.4403 246.214 cv
57.4403 247.224 56.6234 248.041 55.6137 248.041 cv
54.6047 248.041 53.7871 247.224 53.7871 246.214 cv
cp
f
318.853 390.356 mo
262.245 390.356 li
262.245 346.173 li
318.853 346.173 li
318.853 390.356 li
cp
.870588 .870588 .878431 rgb
f
264.047 388.556 mo
317.052 388.556 li
317.052 347.974 li
264.047 347.974 li
264.047 388.556 li
cp
320.654 392.157 mo
260.446 392.157 li
260.446 344.373 li
320.654 344.373 li
320.654 392.157 li
cp
.180392 .192157 .239216 rgb
f
267.176 390.318 mo
262.99 386.133 li
265.34 394.769 li
267.176 390.318 li
cp
1 1 1 rgb
f
258.767 390.356 mo
260.595 394.939 li
262.99 386.133 li
258.767 390.356 li
cp
.870588 .870588 .878431 rgb
f
260.62 384.499 mo
257.661 381.54 li
257.661 384.499 li
257.709 384.499 li
259.014 385.392 260.556 385.965 262.223 386.101 cv
260.62 384.499 li
cp
1 .792157 .701961 rgb
f
257.661 379.594 mo
257.661 381.54 li
260.62 384.499 li
262.223 386.101 li
262.475 386.121 262.731 386.133 262.99 386.133 cv
263.158 386.133 263.322 386.123 263.487 386.114 cv
265.251 386.022 266.889 385.444 268.262 384.504 cv
268.28 384.499 li
268.28 379.594 li
257.661 379.594 li
cp
.976471 .709804 .615686 rgb
f
267.971 364.923 mo
265.917 364.923 263.476 366.727 262.245 368.182 cv
262.99 383.644 li
268.43 383.595 272.899 376.896 273.536 371.229 cv
273.587 370.774 273.615 370.324 273.615 369.885 cv
273.615 367.554 li
273.05 366.08 269.53 364.923 267.971 364.923 cv
cp
f
271.397 359.621 mo
266.58 362.964 260.732 364.923 254.426 364.923 cv
253.696 364.923 252.973 364.888 252.256 364.834 cv
252.204 365.263 252.17 365.694 252.17 366.134 cv
252.17 369.885 li
252.17 370.324 252.2 370.774 252.251 371.229 cv
252.891 376.926 257.41 383.647 262.893 383.647 cv
262.926 383.647 262.958 383.646 262.99 383.644 cv
262.99 376.626 li
263.674 376.626 264.125 375.974 264.125 375.361 cv
264.125 368.436 li
264.125 368.436 264.27 368.253 264.521 367.985 cv
265.237 367.22 266.83 365.757 268.53 365.757 cv
272.048 365.757 273.615 367.554 273.615 367.554 cv
273.615 366.134 li
273.615 363.681 272.783 361.428 271.397 359.621 cv
cp
1 .792157 .701961 rgb
f
274.497 357.153 mo
271.961 353.523 267.754 351.147 262.99 351.147 cv
255.497 351.147 249.375 357.022 248.982 364.419 cv
248.969 364.668 248.96 364.921 248.96 365.176 cv
248.96 367.985 li
248.96 369.77 250.402 371.218 252.187 371.229 cv
252.251 371.229 li
252.2 370.774 252.17 370.324 252.17 369.885 cv
252.17 366.134 li
252.17 365.694 252.204 365.263 252.256 364.834 cv
252.973 364.888 253.696 364.923 254.426 364.923 cv
260.735 364.923 266.584 362.962 271.401 359.617 cv
271.4 359.619 271.398 359.62 271.397 359.621 cv
272.783 361.428 273.615 363.681 273.615 366.134 cv
273.615 367.554 li
273.615 369.885 li
273.615 370.324 273.587 370.774 273.536 371.229 cv
273.795 371.229 li
275.578 371.218 277.02 369.77 277.02 367.985 cv
277.02 365.176 li
277.02 362.19 276.085 359.427 274.497 357.153 cv
cp
.180392 .192157 .239216 rgb
f
257.709 384.499 mo
257.661 384.499 li
257.661 387.586 li
258.767 390.356 li
262.99 386.133 li
261.03 386.133 259.213 385.528 257.709 384.499 cv
cp
.972549 .972549 .976471 rgb
f
268.302 387.586 mo
268.28 387.586 li
268.28 384.499 li
268.272 384.499 li
266.768 385.528 264.951 386.133 262.99 386.133 cv
267.176 390.318 li
268.302 387.586 li
cp
.870588 .870588 .878431 rgb
f
274.027 384.499 mo
268.281 384.499 li
268.302 387.586 li
265.34 394.769 li
262.99 386.133 li
260.595 394.939 li
257.661 387.586 li
253.307 391.939 li
262.07 400.703 li
262.893 400.703 li
271.271 400.703 li
283.383 400.703 li
283.383 393.859 li
283.383 393.856 li
283.383 388.686 279.194 384.499 274.027 384.499 cv
cp
.180392 .192157 .239216 rgb
f
257.661 384.499 mo
254.574 384.499 li
257.661 387.586 li
257.661 384.499 li
cp
f
253.307 391.939 mo
257.661 387.586 li
254.574 384.499 li
251.926 384.499 li
251.922 384.499 li
246.752 384.499 242.564 388.686 242.564 393.856 cv
242.564 400.703 li
254.671 400.703 li
262.07 400.703 li
253.307 391.939 li
cp
.345098 .352941 .392157 rgb
f
265.395 388.538 mo
262.99 390.944 li
260.585 388.538 li
262.99 386.133 li
265.395 388.538 li
cp
f
309.644 385.245 mo
305.03 385.245 li
305.03 355.277 li
309.644 355.277 li
309.644 385.245 li
cp
.941176 .337255 .239216 rgb
f
300.417 385.245 mo
295.803 385.245 li
295.803 360.603 li
300.417 360.603 li
300.417 385.245 li
cp
.717647 .756863 .117647 rgb
f
291.19 385.245 mo
286.577 385.245 li
286.577 374.109 li
291.19 374.109 li
291.19 385.245 li
cp
.137255 .639216 .560784 rgb
f
396.744 183.962 mo
390.787 178.004 li
394.13 190.299 li
396.744 183.962 li
cp
1 1 1 rgb
f
384.773 184.017 mo
387.376 190.541 li
390.787 178.004 li
384.773 184.017 li
cp
.870588 .870588 .878431 rgb
f
383.268 175.677 mo
383.201 175.677 li
383.201 180.072 li
384.773 184.017 li
390.787 178.004 li
387.996 178.004 385.409 177.143 383.268 175.677 cv
cp
.972549 .972549 .976471 rgb
f
398.349 180.072 mo
398.318 180.072 li
398.318 175.677 li
398.304 175.677 li
396.165 177.143 393.577 178.004 390.787 178.004 cv
396.744 183.962 li
398.349 180.072 li
cp
.870588 .870588 .878431 rgb
f
406.498 175.677 mo
398.318 175.677 li
398.349 180.072 li
394.13 190.299 li
390.787 178.004 li
387.376 190.541 li
383.201 180.072 li
377.001 186.271 li
389.477 198.745 li
390.647 198.745 li
402.574 198.745 li
419.818 198.745 li
419.818 189.003 li
419.818 188.998 li
419.818 181.64 413.854 175.677 406.498 175.677 cv
cp
.180392 .192157 .239216 rgb
f
383.201 175.677 mo
378.804 175.677 li
383.201 180.072 li
383.201 175.677 li
cp
f
377.001 186.271 mo
383.201 180.072 li
378.804 175.677 li
375.034 175.677 li
375.026 175.677 li
367.669 175.677 361.705 181.64 361.705 188.998 cv
361.705 198.745 li
378.942 198.745 li
389.477 198.745 li
377.001 186.271 li
cp
.345098 .352941 .392157 rgb
f
394.211 181.429 mo
390.787 184.852 li
387.361 181.429 li
390.787 178.004 li
394.211 181.429 li
cp
f
390.87 169.747 mo
389.442 169.747 388.282 170.905 388.282 172.335 cv
388.282 173.765 389.442 174.923 390.87 174.924 cv
390.871 174.924 390.873 174.923 390.875 174.923 cv
390.875 169.747 li
390.873 169.747 390.871 169.747 390.87 169.747 cv
cp
.937255 .945098 .760784 rgb
f
393.46 172.335 mo
393.46 170.908 392.303 169.75 390.875 169.747 cv
390.875 174.923 li
392.303 174.921 393.46 173.764 393.46 172.335 cv
cp
.137255 .639216 .560784 rgb
f
390.87 134.477 mo
390.87 135.231 li
390.87 162.73 li
390.87 163.484 li
395.477 163.443 li
396.191 162.742 li
396.191 162.427 li
396.191 159.684 397.162 156.918 398.924 154.629 cv
401.267 152.399 402.556 149.398 402.556 146.165 cv
402.556 139.72 397.314 134.477 390.87 134.477 cv
cp
.705882 .254902 .180392 rgb
f
390.87 135.232 mo
390.87 134.477 li
384.426 134.477 379.183 139.72 379.183 146.165 cv
379.183 149.49 380.605 152.661 383.087 154.88 cv
384.7 157.079 385.548 159.68 385.548 162.409 cv
385.548 162.559 li
385.951 163.524 li
390.87 163.484 li
390.87 163.484 390.896 135.232 390.87 135.232 cv
cp
.941176 .337255 .239216 rgb
f
391.834 131.961 mo
391.834 122.374 li
391.834 121.239 389.908 121.191 389.909 122.374 cv
389.908 131.933 li
389.909 133.215 391.834 133.144 391.834 131.961 cv
cp
f
376.534 149.03 mo
366.948 149.03 li
365.811 149.03 365.765 150.953 366.948 150.953 cv
376.508 150.953 li
377.788 150.953 377.718 149.03 376.534 149.03 cv
cp
f
414.582 149.03 mo
404.995 149.03 li
403.861 149.03 403.814 150.953 404.995 150.953 cv
414.556 150.953 li
415.837 150.953 415.765 149.03 414.582 149.03 cv
cp
f
403.53 138.798 mo
410.309 132.019 li
411.11 131.217 409.783 129.824 408.948 130.66 cv
402.188 137.42 li
401.283 138.325 402.694 139.637 403.53 138.798 cv
cp
f
379.187 137.611 mo
372.408 130.833 li
371.605 130.029 370.212 131.357 371.048 132.193 cv
377.808 138.952 li
378.714 139.858 380.023 138.448 379.187 137.611 cv
cp
f
390.87 162.07 mo
388.007 149.215 li
388.823 148.681 li
390.862 150.054 li
392.998 148.673 li
393.749 149.147 li
390.87 162.07 li
cp
394.703 144.863 mo
394.096 147.586 li
392.989 146.886 li
390.877 148.249 li
388.834 146.876 li
387.656 147.644 li
387.037 144.863 li
386.758 143.678 385.236 144.069 385.568 145.19 cv
389.502 162.857 li
390.87 162.552 li
392.237 162.857 li
396.172 145.19 li
396.453 144.168 395.056 143.661 394.703 144.863 cv
cp
.937255 .945098 .760784 rgb
f
390.945 163.446 mo
390.945 161.94 li
385.548 161.94 li
385.548 172.305 li
390.945 172.305 li
390.945 170.799 li
390.87 170.799 li
390.87 163.446 li
390.945 163.446 li
cp
.137255 .639216 .560784 rgb
f
390.875 161.94 mo
390.875 172.305 li
396.191 172.305 li
396.191 161.94 li
390.875 161.94 li
cp
.180392 .192157 .239216 rgb
f
385.548 170.22 mo
390.87 170.22 li
390.87 168.135 li
385.548 168.135 li
385.548 170.22 li
cp
.937255 .945098 .760784 rgb
f
396.209 170.22 mo
396.209 168.135 li
390.87 168.135 li
390.87 170.22 li
396.209 170.22 li
cp
.137255 .639216 .560784 rgb
f
385.551 164.025 mo
385.551 166.113 li
390.87 166.113 li
390.87 164.025 li
385.551 164.025 li
cp
.937255 .945098 .760784 rgb
f
396.212 164.025 mo
390.87 164.025 li
390.87 166.113 li
396.212 166.113 li
396.212 164.025 li
cp
.137255 .639216 .560784 rgb
f
200.091 36.5069 mo
205.712 42.13 li
205.712 31.5418 li
205.712 30.7527 205.074 30.1131 204.285 30.1131 cv
152.806 30.1131 li
152.017 30.1131 151.377 30.7527 151.377 31.5418 cv
151.377 95.8658 li
151.377 96.6552 152.017 97.2945 152.806 97.2945 cv
163.657 97.2945 li
156.698 90.3346 li
200.091 36.5069 li
cp
.941176 .337255 .239216 rgb
f
205.712 95.8658 mo
205.712 42.13 li
200.091 36.5069 li
156.698 90.3346 li
163.657 97.2945 li
204.285 97.2945 li
205.074 97.2945 205.712 96.6552 205.712 95.8658 cv
cp
.705882 .254902 .180392 rgb
f
200.091 36.5069 mo
188.399 36.5069 li
156.698 36.5069 li
156.698 90.3346 li
200.091 90.3346 li
200.091 59.8905 li
200.091 48.1983 li
200.091 36.5069 li
cp
1 1 1 rgb
f
195.594 55.2009 mo
169.645 55.2009 li
169.645 52.0215 li
195.594 52.0215 li
195.594 55.2009 li
cp
.717647 .756863 .117647 rgb
f
195.602 61.5586 mo
169.645 61.5586 li
169.645 58.3797 li
195.602 58.3797 li
195.602 61.5586 li
cp
f
195.602 67.9159 mo
169.645 67.9159 li
169.645 64.7371 li
195.602 64.7371 li
195.602 67.9159 li
cp
f
195.602 74.2746 mo
169.645 74.2746 li
169.645 71.0957 li
195.602 71.0957 li
195.602 74.2746 li
cp
f
195.594 48.8421 mo
169.645 48.8421 li
169.645 45.6642 li
195.594 45.6642 li
195.594 48.8421 li
cp
f
193.158 39.0824 mo
163.933 39.0824 li
163.933 30.1131 li
193.158 30.1131 li
193.158 39.0824 li
cp
.345098 .352941 .392157 rgb
f
178.546 22.8521 mo
174.535 22.8521 171.284 26.1029 171.284 30.1131 cv
171.284 34.1232 174.535 37.3739 178.546 37.3739 cv
182.554 37.3739 185.806 34.1232 185.806 30.1131 cv
185.806 26.1029 182.554 22.8521 178.546 22.8521 cv
cp
.870588 .870588 .878431 rgb
f
180.186 30.1131 mo
180.186 31.0195 179.451 31.7528 178.546 31.7528 cv
177.639 31.7528 176.906 31.0195 176.906 30.1131 cv
176.906 29.208 177.639 28.4733 178.546 28.4733 cv
179.451 28.4733 180.186 29.208 180.186 30.1131 cv
cp
.180392 .192157 .239216 rgb
f
167.616 48.7197 mo
166.149 47.253 li
162.254 51.1494 li
160.059 48.9549 li
158.591 50.4221 li
162.25 54.0801 li
162.254 54.0774 li
162.257 54.0801 li
167.616 48.7197 li
cp
.941176 .337255 .239216 rgb
f
167.616 60.6267 mo
166.149 59.1604 li
162.254 63.0564 li
160.059 60.8619 li
158.591 62.3281 li
162.25 65.9867 li
162.254 65.9839 li
162.257 65.9867 li
167.616 60.6267 li
cp
f
194.13 80.001 mo
193.638 80.001 193.204 80.2877 192.936 80.7284 cv
192.533 79.7338 191.558 79.0307 190.421 79.0307 cv
189.522 79.0307 188.724 79.4722 188.23 80.1467 cv
187.638 78.955 186.41 78.1344 184.993 78.1344 cv
183.002 78.1344 181.382 79.7538 181.382 81.7438 cv
182.554 81.7438 li
182.554 80.4 183.65 79.3071 184.993 79.3071 cv
186.336 79.3071 187.431 80.4 187.431 81.7438 cv
187.708 81.7438 li
188.589 81.7438 li
188.603 81.7438 li
188.603 81.6849 188.601 81.6264 188.6 81.568 cv
188.687 80.6407 189.471 79.9124 190.421 79.9124 cv
191.431 79.9124 192.253 80.7339 192.253 81.7438 cv
192.659 81.7438 li
193.134 81.7438 li
193.136 81.7438 li
193.136 81.0948 193.581 80.5679 194.13 80.5679 cv
194.677 80.5679 195.122 81.0948 195.122 81.7438 cv
195.602 81.7438 li
195.602 80.7836 194.941 80.001 194.13 80.001 cv
cp
f
172.182 79.3715 mo
174.555 81.7438 li
172.162 81.0549 li
168.538 77.4293 li
169.533 76.4325 li
172.328 79.2278 li
172.182 79.3715 li
cp
.937255 .945098 .760784 rgb
f
174.845 81.4451 mo
172.478 79.0775 li
172.328 79.2278 li
169.533 76.4325 li
170.53 75.4379 li
174.154 79.0627 li
174.845 81.4451 li
cp
.870588 .870588 .878431 rgb
f
172.873 79.4722 mo
174.845 81.4451 li
174.845 81.7438 li
174.555 81.7438 li
172.579 79.7668 li
172.34 79.8822 172.044 79.8424 171.847 79.6439 cv
171.597 79.3948 171.597 78.9908 171.847 78.7407 cv
172.096 78.4921 172.501 78.4912 172.75 78.7407 cv
172.949 78.9388 172.989 79.2333 172.873 79.4722 cv
cp
.137255 .639216 .560784 rgb
f
151.876 58.7764 mo
142.538 49.4378 li
144.521 47.4552 li
145.315 48.2493 li
145.321 48.2447 li
146.007 48.9312 li
153.863 56.7887 li
151.876 58.7764 li
cp
f
149.887 60.7654 mo
142.029 52.9079 li
141.343 52.2214 li
140.548 51.4282 li
142.538 49.4378 li
151.876 58.7764 li
149.887 60.7654 li
cp
.717647 .756863 .117647 rgb
f
167.9 78.0681 mo
151.965 62.1352 li
153.6 60.4996 li
169.533 76.4325 li
167.9 78.0681 li
cp
f
171.121 74.8456 mo
169.533 76.4325 li
153.6 60.4996 li
155.188 58.9127 li
171.121 74.8456 li
cp
.137255 .639216 .560784 rgb
f
143.073 48.9029 mo
150.979 56.81 li
151.275 57.1055 151.275 57.5842 150.979 57.8801 cv
150.684 58.1746 150.205 58.1746 149.911 57.8801 cv
142.003 49.9726 li
140.548 51.4282 li
139.759 50.6378 139.759 49.357 140.548 48.5666 cv
141.107 48.0086 li
141.661 47.4543 li
142.451 46.6647 143.732 46.6647 144.521 47.4552 cv
143.073 48.9029 li
cp
.870588 .870588 .878431 rgb
f
164.707 68.4307 mo
163.118 70.0181 li
162.429 69.3279 li
164.016 67.741 li
164.707 68.4307 li
cp
f
161.485 71.6532 mo
160.794 70.9635 li
162.429 69.3279 li
163.118 70.0181 li
161.485 71.6532 li
cp
.937255 .945098 .760784 rgb
f
155.588 58.5124 mo
153.6 60.4996 li
151.876 58.7764 li
153.863 56.7887 li
155.588 58.5124 li
cp
.870588 .870588 .878431 rgb
f
151.61 62.4905 mo
149.887 60.7654 li
151.876 58.7764 li
153.6 60.4996 li
151.61 62.4905 li
cp
.937255 .945098 .760784 rgb
f
422.324 256.784 mo
422.068 251.641 420.316 246.892 417.496 242.961 cv
416.832 242.035 416.107 241.155 415.33 240.325 cv
415.016 239.99 414.689 239.666 414.357 239.348 cv
410.861 235.988 406.429 233.595 401.488 232.603 cv
400.772 232.459 400.047 232.347 399.311 232.264 cv
398.338 232.152 397.351 232.094 396.346 232.094 cv
394.698 232.094 393.082 232.25 391.517 232.545 cv
389.488 232.924 387.544 233.539 385.712 234.363 cv
376.752 238.381 370.482 247.323 370.34 257.743 cv
370.338 257.863 370.335 257.984 370.335 258.105 cv
370.335 261.779 371.101 265.276 372.475 268.445 cv
376.473 277.665 385.656 284.116 396.346 284.116 cv
396.698 284.116 397.046 284.106 397.392 284.093 cv
398.736 284.039 400.055 283.885 401.338 283.636 cv
413.315 281.307 422.357 270.762 422.357 258.105 cv
422.357 257.661 422.347 257.223 422.324 256.784 cv
cp
.239216 .482353 .823529 rgb
f
422.349 256.784 mo
421.501 257.405 420.217 257.908 419.511 258.105 cv
418.972 258.257 417.78 258.333 417.266 258.105 cv
416.735 257.869 416.139 256.973 415.65 256.346 cv
414.456 260.856 412.081 264.89 408.875 268.089 cv
408.836 269.289 408.803 270.954 408.41 271.767 cv
407.988 272.632 406.036 273.583 405.664 274.474 cv
405.251 275.461 405.342 277.556 404.838 278.502 cv
404.238 279.631 402.023 280.487 401.423 281.616 cv
401.223 281.992 401.296 283.021 401.362 283.636 cv
413.34 281.307 422.381 270.762 422.381 258.105 cv
422.381 257.661 422.369 257.223 422.349 256.784 cv
cp
.878431 .878431 .662745 rgb
f
416.36 246.83 mo
416.793 246.624 417.193 246.357 417.266 246.067 cv
417.371 245.654 416.683 244.861 416.768 244.444 cv
416.841 244.076 417.145 243.46 417.518 242.961 cv
416.856 242.035 416.13 241.155 415.354 240.325 cv
415.197 240.517 415.069 240.701 414.983 240.867 cv
415.665 242.761 416.133 244.757 416.36 246.83 cv
cp
f
397.058 281.616 mo
397.164 280.832 398.352 279.548 398.429 278.759 cv
398.513 277.891 398.2 275.969 397.555 275.383 cv
397.332 275.18 397.011 275.048 396.631 274.958 cv
394.666 275.433 392.615 275.686 390.504 275.686 cv
383.516 275.686 377.172 272.93 372.498 268.445 cv
376.497 277.665 385.68 284.116 396.37 284.116 cv
396.72 284.116 397.069 284.106 397.417 284.093 cv
397.216 283.257 396.987 282.136 397.058 281.616 cv
cp
f
401.423 281.616 mo
402.023 280.487 404.238 279.631 404.838 278.502 cv
405.342 277.556 405.251 275.461 405.664 274.474 cv
406.036 273.583 407.988 272.632 408.41 271.767 cv
408.803 270.954 408.836 269.289 408.875 268.089 cv
405.554 271.402 401.342 273.821 396.631 274.958 cv
397.011 275.048 397.332 275.18 397.555 275.383 cv
398.2 275.969 398.513 277.891 398.429 278.759 cv
398.352 279.548 397.164 280.832 397.058 281.616 cv
396.987 282.136 397.216 283.257 397.417 284.093 cv
398.76 284.039 400.079 283.885 401.362 283.636 cv
401.296 283.021 401.223 281.992 401.423 281.616 cv
cp
.137255 .639216 .560784 rgb
f
415.354 240.325 mo
415.038 239.99 414.712 239.666 414.381 239.348 cv
414.598 239.846 414.798 240.352 414.983 240.867 cv
415.069 240.701 415.197 240.517 415.354 240.325 cv
cp
f
417.266 246.067 mo
417.193 246.357 416.793 246.624 416.36 246.83 cv
416.46 247.766 416.515 248.713 416.515 249.674 cv
416.515 251.982 416.213 254.216 415.65 256.346 cv
416.139 256.973 416.735 257.869 417.266 258.105 cv
417.78 258.333 418.972 258.257 419.511 258.105 cv
420.217 257.908 421.501 257.405 422.349 256.784 cv
422.092 251.641 420.339 246.892 417.518 242.961 cv
417.145 243.46 416.841 244.076 416.768 244.444 cv
416.683 244.861 417.371 245.654 417.266 246.067 cv
cp
f
406.164 244.444 mo
405.927 244.773 404.899 244.636 404.542 244.444 cv
404.096 244.207 403.478 243.264 403.419 242.761 cv
403.328 241.985 404.016 239.862 404.79 239.954 cv
405.077 239.988 405.057 241.64 405.135 241.919 cv
405.371 242.773 406.681 243.724 406.164 244.444 cv
cp
393.189 258.761 mo
392.908 259.737 389.866 259.747 389.134 259.041 cv
388.874 258.789 388.871 257.836 389.134 257.592 cv
389.636 257.126 391.222 257.557 391.863 257.793 cv
392.25 257.935 393.303 258.365 393.189 258.761 cv
cp
384.956 258.761 mo
384.102 258.685 382.301 258.054 381.837 257.331 cv
381.713 257.14 381.64 256.536 381.837 256.421 cv
382.501 256.037 384.009 257.217 384.768 257.331 cv
385.186 257.397 386.046 257.224 386.454 257.331 cv
386.801 257.424 387.747 257.69 387.701 258.046 cv
387.607 258.749 385.663 258.823 384.956 258.761 cv
cp
414.272 255.049 mo
413.941 254.635 413.314 253.707 413.274 253.177 cv
413.241 252.714 413.878 251.893 413.897 251.431 cv
413.925 250.818 413.254 249.673 413.274 249.06 cv
413.289 248.568 413.497 247.477 413.897 247.19 cv
414.202 246.971 415.034 247.288 415.395 247.19 cv
415.63 247.124 416.007 246.997 416.36 246.83 cv
416.133 244.757 415.665 242.761 414.983 240.867 cv
414.945 240.941 414.915 241.011 414.896 241.077 cv
414.716 241.718 415.778 243.151 415.395 243.696 cv
414.942 244.343 412.789 243.595 412.276 244.194 cv
411.972 244.551 412.606 245.736 412.276 246.067 cv
412.034 246.309 411.227 246.182 410.903 246.067 cv
410.298 245.85 409.386 244.874 408.909 244.444 cv
408.351 243.942 407.163 242.973 406.787 242.324 cv
406.43 241.709 405.72 240.215 406.037 239.579 cv
406.384 238.891 408.697 239.197 408.909 238.457 cv
409.078 237.856 407.992 236.686 407.41 236.46 cv
406.641 236.163 404.945 237.362 404.167 237.085 cv
403.709 236.92 403.181 236 402.918 235.587 cv
402.544 234.997 401.859 233.421 401.512 232.603 cv
400.797 232.459 400.069 232.347 399.335 232.264 cv
399.411 233.353 399.439 234.697 399.177 235.275 cv
398.681 236.373 396.75 238.637 395.56 238.457 cv
394.438 238.286 393.844 235.514 393.189 234.589 cv
392.871 234.139 392.034 233.131 391.541 232.545 cv
389.513 232.924 387.567 233.539 385.734 234.363 cv
386.053 234.717 386.303 235.071 386.328 235.338 cv
386.389 235.95 384.742 236.945 385.08 237.458 cv
385.356 237.878 386.688 237.529 387.077 237.209 cv
387.458 236.897 387.274 235.585 387.701 235.338 cv
388.8 234.699 391.834 235.395 392.69 236.336 cv
393.302 237.008 393.438 239.125 393.064 239.954 cv
392.735 240.686 391.248 241.793 390.443 241.826 cv
389.9 241.847 389.118 240.681 388.573 240.701 cv
387.823 240.732 386.697 242.045 386.328 242.699 cv
386.077 243.139 386.077 244.202 385.953 244.693 cv
385.727 245.583 385.163 247.333 384.83 248.187 cv
384.534 248.954 383.596 250.369 383.459 251.181 cv
383.343 251.861 384.102 253.361 383.709 253.926 cv
383.505 254.218 382.646 254.475 382.337 254.301 cv
381.632 253.901 382.108 251.672 381.463 251.181 cv
381.016 250.843 379.763 251.049 379.217 251.181 cv
378.023 251.469 375.597 252.452 374.852 253.427 cv
374.339 254.095 374.256 256.199 374.852 256.795 cv
375.137 257.082 376.067 256.795 376.473 256.795 cv
377.189 256.795 378.96 256.189 379.342 256.795 cv
379.802 257.527 377.765 259.053 377.845 259.914 cv
377.894 260.44 378.567 261.574 379.092 261.618 cv
379.7 261.669 380.274 260.144 380.839 259.914 cv
381.562 259.621 383.405 259.363 383.958 259.914 cv
384.259 260.214 383.921 261.193 383.958 261.618 cv
384.02 262.34 383.901 264.008 384.456 264.474 cv
384.982 264.914 386.532 264.625 387.202 264.474 cv
388.01 264.291 389.383 263.213 390.196 263.045 cv
391.02 262.876 392.726 263.139 393.562 263.045 cv
394.421 262.949 396.069 262.296 396.932 262.283 cv
397.918 262.27 399.853 262.768 400.8 263.045 cv
401.732 263.32 403.444 264.489 404.418 264.474 cv
405.35 264.461 407.169 263.295 408.12 263.992 cv
408.985 264.623 408.969 266.476 408.909 267.33 cv
408.893 267.545 408.883 267.804 408.875 268.089 cv
412.081 264.89 414.456 260.856 415.65 256.346 cv
415.513 256.171 415.386 256.015 415.27 255.903 cv
415.035 255.674 414.478 255.304 414.272 255.049 cv
cp
.937255 .945098 .760784 rgb
f
396.631 274.958 mo
395.182 274.618 392.878 274.92 391.817 274.474 cv
390.167 273.778 386.817 271.818 386.079 270.188 cv
385.783 269.537 385.775 267.978 386.079 267.33 cv
386.338 266.781 388.156 266.349 387.95 265.778 cv
387.665 264.986 385.394 265.996 384.582 265.778 cv
383.955 265.609 382.855 264.864 382.337 264.474 cv
381.922 264.164 381.337 263.181 380.839 263.045 cv
380.19 262.869 378.887 263.737 378.219 263.657 cv
376.585 263.456 373.571 261.773 372.355 260.662 cv
371.807 260.16 371.001 258.859 370.364 257.743 cv
370.362 257.863 370.36 257.984 370.36 258.105 cv
370.36 261.779 371.122 265.276 372.498 268.445 cv
377.172 272.93 383.516 275.686 390.504 275.686 cv
392.615 275.686 394.666 275.433 396.631 274.958 cv
cp
f
408.12 263.992 mo
407.169 263.295 405.35 264.461 404.418 264.474 cv
403.444 264.489 401.732 263.32 400.8 263.045 cv
399.853 262.768 397.918 262.27 396.932 262.283 cv
396.069 262.296 394.421 262.949 393.562 263.045 cv
392.726 263.139 391.02 262.876 390.196 263.045 cv
389.383 263.213 388.01 264.291 387.202 264.474 cv
386.532 264.625 384.982 264.914 384.456 264.474 cv
383.901 264.008 384.02 262.34 383.958 261.618 cv
383.921 261.193 384.259 260.214 383.958 259.914 cv
383.405 259.363 381.562 259.621 380.839 259.914 cv
380.274 260.144 379.7 261.669 379.092 261.618 cv
378.567 261.574 377.894 260.44 377.845 259.914 cv
377.765 259.053 379.802 257.527 379.342 256.795 cv
378.96 256.189 377.189 256.795 376.473 256.795 cv
376.067 256.795 375.137 257.082 374.852 256.795 cv
374.256 256.199 374.339 254.095 374.852 253.427 cv
375.597 252.452 378.023 251.469 379.217 251.181 cv
379.763 251.049 381.016 250.843 381.463 251.181 cv
382.108 251.672 381.632 253.901 382.337 254.301 cv
382.646 254.475 383.505 254.218 383.709 253.926 cv
384.102 253.361 383.343 251.861 383.459 251.181 cv
383.596 250.369 384.534 248.954 384.83 248.187 cv
385.163 247.333 385.727 245.583 385.953 244.693 cv
386.077 244.202 386.077 243.139 386.328 242.699 cv
386.697 242.045 387.823 240.732 388.573 240.701 cv
389.118 240.681 389.9 241.847 390.443 241.826 cv
391.248 241.793 392.735 240.686 393.064 239.954 cv
393.438 239.125 393.302 237.008 392.69 236.336 cv
391.834 235.395 388.8 234.699 387.701 235.338 cv
387.274 235.585 387.458 236.897 387.077 237.209 cv
386.688 237.529 385.356 237.878 385.08 237.458 cv
384.742 236.945 386.389 235.95 386.328 235.338 cv
386.303 235.071 386.053 234.717 385.734 234.363 cv
376.775 238.381 370.506 247.323 370.364 257.743 cv
371.001 258.859 371.807 260.16 372.355 260.662 cv
373.571 261.773 376.585 263.456 378.219 263.657 cv
378.887 263.737 380.19 262.869 380.839 263.045 cv
381.337 263.181 381.922 264.164 382.337 264.474 cv
382.855 264.864 383.955 265.609 384.582 265.778 cv
385.394 265.996 387.665 264.986 387.95 265.778 cv
388.156 266.349 386.338 266.781 386.079 267.33 cv
385.775 267.978 385.783 269.537 386.079 270.188 cv
386.817 271.818 390.167 273.778 391.817 274.474 cv
392.878 274.92 395.182 274.618 396.631 274.958 cv
401.342 273.821 405.554 271.402 408.875 268.089 cv
408.883 267.804 408.893 267.545 408.909 267.33 cv
408.969 266.476 408.985 264.623 408.12 263.992 cv
cp
.717647 .756863 .117647 rgb
f
386.454 257.331 mo
386.046 257.224 385.186 257.397 384.768 257.331 cv
384.009 257.217 382.501 256.037 381.837 256.421 cv
381.64 256.536 381.713 257.14 381.837 257.331 cv
382.301 258.054 384.102 258.685 384.956 258.761 cv
385.663 258.823 387.607 258.749 387.701 258.046 cv
387.747 257.69 386.801 257.424 386.454 257.331 cv
cp
f
391.863 257.793 mo
391.222 257.557 389.636 257.126 389.134 257.592 cv
388.871 257.836 388.874 258.789 389.134 259.041 cv
389.866 259.747 392.908 259.737 393.189 258.761 cv
393.303 258.365 392.25 257.935 391.863 257.793 cv
cp
f
395.56 238.457 mo
396.75 238.637 398.681 236.373 399.177 235.275 cv
399.439 234.697 399.411 233.353 399.335 232.264 cv
398.362 232.152 397.373 232.094 396.37 232.094 cv
394.721 232.094 393.106 232.25 391.541 232.545 cv
392.034 233.131 392.871 234.139 393.189 234.589 cv
393.844 235.514 394.438 238.286 395.56 238.457 cv
cp
f
402.918 235.587 mo
403.181 236 403.709 236.92 404.167 237.085 cv
404.945 237.362 406.641 236.163 407.41 236.46 cv
407.992 236.686 409.078 237.856 408.909 238.457 cv
408.697 239.197 406.384 238.891 406.037 239.579 cv
405.72 240.215 406.43 241.709 406.787 242.324 cv
407.163 242.973 408.351 243.942 408.909 244.444 cv
409.386 244.874 410.298 245.85 410.903 246.067 cv
411.227 246.182 412.034 246.309 412.276 246.067 cv
412.606 245.736 411.972 244.551 412.276 244.194 cv
412.789 243.595 414.942 244.343 415.395 243.696 cv
415.778 243.151 414.716 241.718 414.896 241.077 cv
414.915 241.011 414.945 240.941 414.983 240.867 cv
414.798 240.352 414.598 239.846 414.381 239.348 cv
410.884 235.988 406.454 233.595 401.512 232.603 cv
401.859 233.421 402.544 234.997 402.918 235.587 cv
cp
f
404.79 239.954 mo
404.016 239.862 403.328 241.985 403.419 242.761 cv
403.478 243.264 404.096 244.207 404.542 244.444 cv
404.899 244.636 405.927 244.773 406.164 244.444 cv
406.681 243.724 405.371 242.773 405.135 241.919 cv
405.057 241.64 405.077 239.988 404.79 239.954 cv
cp
f
416.36 246.83 mo
416.007 246.997 415.63 247.124 415.395 247.19 cv
415.034 247.288 414.202 246.971 413.897 247.19 cv
413.497 247.477 413.289 248.568 413.274 249.06 cv
413.254 249.673 413.925 250.818 413.897 251.431 cv
413.878 251.893 413.241 252.714 413.274 253.177 cv
413.314 253.707 413.941 254.635 414.272 255.049 cv
414.478 255.304 415.035 255.674 415.27 255.903 cv
415.386 256.015 415.513 256.171 415.65 256.346 cv
416.213 254.216 416.515 251.982 416.515 249.674 cv
416.515 248.713 416.46 247.766 416.36 246.83 cv
cp
f
385.41 287.302 mo
380.944 282.835 li
383.452 292.051 li
385.41 287.302 li
cp
1 1 1 rgb
f
376.435 287.343 mo
378.386 292.233 li
380.944 282.835 li
376.435 287.343 li
cp
.870588 .870588 .878431 rgb
f
378.412 281.089 mo
375.256 277.933 li
375.256 281.089 li
375.307 281.089 li
376.698 282.044 378.345 282.654 380.123 282.8 cv
378.412 281.089 li
cp
1 .792157 .701961 rgb
f
375.256 275.855 mo
375.256 277.933 li
378.412 281.089 li
380.123 282.8 li
380.394 282.821 380.668 282.835 380.944 282.835 cv
381.121 282.835 381.297 282.823 381.473 282.816 cv
383.357 282.714 385.104 282.098 386.57 281.095 cv
386.59 281.089 li
386.59 275.855 li
375.256 275.855 li
cp
.976471 .709804 .615686 rgb
f
386.259 260.197 mo
384.066 260.197 381.462 262.123 380.148 263.674 cv
380.944 280.177 li
386.749 280.126 391.519 272.975 392.198 266.927 cv
392.252 266.442 392.284 265.961 392.284 265.492 cv
392.284 263.004 li
391.68 261.432 387.922 260.197 386.259 260.197 cv
cp
f
389.916 254.538 mo
384.776 258.105 378.533 260.197 371.801 260.197 cv
371.022 260.197 370.252 260.16 369.487 260.103 cv
369.433 260.559 369.396 261.02 369.396 261.49 cv
369.396 265.492 li
369.396 265.961 369.426 266.442 369.48 266.927 cv
370.163 273.007 374.987 280.179 380.839 280.179 cv
380.875 280.179 380.908 280.179 380.944 280.177 cv
380.944 272.687 li
381.672 272.687 382.154 271.991 382.154 271.338 cv
382.154 263.948 li
382.154 263.948 382.309 263.751 382.578 263.465 cv
383.34 262.649 385.04 261.087 386.856 261.087 cv
390.612 261.087 392.284 263.004 392.284 263.004 cv
392.284 261.49 li
392.284 258.87 391.395 256.464 389.916 254.538 cv
cp
1 .792157 .701961 rgb
f
393.224 251.903 mo
390.517 248.029 386.028 245.492 380.944 245.492 cv
372.945 245.492 366.412 251.764 365.993 259.66 cv
365.977 259.925 365.97 260.194 365.97 260.466 cv
365.97 263.465 li
365.97 265.371 367.509 266.914 369.411 266.927 cv
369.48 266.927 li
369.426 266.442 369.396 265.961 369.396 265.492 cv
369.396 261.49 li
369.396 261.02 369.433 260.559 369.487 260.103 cv
370.252 260.16 371.022 260.197 371.801 260.197 cv
378.536 260.197 384.778 258.103 389.921 254.534 cv
389.918 254.536 389.918 254.536 389.916 254.538 cv
391.395 256.464 392.284 258.87 392.284 261.49 cv
392.284 263.004 li
392.284 265.492 li
392.284 265.961 392.252 266.442 392.198 266.927 cv
392.474 266.927 li
394.379 266.914 395.917 265.371 395.917 263.465 cv
395.917 260.466 li
395.917 257.281 394.919 254.331 393.224 251.903 cv
cp
.180392 .192157 .239216 rgb
f
375.307 281.089 mo
375.256 281.089 li
375.256 284.384 li
376.435 287.343 li
380.944 282.835 li
378.851 282.835 376.911 282.19 375.307 281.089 cv
cp
.972549 .972549 .976471 rgb
f
386.613 284.384 mo
386.59 284.384 li
386.59 281.089 li
386.58 281.089 li
384.976 282.19 383.035 282.835 380.944 282.835 cv
385.41 287.302 li
386.613 284.384 li
cp
.870588 .870588 .878431 rgb
f
392.722 281.089 mo
386.59 281.089 li
386.613 284.384 li
383.452 292.051 li
380.944 282.835 li
378.386 292.233 li
375.256 284.384 li
370.609 289.032 li
379.963 298.385 li
380.839 298.385 li
389.78 298.385 li
402.71 298.385 li
402.71 291.081 li
402.71 291.075 li
402.71 285.56 398.237 281.089 392.722 281.089 cv
cp
.180392 .192157 .239216 rgb
f
375.256 281.089 mo
371.961 281.089 li
375.256 284.384 li
375.256 281.089 li
cp
f
370.609 289.032 mo
375.256 284.384 li
371.961 281.089 li
369.133 281.089 li
369.129 281.089 li
363.613 281.089 359.141 285.56 359.141 291.075 cv
359.141 298.385 li
372.065 298.385 li
379.963 298.385 li
370.609 289.032 li
cp
.345098 .352941 .392157 rgb
f
383.511 285.401 mo
380.944 287.968 li
378.376 285.401 li
380.944 282.835 li
383.511 285.401 li
cp
f
402.147 261.154 mo
401.324 261.154 400.658 260.487 400.658 259.666 cv
400.658 258.844 401.324 258.179 402.147 258.179 cv
402.159 258.179 402.17 258.179 402.182 258.18 cv
402.182 256.701 li
402.179 256.701 402.177 256.7 402.177 256.7 cv
400.519 256.7 399.175 258.043 399.175 259.703 cv
399.175 261.36 402.177 266.085 402.177 266.085 cv
402.177 266.085 402.179 266.081 402.182 266.079 cv
402.182 261.152 li
402.17 261.153 402.159 261.154 402.147 261.154 cv
cp
.941176 .337255 .239216 rgb
f
402.182 256.701 mo
402.182 258.18 li
402.988 258.197 403.637 258.856 403.637 259.666 cv
403.637 260.477 402.988 261.136 402.182 261.152 cv
402.182 266.079 li
402.258 265.957 405.177 261.338 405.177 259.703 cv
405.177 258.046 403.836 256.702 402.182 256.701 cv
cp
.705882 .254902 .180392 rgb
f
417.489 242.059 mo
416.667 242.059 416 241.393 416 240.57 cv
416 239.749 416.667 239.081 417.489 239.081 cv
417.5 239.081 417.512 239.082 417.522 239.083 cv
417.522 237.605 li
417.521 237.605 417.519 237.604 417.519 237.604 cv
415.86 237.604 414.517 238.948 414.517 240.606 cv
414.517 242.264 417.518 246.989 417.518 246.989 cv
417.518 246.989 417.521 246.985 417.522 246.983 cv
417.522 242.057 li
417.512 242.057 417.5 242.059 417.489 242.059 cv
cp
.941176 .337255 .239216 rgb
f
417.522 237.605 mo
417.522 239.083 li
418.329 239.102 418.977 239.759 418.977 240.57 cv
418.977 241.38 418.329 242.039 417.522 242.057 cv
417.522 246.983 li
417.6 246.86 420.519 242.241 420.519 240.606 cv
420.519 238.95 419.178 237.607 417.522 237.605 cv
cp
.705882 .254902 .180392 rgb
f
381.686 236.548 mo
380.863 236.548 380.197 235.882 380.197 235.059 cv
380.197 234.237 380.863 233.571 381.686 233.571 cv
381.697 233.571 381.708 233.573 381.72 233.573 cv
381.72 232.094 li
381.72 232.094 381.717 232.094 381.716 232.094 cv
380.058 232.094 378.715 233.438 378.715 235.096 cv
378.715 236.753 381.716 241.48 381.716 241.48 cv
381.716 241.48 381.719 241.475 381.72 241.473 cv
381.72 236.545 li
381.708 236.546 381.697 236.548 381.686 236.548 cv
cp
.941176 .337255 .239216 rgb
f
381.72 232.094 mo
381.72 233.573 li
382.526 233.591 383.174 234.249 383.174 235.059 cv
383.174 235.87 382.526 236.528 381.72 236.545 cv
381.72 241.473 li
381.797 241.35 384.717 236.731 384.717 235.096 cv
384.717 233.44 383.375 232.096 381.72 232.094 cv
cp
.705882 .254902 .180392 rgb
f
371.364 67.318 mo
371.364 60.8711 376.608 55.6262 383.055 55.6262 cv
383.055 48.2447 li
372.538 48.2447 363.983 56.8007 363.983 67.318 cv
363.983 77.8348 372.538 86.3903 383.055 86.3903 cv
383.055 79.0093 li
376.608 79.0093 371.364 73.7643 371.364 67.318 cv
cp
.941176 .337255 .239216 rgb
f
389.599 67.318 mo
389.599 63.71 386.663 60.7755 383.055 60.7755 cv
383.055 73.8599 li
386.663 73.8599 389.599 70.925 389.599 67.318 cv
cp
.705882 .254902 .180392 rgb
f
376.513 67.318 mo
376.513 70.925 379.448 73.8599 383.055 73.8599 cv
383.055 60.7755 li
379.448 60.7755 376.513 63.71 376.513 67.318 cv
cp
.941176 .337255 .239216 rgb
f
402.128 67.318 mo
402.128 56.8007 393.573 48.2447 383.055 48.2447 cv
383.055 55.6262 li
389.502 55.6262 394.747 60.8711 394.747 67.318 cv
394.747 73.7643 389.502 79.0093 383.055 79.0093 cv
383.055 86.3903 li
393.573 86.3903 402.128 77.8348 402.128 67.318 cv
cp
.705882 .254902 .180392 rgb
f
358.833 67.318 mo
358.833 53.9619 369.699 43.0958 383.055 43.0958 cv
383.055 36.9787 li
366.3 36.9787 352.716 50.5622 352.716 67.318 cv
352.716 84.0733 366.3 97.6567 383.055 97.6567 cv
383.055 91.5397 li
369.699 91.5397 358.833 80.6737 358.833 67.318 cv
cp
.941176 .337255 .239216 rgb
f
383.055 36.9787 mo
383.055 43.0958 li
396.412 43.0958 407.278 53.9619 407.278 67.318 cv
407.278 80.6737 396.412 91.5397 383.055 91.5397 cv
383.055 97.6567 li
399.811 97.6567 413.394 84.0733 413.394 67.318 cv
413.394 50.5622 399.811 36.9787 383.055 36.9787 cv
cp
.705882 .254902 .180392 rgb
f
402.128 67.318 mo
402.128 77.8348 393.573 86.3903 383.055 86.3903 cv
383.055 91.5397 li
396.412 91.5397 407.278 80.6737 407.278 67.318 cv
407.278 53.9619 396.412 43.0958 383.055 43.0958 cv
383.055 48.2447 li
393.573 48.2447 402.128 56.8007 402.128 67.318 cv
cp
.870588 .870588 .878431 rgb
f
358.833 67.318 mo
358.833 80.6737 369.699 91.5397 383.055 91.5397 cv
383.055 86.3903 li
372.538 86.3903 363.983 77.8348 363.983 67.318 cv
363.983 56.8007 372.538 48.2447 383.055 48.2447 cv
383.055 43.0958 li
369.699 43.0958 358.833 53.9619 358.833 67.318 cv
cp
1 1 1 rgb
f
389.599 67.318 mo
389.599 70.925 386.663 73.8599 383.055 73.8599 cv
383.055 79.0093 li
389.502 79.0093 394.747 73.7643 394.747 67.318 cv
394.747 60.8711 389.502 55.6262 383.055 55.6262 cv
383.055 60.7755 li
386.663 60.7755 389.599 63.71 389.599 67.318 cv
cp
.870588 .870588 .878431 rgb
f
371.364 67.318 mo
371.364 73.7643 376.608 79.0093 383.055 79.0093 cv
383.055 73.8599 li
379.448 73.8599 376.513 70.925 376.513 67.318 cv
376.513 63.71 379.448 60.7755 383.055 60.7755 cv
383.055 55.6262 li
376.608 55.6262 371.364 60.8711 371.364 67.318 cv
cp
1 1 1 rgb
f
413.211 68.8626 mo
386.327 68.8626 li
386.327 65.7728 li
413.211 65.7728 li
413.211 68.8626 li
cp
.180392 .192157 .239216 rgb
f
420.216 67.2734 mo
428.806 62.3143 li
416.995 62.3143 li
416.995 62.3151 li
408.405 67.2734 li
408.48 67.318 li
420.291 67.318 li
420.216 67.2734 li
cp
.345098 .352941 .392157 rgb
f
420.291 67.318 mo
408.48 67.318 li
416.879 72.1663 li
416.995 72.3213 li
428.806 72.3213 li
428.69 72.1673 li
420.291 67.318 li
cp
.180392 .192157 .239216 rgb
f
391.867 62.2307 mo
383.055 67.318 li
391.867 67.318 li
391.867 62.2307 li
cp
.345098 .352941 .392157 rgb
f
383.055 67.318 mo
391.867 72.4048 li
391.867 67.318 li
383.055 67.318 li
cp
.180392 .192157 .239216 rgb
f
308.902 150.737 mo
306.856 150.737 305.196 149.08 305.196 147.034 cv
305.196 144.988 306.856 143.33 308.902 143.33 cv
310.946 143.33 312.604 144.988 312.604 147.034 cv
312.604 149.08 310.946 150.737 308.902 150.737 cv
cp
319.444 148.938 mo
319.444 145.13 li
316.719 145.13 li
316.518 144.315 316.2 143.55 315.776 142.853 cv
317.703 140.926 li
315.011 138.233 li
313.082 140.161 li
312.386 139.736 311.62 139.415 310.805 139.217 cv
310.805 136.491 li
306.998 136.491 li
306.998 139.217 li
306.184 139.415 305.417 139.736 304.719 140.161 cv
302.793 138.234 li
300.1 140.926 li
302.027 142.853 li
301.603 143.55 301.282 144.315 301.086 145.13 cv
298.359 145.13 li
298.359 148.939 li
301.086 148.938 li
301.282 149.753 301.603 150.519 302.027 151.216 cv
300.1 153.143 li
302.793 155.835 li
304.719 153.909 li
305.417 154.333 306.184 154.652 306.998 154.851 cv
306.998 157.576 li
310.805 157.577 li
310.805 154.851 li
311.62 154.652 312.386 154.333 313.082 153.909 cv
315.011 155.835 li
317.703 153.143 li
315.776 151.216 li
316.2 150.519 316.518 149.753 316.719 148.938 cv
319.444 148.938 li
cp
.705882 .254902 .180392 rgb
f
303.13 174.313 mo
303.132 163.594 li
295.454 163.594 li
294.898 161.301 293.999 159.143 292.804 157.183 cv
298.228 151.757 li
290.648 144.177 li
285.223 149.603 li
283.261 148.408 281.105 147.506 278.812 146.95 cv
278.812 139.274 li
268.092 139.274 li
268.092 146.95 li
265.798 147.506 263.642 148.408 261.68 149.603 cv
256.256 144.178 li
248.675 151.757 li
254.1 157.183 li
252.906 159.143 252.006 161.302 251.449 163.594 cv
243.773 163.594 li
243.773 174.314 li
251.449 174.313 li
252.006 176.606 252.906 178.765 254.1 180.725 cv
248.675 186.151 li
256.256 193.731 li
261.681 188.304 li
263.642 189.5 265.798 190.4 268.092 190.959 cv
268.092 198.633 li
278.812 198.634 li
278.812 190.959 li
281.105 190.4 283.261 189.5 285.223 188.304 cv
290.648 193.731 li
298.229 186.151 li
292.804 180.725 li
293.999 178.764 294.898 176.606 295.457 174.313 cv
303.13 174.313 li
cp
.941176 .337255 .239216 rgb
f
266.466 173.842 mo
266.469 173.842 li
268.144 173.842 li
270.095 173.842 li
270.095 175.793 li
271.949 180.441 li
273.464 174.875 li
274.948 180.333 li
276.821 175.793 li
276.807 173.842 li
280.438 173.842 li
283.593 173.842 286.165 176.314 286.337 179.428 cv
288.565 176.62 289.905 173.076 289.905 169.213 cv
289.905 160.126 282.539 152.761 273.451 152.761 cv
264.364 152.761 256.998 160.126 256.998 169.213 cv
256.998 173.076 258.338 176.621 260.567 179.429 cv
260.738 176.314 263.31 173.842 266.466 173.842 cv
cp
.705882 .254902 .180392 rgb
f
280.438 173.842 mo
276.807 173.842 li
276.821 175.793 li
274.948 180.333 li
273.464 174.875 li
271.949 180.441 li
270.095 175.793 li
267.343 178.545 li
274.418 185.619 li
279.245 185.337 283.51 182.988 286.337 179.428 cv
286.165 176.314 283.593 173.842 280.438 173.842 cv
cp
.180392 .192157 .239216 rgb
f
268.144 173.842 mo
270.095 175.793 li
270.095 173.842 li
268.144 173.842 li
cp
f
273.451 185.667 mo
273.778 185.667 274.095 185.637 274.418 185.619 cv
267.343 178.545 li
270.095 175.793 li
268.144 173.842 li
266.469 173.842 li
266.466 173.842 li
263.31 173.842 260.738 176.314 260.567 179.429 cv
263.582 183.225 268.228 185.667 273.451 185.667 cv
cp
.345098 .352941 .392157 rgb
f
276.108 177.52 mo
273.464 174.875 li
274.948 180.333 li
276.108 177.52 li
cp
1 1 1 rgb
f
270.793 177.545 mo
271.949 180.441 li
273.464 174.875 li
270.793 177.545 li
cp
.870588 .870588 .878431 rgb
f
271.965 173.842 mo
270.095 171.973 li
270.095 173.842 li
270.124 173.842 li
270.95 174.407 271.924 174.769 272.977 174.855 cv
271.965 173.842 li
cp
1 .792157 .701961 rgb
f
270.095 170.742 mo
270.095 171.973 li
271.965 173.842 li
272.977 174.855 li
273.138 174.867 273.299 174.875 273.464 174.875 cv
273.568 174.875 273.672 174.869 273.777 174.863 cv
274.892 174.805 275.926 174.439 276.795 173.846 cv
276.807 173.842 li
276.807 170.742 li
270.095 170.742 li
cp
.976471 .709804 .615686 rgb
f
276.611 161.469 mo
275.313 161.469 273.769 162.609 272.993 163.529 cv
273.464 173.301 li
276.901 173.27 279.725 169.036 280.127 165.454 cv
280.16 165.166 280.179 164.882 280.179 164.605 cv
280.179 163.131 li
279.821 162.201 277.596 161.469 276.611 161.469 cv
cp
f
278.776 158.117 mo
275.732 160.229 272.035 161.469 268.049 161.469 cv
267.587 161.469 267.131 161.447 266.68 161.413 cv
266.646 161.682 266.624 161.956 266.624 162.234 cv
266.624 164.605 li
266.624 164.882 266.642 165.166 266.673 165.454 cv
267.079 169.054 269.936 173.302 273.402 173.302 cv
273.421 173.302 273.442 173.302 273.464 173.301 cv
273.464 168.865 li
273.895 168.865 274.179 168.453 274.179 168.067 cv
274.179 163.69 li
274.179 163.69 274.271 163.573 274.431 163.404 cv
274.883 162.921 275.889 161.996 276.964 161.996 cv
279.188 161.996 280.179 163.131 280.179 163.131 cv
280.179 162.234 li
280.179 160.684 279.653 159.259 278.776 158.117 cv
cp
1 .792157 .701961 rgb
f
280.736 156.557 mo
279.133 154.262 276.474 152.761 273.464 152.761 cv
268.727 152.761 264.857 156.475 264.609 161.149 cv
264.601 161.308 264.595 161.467 264.595 161.628 cv
264.595 163.404 li
264.595 164.532 265.506 165.448 266.633 165.454 cv
266.673 165.454 li
266.642 165.166 266.624 164.882 266.624 164.605 cv
266.624 162.234 li
266.624 161.956 266.646 161.682 266.68 161.413 cv
267.131 161.447 267.587 161.469 268.049 161.469 cv
272.038 161.469 275.734 160.229 278.778 158.115 cv
278.778 158.116 278.778 158.116 278.776 158.117 cv
279.653 159.259 280.179 160.684 280.179 162.234 cv
280.179 163.131 li
280.179 164.605 li
280.179 164.882 280.16 165.166 280.127 165.454 cv
280.291 165.454 li
281.419 165.448 282.331 164.532 282.331 163.404 cv
282.331 161.628 li
282.331 159.742 281.74 157.994 280.736 156.557 cv
cp
.180392 .192157 .239216 rgb
f
270.124 173.842 mo
270.095 173.842 li
270.095 175.793 li
270.793 177.545 li
273.464 174.875 li
272.224 174.875 271.075 174.493 270.124 173.842 cv
cp
.972549 .972549 .976471 rgb
f
276.821 175.793 mo
276.807 175.793 li
276.807 173.842 li
276.801 173.842 li
275.851 174.493 274.702 174.875 273.464 174.875 cv
276.108 177.52 li
276.821 175.793 li
cp
.870588 .870588 .878431 rgb
f
274.984 176.395 mo
273.464 177.915 li
271.944 176.395 li
273.464 174.875 li
274.984 176.395 li
cp
.345098 .352941 .392157 rgb
f
34.1653 163.76 mo
34.1653 170.943 36.8697 177.492 41.3117 182.453 cv
62.208 163.76 li
34.1653 163.76 li
cp
.137255 .639216 .560784 rgb
f
54.261 197.909 mo
55.9513 198.227 57.6918 198.4 59.4739 198.4 cv
59.4739 170.36 li
38.5749 189.05 li
42.6096 193.556 48.0768 196.747 54.261 197.909 cv
cp
.705882 .254902 .180392 rgb
f
62.208 191.8 mo
77.6946 191.8 90.2506 179.249 90.2506 163.76 cv
62.208 163.76 li
62.208 191.8 li
cp
.870588 .870588 .878431 rgb
f
90.2506 163.76 mo
90.2506 152.053 83.0755 142.028 72.8852 137.827 cv
62.208 163.76 li
90.2506 163.76 li
cp
.717647 .756863 .117647 rgb
f
62.5512 155.394 mo
73.2286 129.462 li
69.9369 128.106 66.3327 127.353 62.5512 127.353 cv
62.5512 155.394 li
cp
.941176 .337255 .239216 rgb
f
59.4739 127.353 mo
51.7302 127.353 44.7193 130.491 39.6446 135.565 cv
59.4739 155.394 li
59.4739 127.353 li
cp
.180392 .192157 .239216 rgb
f
42.3805 143.932 mo
37.3057 149.005 34.1653 156.016 34.1653 163.76 cv
62.208 163.76 li
42.3805 143.932 li
cp
.937255 .945098 .760784 rgb
f
206.301 286.793 mo
206.301 291.914 202.148 296.066 197.027 296.066 cv
148.642 296.066 li
143.52 296.066 139.369 291.914 139.369 286.793 cv
139.369 264.323 li
139.369 259.201 143.52 255.049 148.642 255.049 cv
197.027 255.049 li
202.148 255.049 206.301 259.201 206.301 264.323 cv
206.301 286.793 li
cp
.870588 .870588 .878431 rgb
f
197.027 293.747 mo
148.642 293.747 li
144.807 293.747 141.688 290.627 141.688 286.793 cv
141.688 267.278 li
203.982 267.278 li
203.982 286.793 li
203.982 290.627 200.862 293.747 197.027 293.747 cv
cp
197.027 252.729 mo
148.642 252.729 li
142.25 252.729 137.05 257.93 137.05 264.323 cv
137.05 286.793 li
137.05 293.185 142.25 298.385 148.642 298.385 cv
197.027 298.385 li
203.418 298.385 208.619 293.185 208.619 286.793 cv
208.619 264.323 li
208.619 257.93 203.418 252.729 197.027 252.729 cv
cp
.345098 .352941 .392157 rgb
f
164.29 252.729 mo
164.29 263.658 li
181.367 263.658 li
181.367 252.729 li
164.29 252.729 li
cp
.180392 .192157 .239216 rgb
f
177.461 234.238 mo
168.118 234.238 li
168.118 240.614 li
177.461 240.614 li
177.461 234.238 li
cp
.717647 .756863 .117647 rgb
f
166.704 240.614 mo
166.704 261.164 li
178.877 261.164 li
178.877 240.614 li
166.704 240.614 li
cp
.137255 .639216 .560784 rgb
f
169.264 255.049 mo
169.264 256.996 170.843 258.575 172.79 258.575 cv
172.79 251.523 li
170.843 251.523 169.264 253.101 169.264 255.049 cv
cp
.937255 .945098 .760784 rgb
f
172.79 251.523 mo
172.79 258.575 li
174.737 258.575 176.317 256.996 176.317 255.049 cv
176.317 253.101 174.737 251.523 172.79 251.523 cv
cp
.717647 .756863 .117647 rgb
f
197.027 275.221 mo
169.614 275.221 li
169.614 271.576 li
197.027 271.576 li
197.027 275.221 li
cp
f
196.988 282.506 mo
169.576 282.506 li
169.576 278.863 li
196.988 278.863 li
196.988 282.506 li
cp
f
197.027 289.793 mo
169.614 289.793 li
169.614 286.15 li
197.027 286.15 li
197.027 289.793 li
cp
f
155.168 283.836 mo
154.082 282.748 li
154.082 283.836 li
154.099 283.836 li
154.578 284.165 155.144 284.375 155.757 284.425 cv
155.168 283.836 li
cp
1 .792157 .701961 rgb
f
154.082 282.034 mo
154.082 282.748 li
155.168 283.836 li
155.757 284.425 li
155.851 284.433 155.943 284.437 156.039 284.437 cv
156.1 284.437 156.162 284.433 156.222 284.43 cv
156.871 284.396 157.473 284.182 157.977 283.837 cv
157.984 283.836 li
157.984 282.034 li
154.082 282.034 li
cp
.976471 .709804 .615686 rgb
f
157.87 276.642 mo
157.116 276.642 156.217 277.304 155.766 277.839 cv
156.039 283.522 li
158.039 283.504 159.682 281.042 159.916 278.959 cv
159.934 278.79 159.946 278.626 159.946 278.464 cv
159.946 277.608 li
159.737 277.065 158.444 276.642 157.87 276.642 cv
cp
f
159.13 274.692 mo
157.359 275.92 155.211 276.642 152.891 276.642 cv
152.623 276.642 152.357 276.627 152.094 276.607 cv
152.075 276.765 152.062 276.924 152.062 277.085 cv
152.062 278.464 li
152.062 278.626 152.074 278.79 152.092 278.959 cv
152.326 281.052 153.988 283.523 156.003 283.523 cv
156.016 283.523 156.027 283.522 156.039 283.522 cv
156.039 280.941 li
156.291 280.941 156.457 280.703 156.457 280.477 cv
156.457 277.931 li
156.457 277.931 156.51 277.865 156.601 277.766 cv
156.866 277.485 157.451 276.948 158.076 276.948 cv
159.37 276.948 159.946 277.608 159.946 277.608 cv
159.946 277.085 li
159.946 276.185 159.64 275.356 159.13 274.692 cv
cp
1 .792157 .701961 rgb
f
160.269 273.783 mo
159.337 272.449 157.791 271.576 156.039 271.576 cv
153.285 271.576 151.036 273.737 150.89 276.455 cv
150.886 276.547 150.883 276.641 150.883 276.735 cv
150.883 277.766 li
150.883 278.422 151.413 278.955 152.068 278.959 cv
152.092 278.959 li
152.074 278.79 152.062 278.626 152.062 278.464 cv
152.062 277.085 li
152.062 276.924 152.075 276.765 152.094 276.607 cv
152.357 276.627 152.623 276.642 152.891 276.642 cv
155.211 276.642 157.36 275.92 159.131 274.691 cv
159.13 274.691 159.13 274.691 159.13 274.692 cv
159.64 275.356 159.946 276.185 159.946 277.085 cv
159.946 277.608 li
159.946 278.464 li
159.946 278.626 159.934 278.79 159.916 278.959 cv
160.011 278.959 li
160.667 278.955 161.197 278.422 161.197 277.766 cv
161.197 276.735 li
161.197 275.636 160.853 274.619 160.269 273.783 cv
cp
.180392 .192157 .239216 rgb
f
154.099 283.836 mo
154.082 283.836 li
154.082 284.971 li
154.488 285.99 li
155.159 287.674 li
156.039 284.437 li
155.32 284.437 154.65 284.214 154.099 283.836 cv
cp
.972549 .972549 .976471 rgb
f
157.984 284.971 mo
157.984 283.836 li
157.981 283.836 li
157.429 284.214 156.76 284.437 156.039 284.437 cv
156.904 287.612 li
157.578 285.976 li
157.992 284.971 li
157.984 284.971 li
cp
.870588 .870588 .878431 rgb
f
160.096 283.836 mo
157.984 283.836 li
157.992 284.971 li
156.904 287.612 li
156.039 284.437 li
155.159 287.674 li
154.082 284.971 li
154.082 283.836 li
152.946 283.836 li
151.973 283.836 li
151.971 283.836 li
150.071 283.836 148.531 285.376 148.531 287.275 cv
148.531 289.793 li
152.982 289.793 li
155.702 289.793 li
156.003 289.793 li
159.083 289.793 li
163.534 289.793 li
163.534 287.276 li
163.534 287.275 li
163.534 285.376 161.996 283.836 160.096 283.836 cv
cp
.180392 .192157 .239216 rgb
f
156.924 285.322 mo
156.039 286.205 li
155.156 285.322 li
156.039 284.437 li
156.924 285.322 li
cp
.345098 .352941 .392157 rgb
f
56.8955 357.599 mo
56.8955 357.615 56.8945 357.632 56.8945 357.649 cv
56.9187 357.699 li
56.8955 357.599 li
cp
0 .321569 .513726 rgb
f
99.5054 407.813 mo
46.7451 407.813 li
46.7451 342.366 li
99.5054 342.366 li
99.5054 407.813 li
cp
.870588 .870588 .878431 rgb
f
93.9482 352.857 mo
52.6427 352.857 li
52.6427 348.994 li
93.9482 348.994 li
93.9482 352.857 li
cp
.345098 .352941 .392157 rgb
f
93.7785 363.81 mo
52.4711 363.81 li
52.4711 359.943 li
93.7785 359.943 li
93.7785 363.81 li
cp
f
93.862 374.761 mo
52.5565 374.761 li
52.5565 370.896 li
93.862 370.896 li
93.862 374.761 li
cp
f
93.6922 385.713 mo
52.3857 385.713 li
52.3857 381.847 li
93.6922 381.847 li
93.6922 385.713 li
cp
f
73.1243 396.663 mo
52.4711 396.663 li
52.4711 392.799 li
73.1243 392.799 li
73.1243 396.663 li
cp
f
81.3886 400.921 mo
81.3886 417.151 li
84.8249 413.717 li
88.2584 417.151 li
88.2584 400.921 li
81.3886 400.921 li
cp
.717647 .756863 .117647 rgb
f
84.4278 402.164 mo
95.903 413.641 li
95.903 408.783 li
100.76 408.783 li
89.2855 397.307 li
84.4278 402.164 li
cp
.137255 .639216 .560784 rgb
f
84.8249 388.346 mo
86.7092 390.17 li
89.3077 389.802 li
89.7614 392.387 li
92.0798 393.616 li
90.9266 395.974 li
92.0798 398.33 li
89.7614 399.561 li
89.3077 402.144 li
86.7092 401.776 li
84.8249 403.601 li
82.9388 401.776 li
80.3412 402.144 li
79.8865 399.561 li
77.5682 398.33 li
78.7204 395.974 li
77.5682 393.616 li
79.8865 392.387 li
80.3412 389.802 li
82.9388 390.17 li
84.8249 388.346 li
cp
.941176 .337255 .239216 rgb
f
36.1857 377.848 mo
36.5799 378.241 36.9705 378.623 37.3565 378.995 cv
37.3583 378.995 li
37.7303 379.382 38.1116 379.773 38.5031 380.165 cv
39.7426 381.404 40.9523 382.518 42.125 383.525 cv
47.2563 382.152 li
46.0642 386.604 li
55.7312 393.425 62.2095 392.623 62.2151 392.622 cv
23.7299 354.138 li
23.7299 354.138 21.9254 363.587 36.1857 377.848 cv
cp
.717647 .756863 .117647 rgb
f
42.7336 362.324 mo
31.5052 353.17 23.7299 354.138 23.7299 354.138 cv
62.2151 392.622 li
62.2151 392.622 li
62.2151 392.622 64.0195 383.171 49.7602 368.911 cv
49.365 368.517 48.9772 368.137 48.5895 367.762 cv
48.5876 367.764 li
48.2156 367.376 47.8352 366.987 47.4409 366.593 cv
46.8695 366.021 46.3044 365.477 45.7478 364.956 cv
41.74 366.031 li
42.7336 362.324 li
cp
.137255 .639216 .560784 rgb
f
68.4429 397.376 mo
68.6443 401.778 li
23.7299 354.138 li
23.7299 354.138 li
68.4429 397.376 li
cp
.180392 .192157 .239216 rgb
f
390.819 334.951 mo
354.631 347.88 li
356.785 350.036 li
390.819 350.036 li
424.857 350.036 li
427.01 347.88 li
390.819 334.951 li
cp
.870588 .870588 .878431 rgb
f
390.819 338.291 mo
367.727 346.76 li
372.664 346.76 li
390.865 346.76 li
409.065 346.76 li
413.999 346.76 li
390.819 338.291 li
cp
.345098 .352941 .392157 rgb
f
417.446 390.923 mo
364.286 390.923 li
364.286 358.799 li
417.446 358.799 li
417.446 390.923 li
cp
.180392 .192157 .239216 rgb
f
362.058 358.799 mo
362.058 390.923 li
365.265 390.923 li
365.265 358.799 li
362.058 358.799 li
cp
.870588 .870588 .878431 rgb
f
413.387 358.799 mo
413.387 390.923 li
416.594 390.923 li
416.594 358.799 li
413.387 358.799 li
cp
f
374.88 358.799 mo
374.88 390.923 li
378.087 390.923 li
378.087 358.799 li
374.88 358.799 li
cp
f
387.661 358.799 mo
387.661 390.923 li
390.869 390.923 li
390.869 358.799 li
387.661 358.799 li
cp
f
400.483 358.799 mo
400.483 390.923 li
403.692 390.923 li
403.692 358.799 li
400.483 358.799 li
cp
f
426.193 397.325 mo
355.331 397.325 li
355.331 394.126 li
426.193 394.126 li
426.193 397.325 li
cp
.937255 .945098 .760784 rgb
f
429.393 400.524 mo
352.13 400.524 li
352.13 397.325 li
429.393 397.325 li
429.393 400.524 li
cp
.137255 .639216 .560784 rgb
f
416.594 363.615 mo
416.594 363.615 li
416.594 386.114 li
416.521 386.109 416.449 386.108 416.376 386.108 cv
413.717 386.108 411.559 388.264 411.559 390.923 cv
416.594 390.923 li
419.801 390.923 li
421.193 390.923 li
421.193 389.604 420.661 388.408 419.801 387.54 cv
419.801 362.391 li
420.788 361.509 421.41 360.226 421.41 358.799 cv
411.779 358.799 li
411.779 361.459 413.935 363.615 416.594 363.615 cv
cp
.345098 .352941 .392157 rgb
f
403.692 363.615 mo
403.692 363.615 li
403.692 386.114 li
403.619 386.109 403.547 386.108 403.475 386.108 cv
400.814 386.108 398.658 388.264 398.658 390.923 cv
403.692 390.923 li
406.9 390.923 li
408.29 390.923 li
408.29 389.604 407.759 388.408 406.9 387.54 cv
406.9 362.391 li
407.885 361.509 408.507 360.226 408.507 358.799 cv
398.874 358.799 li
398.874 361.459 401.03 363.615 403.692 363.615 cv
cp
f
390.869 363.615 mo
390.869 363.615 li
390.869 386.114 li
390.796 386.109 390.726 386.108 390.653 386.108 cv
387.992 386.108 385.836 388.264 385.836 390.923 cv
390.869 390.923 li
394.077 390.923 li
395.468 390.923 li
395.468 389.604 394.938 388.408 394.077 387.54 cv
394.077 362.391 li
395.065 361.509 395.685 360.226 395.685 358.799 cv
386.053 358.799 li
386.053 361.459 388.211 363.615 390.869 363.615 cv
cp
f
378.087 363.615 mo
378.087 363.615 li
378.087 386.114 li
378.016 386.109 377.942 386.108 377.87 386.108 cv
375.211 386.108 373.053 388.264 373.053 390.923 cv
378.087 390.923 li
381.293 390.923 li
382.685 390.923 li
382.685 389.604 382.154 388.408 381.293 387.54 cv
381.293 362.391 li
382.282 361.509 382.902 360.226 382.902 358.799 cv
373.269 358.799 li
373.269 361.459 375.427 363.615 378.087 363.615 cv
cp
f
360.448 350.036 mo
360.448 358.799 li
370.082 358.799 li
373.269 358.799 li
382.902 358.799 li
386.053 358.799 li
395.685 358.799 li
398.874 358.799 li
408.507 358.799 li
411.779 358.799 li
421.41 358.799 li
421.494 358.799 li
421.494 350.036 li
360.448 350.036 li
cp
.137255 .639216 .560784 rgb
f
365.265 363.615 mo
365.265 363.615 li
365.265 386.114 li
365.193 386.109 365.12 386.108 365.049 386.108 cv
362.388 386.108 360.231 388.264 360.231 390.923 cv
365.265 390.923 li
368.472 390.923 li
369.865 390.923 li
369.865 389.604 369.332 388.408 368.472 387.54 cv
368.472 362.391 li
369.459 361.509 370.082 360.226 370.082 358.799 cv
360.448 358.799 li
360.448 361.459 362.606 363.615 365.265 363.615 cv
cp
.345098 .352941 .392157 rgb
f
358.53 390.923 mo
358.53 394.126 li
422.991 394.126 li
422.991 390.923 li
358.53 390.923 li
cp
.137255 .639216 .560784 rgb
f
310.051 298.385 mo
253.167 298.385 li
253.167 245.64 li
310.051 245.64 li
310.051 298.385 li
cp
.705882 .254902 .180392 rgb
f
305.912 294.246 mo
257.305 294.246 li
257.305 245.64 li
305.912 245.64 li
305.912 294.246 li
cp
.980392 .996078 1 rgb
f
305.912 260.388 mo
257.305 260.388 li
257.305 245.64 li
305.912 245.64 li
305.912 260.388 li
cp
.941176 .337255 .239216 rgb
f
273.229 284.534 mo
273.229 267.401 li
270.613 267.401 li
270.613 263.863 li
276.939 263.863 li
276.939 284.534 li
273.229 284.534 li
cp
.137255 .639216 .560784 rgb
f
288.894 284.534 mo
288.894 267.401 li
286.278 267.401 li
286.278 263.863 li
292.605 263.863 li
292.605 284.534 li
288.894 284.534 li
cp
f
292.607 294.246 mo
305.912 280.942 li
292.607 280.942 li
292.607 294.246 li
cp
.717647 .756863 .117647 rgb
f
305.912 280.942 mo
292.607 294.246 li
305.912 294.246 li
305.912 280.942 li
cp
.870588 .870588 .878431 rgb
f
272.109 257.038 mo
260.558 257.038 li
260.558 254.271 li
272.109 254.271 li
272.109 257.038 li
cp
.980392 .996078 1 rgb
f
261.82 242.133 mo
261.82 249.147 li
261.82 250.392 262.831 251.403 264.078 251.403 cv
264.078 239.876 li
262.831 239.876 261.82 240.887 261.82 242.133 cv
cp
f
264.078 239.876 mo
264.078 251.403 li
265.325 251.403 266.335 250.392 266.335 249.147 cv
266.335 242.133 li
266.335 240.887 265.325 239.876 264.078 239.876 cv
cp
.870588 .870588 .878431 rgb
f
296.884 242.133 mo
296.884 249.147 li
296.884 250.392 297.894 251.403 299.14 251.403 cv
299.14 239.876 li
297.894 239.876 296.884 240.887 296.884 242.133 cv
cp
.980392 .996078 1 rgb
f
299.14 239.876 mo
299.14 251.403 li
300.388 251.403 301.397 250.392 301.397 249.147 cv
301.397 242.133 li
301.397 240.887 300.388 239.876 299.14 239.876 cv
cp
.870588 .870588 .878431 rgb
f
288.096 242.133 mo
288.096 249.147 li
288.096 250.392 289.107 251.403 290.354 251.403 cv
290.354 239.876 li
289.107 239.876 288.096 240.887 288.096 242.133 cv
cp
.980392 .996078 1 rgb
f
290.354 239.876 mo
290.354 251.403 li
291.599 251.403 292.611 250.392 292.611 249.147 cv
292.611 242.133 li
292.611 240.887 291.599 239.876 290.354 239.876 cv
cp
.870588 .870588 .878431 rgb
f
270.606 242.133 mo
270.606 249.147 li
270.606 250.392 271.618 251.403 272.864 251.403 cv
272.864 239.876 li
271.618 239.876 270.606 240.887 270.606 242.133 cv
cp
.980392 .996078 1 rgb
f
272.864 239.876 mo
272.864 251.403 li
274.111 251.403 275.121 250.392 275.121 249.147 cv
275.121 242.133 li
275.121 240.887 274.111 239.876 272.864 239.876 cv
cp
.870588 .870588 .878431 rgb
f
281.61 239.876 mo
281.61 251.403 li
282.855 251.403 283.865 250.392 283.865 249.147 cv
283.865 242.133 li
283.865 240.887 282.855 239.876 281.61 239.876 cv
cp
f
279.351 242.133 mo
279.351 249.147 li
279.351 250.392 280.363 251.403 281.61 251.403 cv
281.61 239.876 li
280.363 239.876 279.351 240.887 279.351 242.133 cv
cp
.980392 .996078 1 rgb
f
203.678 339.827 mo
194.926 331.075 li
171.679 354.323 li
158.585 341.229 li
149.833 349.983 li
171.66 371.807 li
171.679 371.788 li
171.7 371.807 li
203.678 339.827 li
cp
.941176 .337255 .239216 rgb
f
179.114 359.98 mo
179.081 359.98 li
179.086 360.008 li
179.114 359.98 li
cp
.976471 .709804 .615686 rgb
f
186.61 389.2 mo
186.61 389.199 186.608 389.197 186.607 389.196 cv
186.606 389.197 li
186.607 389.198 186.61 389.199 186.61 389.2 cv
cp
f
177.422 398.388 mo
177.421 398.387 177.42 398.386 177.419 398.383 cv
177.418 398.384 li
177.419 398.386 177.421 398.387 177.422 398.388 cv
cp
f
182.017 393.794 mo
182.016 393.793 182.015 393.791 182.013 393.79 cv
182.013 393.791 li
182.013 393.792 182.016 393.793 182.017 393.794 cv
cp
f
177.423 398.39 mo
177.423 398.389 li
177.422 398.388 li
177.422 398.388 177.423 398.389 177.423 398.39 cv
cp
f
182.018 393.795 mo
182.018 393.795 li
182.017 393.794 li
182.018 393.795 li
cp
f
172.826 402.977 mo
172.826 402.977 li
172.831 402.983 li
172.831 402.983 li
172.83 402.98 li
172.83 402.98 172.828 402.978 172.826 402.977 cv
cp
f
186.612 389.201 mo
186.612 389.201 li
186.61 389.2 186.61 389.2 186.61 389.2 cv
186.61 389.2 186.61 389.2 186.612 389.201 cv
cp
f
156.769 386.903 mo
156.764 386.907 156.759 386.91 156.754 386.916 cv
156.757 386.918 li
156.762 386.913 156.764 386.907 156.769 386.903 cv
cp
1 .792157 .701961 rgb
f
165.956 396.091 mo
165.953 396.095 165.946 396.099 165.942 396.103 cv
165.946 396.107 li
165.95 396.102 165.953 396.095 165.956 396.091 cv
cp
f
161.363 391.497 mo
161.359 391.502 161.353 391.505 161.348 391.51 cv
161.351 391.513 li
161.356 391.508 161.359 391.502 161.363 391.497 cv
cp
f
179.114 359.98 mo
179.086 360.008 li
179.081 359.98 li
174.483 359.98 li
174.281 359.98 li
158.037 376.226 li
158.037 376.226 164.785 382.858 171.442 376.201 cv
177.1 370.544 li
190.981 384.423 li
191.054 384.485 191.134 384.537 191.204 384.607 cv
191.204 384.607 191.204 384.608 191.205 384.608 cv
197.472 378.34 li
210.338 378.34 li
210.338 359.98 li
179.114 359.98 li
cp
.976471 .709804 .615686 rgb
f
186.606 389.197 mo
186.607 389.196 li
186.608 389.197 186.61 389.199 186.61 389.2 cv
186.61 389.199 186.607 389.198 186.606 389.197 cv
cp
182.013 393.791 mo
182.013 393.79 li
182.015 393.791 182.016 393.793 182.017 393.794 cv
182.016 393.793 182.013 393.792 182.013 393.791 cv
cp
191.205 384.608 mo
191.204 384.608 191.204 384.607 191.204 384.607 cv
191.134 384.537 191.054 384.485 190.981 384.423 cv
177.1 370.544 li
171.442 376.201 li
164.785 382.858 158.037 376.226 158.037 376.226 cv
174.281 359.98 li
166.57 359.98 li
166.537 359.98 li
135.313 359.98 li
135.313 378.34 li
148.179 378.34 li
152.165 382.325 li
152.168 382.321 152.171 382.315 152.175 382.311 cv
153.443 381.041 155.502 381.041 156.769 382.311 cv
158.038 383.577 158.038 385.636 156.769 386.903 cv
158.038 385.636 160.095 385.636 161.363 386.903 cv
162.632 388.173 162.632 390.229 161.363 391.497 cv
162.632 390.229 164.688 390.229 165.956 391.497 cv
167.225 392.765 167.225 394.823 165.956 396.091 cv
167.225 394.823 169.283 394.823 170.55 396.091 cv
171.818 397.358 171.818 399.415 170.55 400.685 cv
170.546 400.689 170.54 400.692 170.536 400.697 cv
172.82 402.983 li
172.826 402.977 li
172.828 402.978 172.829 402.98 172.829 402.98 cv
172.831 402.983 li
174.098 404.248 176.155 404.248 177.422 402.98 cv
178.692 401.714 178.692 399.658 177.423 398.39 cv
177.423 398.389 177.423 398.388 177.423 398.388 cv
177.421 398.387 177.419 398.386 177.418 398.384 cv
177.419 398.383 li
177.42 398.386 177.421 398.387 177.422 398.388 cv
177.423 398.389 li
178.694 399.656 180.749 399.656 182.017 398.388 cv
183.284 397.119 183.284 395.063 182.018 393.795 cv
183.286 395.062 185.342 395.062 186.61 393.794 cv
187.878 392.525 187.878 390.47 186.612 389.201 cv
187.879 390.469 189.934 390.469 191.204 389.2 cv
192.471 387.932 192.471 385.875 191.205 384.608 cv
cp
1 .792157 .701961 rgb
f
170.55 400.685 mo
171.818 399.415 171.818 397.358 170.55 396.091 cv
169.283 394.823 167.225 394.823 165.956 396.091 cv
165.953 396.095 165.95 396.102 165.946 396.107 cv
164.689 397.375 164.692 399.421 165.956 400.685 cv
167.22 401.946 169.267 401.949 170.536 400.697 cv
170.54 400.692 170.546 400.689 170.55 400.685 cv
cp
.976471 .709804 .615686 rgb
f
165.956 396.091 mo
167.225 394.823 167.225 392.765 165.956 391.497 cv
164.688 390.229 162.632 390.229 161.363 391.497 cv
161.359 391.502 161.356 391.508 161.351 391.513 cv
160.096 392.78 160.101 394.827 161.363 396.091 cv
162.627 397.354 164.672 397.358 165.942 396.103 cv
165.946 396.099 165.953 396.095 165.956 396.091 cv
cp
f
161.363 391.497 mo
162.632 390.229 162.632 388.173 161.363 386.903 cv
160.095 385.636 158.038 385.636 156.769 386.903 cv
156.764 386.907 156.762 386.913 156.757 386.918 cv
155.504 388.189 155.507 390.233 156.769 391.497 cv
158.034 392.76 160.081 392.764 161.348 391.51 cv
161.353 391.505 161.359 391.502 161.363 391.497 cv
cp
f
156.769 386.903 mo
158.038 385.636 158.038 383.577 156.769 382.311 cv
155.502 381.041 153.443 381.041 152.175 382.311 cv
152.171 382.315 152.168 382.321 152.165 382.325 cv
150.911 383.594 150.914 385.64 152.175 386.903 cv
153.438 388.167 155.486 388.17 156.754 386.916 cv
156.759 386.91 156.764 386.907 156.769 386.903 cv
cp
f
206.941 378.34 mo
197.545 378.34 li
197.545 360.008 li
206.941 360.008 li
206.941 378.34 li
cp
.870588 .870588 .878431 rgb
f
216.336 383.492 mo
206.941 383.492 li
206.941 360.008 li
216.336 360.008 li
216.336 383.492 li
cp
.180392 .192157 .239216 rgb
f
138.729 378.312 mo
148.124 378.312 li
148.124 359.98 li
138.729 359.98 li
138.729 378.312 li
cp
.870588 .870588 .878431 rgb
f
129.333 383.464 mo
138.729 383.464 li
138.729 359.98 li
129.333 359.98 li
129.333 383.464 li
cp
.180392 .192157 .239216 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (IvAN) ()
%%Title: (1409.i047.009.P.m004.c20.business management icons.eps)
%%CreationDate: 9/5/2014 8:57 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6B3-%o[P7W.^2(uCO97DL6$.6e^c"MG(gAm8E"5u@!b@Osi#/-tcYn=-hGr*3SYTj%&!BEJgiG+)Wii@m6`$WUmI$oODg'F8
%]76sGQu6*<<Mo(_NnGKOkr@69s0oB-XEiG8A8594ejf$rB6_elef'0,Z.nR;#OAq[YA,HZZ?d"q<-'-"X]G2Bgif`%]7b)0He(d!
%fkQb`rH<=NZh#(9N>)0`blGJ0%e+Cg4"#Al!$*qO6^S;SNQme"GIQ*G!D<AprcHdPD[qO#lEJt/I!L6:$[Xf#qP_fBnfOM\5RIFr
%$pWlHNO.oK2<890Jl_C(n3IPrGa-tO+_3iFfe<u4s(LCVr*R\@!V/IU%0%to(B4dBeoO=+jPq4"P].&%2mB\0OBmYAYh3SS8'<_\
%Uu66fh.p#G%F-`XdIP@89uHuQrhoYopqRh)gP"Gmcd"8cZ#ctSAr8JIM]4mMNBc$9cPk>[UG"T0kRW`Crr\:L(/@mDi58Emd=9VZ
%%Y8.K_*$"rQect_"lfcYQWmI!X+DMnY@qo\m@Q=l+HP@0#^NYGF#EdJX&6K,rRF/i@q(Pu?DDSsI7k5bR`Y-/D*&lCR`YS=8.*E1
%i(([SQJkpu&=?T-/*-c`)tkRJEKEfu+HH?tk'=;>DL6tM6<&1+c$CM3Nh1=frt%MB=8B$Is"!4@<#?)a*Jk'N:Ppe?RFh!_O)XHV
%:;,:s,<H,)cY\d;%OaZEHS0aVr^":b(SdQeL&`U)]'r"lK,t!^J$8Wcm`@b1"@)>J];+4hkH+R$s",&Ph:"j]D50#Up4:'Qh#?P^
%prA$B1?i<:\6l@(+7O3`9to?J4daS>i7W&0poj0=r=f21)?0Xehh/4dh$?("d%/J.7]Y9B3qa`I:-J?Sg@&V;r1I'W<;S]P_=,"a
%r!C,;JRh(8!A%0Y+?M_/&q*/b,"%<'T_t$gW9WjR/8_.\+8EP@Imtd2JQ]QHqUIds[[MiWhk:DIs3<U9@AD`5n*k&b7tZ`TEOX[0
%#f.I9T)pA6L]!X@)8pH`1][G5]q#t?X]G&+?gV,UCJ"IPr9b)[nnf^&WY*dF7L]=X%i51SR`:IVZr:mpnOlaFZ#,O#X:B"^?sZV*
%eUFhZ5o5ZsB?^oGhV?MW3G\irlF)$VWTB-mW]^JpbHfPOkgqir#GF2/e^]MZJSG&&UURiHZjkFOYPE\2f&:!)?WLKa;l@B'bo6HB
%CB)n=T/L`5J$iK$pi.%)e8Lq=L(1@h/'tNImoQ9$C)>,q^#/$M$U(u-#KGEr&cZM=$ZUqDQQa(GHB;>mJkeDjiC6&4Xc[:>d:f+Y
%$rbl&WbpT$Afr%q9Jnk\2XA8=%+pAZ2haq6n"e=q>uXVPA<`PU%/=5*RmNuFnW8n[9ucFV["cHW%*4-+h\;AZUb<0u'q)h6)hhW:
%;#'/4123?/AeTrpr[B+'SQ]MY-2:OTM;`Z-,7*Otn`YqcqmBl*B-W>7WJtgi9_4]1)6MBQTMb,9IZ/fH=bJ]]rhbcE$(QrZ^G-S5
%Z?Ts6n>=RsFH;/NLu'JR1n]"oB?;?QU"1*@9c=4P*!VU4<TA=ed82/RSe!cs,)kn:+kc6?qGdgG1N4[SH;cSCe/e3tNEr-(AVcu,
%n.3K6SS:"hbta_0&*'A@\@tc`2PAPNK=^uX=]!1!GlhcX``[1hOigBA3jY-pR>Y$^OigB3$M0h2Sb9%FW3flRRtGuXjt^&#),00J
%PdhL>g`i(hjDp/`DNW*oEk/a,jimPCjYEMc41X-ij(G-0FA]/as.#"d\Q+%fZCPf&b]gdb+ZUAJl_VVI-LKL1'UPfDDi2$%X\kO(
%T>_qA#;fBl]&%Dg-DQ+Il=_kb<]f(#]UJ8u\U/KXBFMpTIhkI)S*!CmaIL)Ne[(Y:q@-I,ZJ^h`a4C:%EF%HL<LHE1Ddb&Q]D62`
%']RGsoXlL221N$>e-8@RRh@I2r4G6dA'Df=h&%%Jp8SNjrNg7@EE&uNPI+0X)p@TT%#BI2N`t!4c<n8&VpWU1Fn&7F%)M<*'t^$Q
%Y^.VnJkou8iE3KE/V==&Hg6F-]J?.B4aF]>$oen=s3#r4s)'s=39W7^_b.?Ef?3QO`fX*JMMN3`1?b.<-%Yk"F>@>_os)dWWuLZ@
%at[`KT\=;o0A;CoQ3FX`Z32$H[*(!EG,a@=%^"lTNlTG-3LdK8gC.N@AQjX4,\H1\j,g-5+WT-VX1OJt#@f)crI<*Qc=.E6Q%ain
%=j;6FkaseqOu"!CA9Y!DacG=?Mo@<@`@dcNFP)!.ngSaoXmLS4n\5Lu6W:b=kJ)"MA(A^EJ^[qac=@[PHQQ2"M&3MC=f!<82/M!k
%8-U&GX@2RtG%'3cpW[?\k+Q.a2b.#P\SQN>;/`r$]>,rn175[&9LIsjN+G#\0^WIgSk`fJN7Ypkr>$EALQ`0MOI-n[cZEi:au+V?
%RWn>ZUk6q^0%`0H(k8!jKhT1nb-4Z`##Fu+i67.Oma!)!1ZMjAXg@t))[Xa2@aL'@:iMl35X.o-3XZQVU\WND*&iI;#)3Pl*j3$+
%;\b]eR4IY6\X>=^%*KL,Me]0=BH8s6oI`V!<K5WY2hg-tL:*nZitqaVL:p<\3U!lN[0F@?o!6u=8XIo/6?a<u4D,nfR>4uLZQLta
%r\I281[Y/tGUG!Xqica5S;]#tR3aeR%<'n=n^k4h)2[UdDl4H[#?,ORZCJ=makKHD0P>Q&>o)UEc$ArgC"le1?"%Bj<\)qUWRf<K
%[+"DQ5c%YbNS:-^bLn@3C?(dMX4mEVqCBemKb\N.m:Xp2hX[O?l8L+$cbQW.]np[cARUk]oVSj-2*6e4L7RptP1T1dbR@#G9lC@f
%.tcp5ZeUb_>MWCPQiW2q`d&nX0A>4r.N'E8<J0AjY6]d&C(tQ8@q(cJ_sM'XDnApg"ePD!m4<^ORb_Xh;=-3pR=+/>n!_'4>g-6<
%LRfhrOI2Ra?k1="X6sFEaqQ8u*:?4oc,3;@/2qq#i)Z(&IPig;fZfA1RHqO7R0&hr?Bfqn(%\XG,mt>AU\WND*&iI;L=gN9p7c()
%Aeo_j(4/pX'lUG2M_].[c91G^ab%Itps6M+Mo$6V;.de]eJ<L/''$L$fSboH3O<5\DI>-?/?I:DiguT4<b"UD3STn`A_Keei5Ftf
%m4^V\poUm4aVi=QrIos=P7l\jF)oMoe62ENF*ZB`]\VS<V+s53\'-Dig/[L.]s)8[]/Bb7/VBQGm+T=Zm@EV9!O<!_rbo>uKNM?a
%WO?Q"BPh2.Y$fcq_:lc+c%&eu`+f[\QH?/+.mbW8]Zjn$NEZT"r6ltFR9BSqW6s/GaB>H="qiK:BV@mm2*,FMeS#u1WkV<kiAB\H
%j#JAXb?5]@aRQe^B%eK-[%1(kf5J%.WE3R\/oOlthXZ"iC3Jm%ZXtT`M:<)?]gd-Hb&fk(de9P7S'QFq#!KVeAhm7?FY=3IEhgh;
%@[_c[PtBhVp2?d93OYVs3G-,-C,u(X#5er1Ifk/@c.i6rX5*J*D5#?k[O8/S4h1M.1>F<jcckb4s)%3Xc;aUJg2'#(TkANHW7Gh[
%\c[c#pI?+XK:a%Ka_7`QI5UB6X*[o.Bmu8#TI@cs-ETP@h],t0)oF3hR42p5Tm1jN7Dpfsn1FgnU<V/hE`]Ts;fCAF<*h6,ehfag
%Akk8pBd+D2JPEVrVen:!iF(HJS'2j&s6#p5/1s=qd>ZCD#.-AS[kck,^[lEVj^S14Z2V@;s%PmpZ2XWil=u7MhjI[JS]c4K(@/_n
%p"u5F6Z<32f/>C=,`=P;.9f<0p4.UsjuX5&hSkrP1tmJ+oB^:XjnXn82ZoI&R2M!PPBG_hNE3+Wk@?tac1?i:1g$m=/Z9PKMLKMS
%O`a]m43Dg:H`6UsKl.d`lDT1:fj@de_Tf!G>JcU=]:HdBg<!eR@UE[<9@N#5()=,DKksU0>?&]CRh`6Je%O42+j1Q5c@21?LWCFt
%rC3Qg!F^If""[pQ]Y!^?fkiU$)uW6SUYDtq;V/;mos:-l(N+tJB(^Yup1TieQsE5uA]pR+69>91N>DFB@i8!THc'E`;Nnug$<iW4
%h4%=%GsXre[@%a+6*F.<&@fL-<'Q)U(@W%0>\TV\U-od8K\l+oeUtdu;ct=Dac.I2_7.M=?D6d"s("uO=VP0XKpP6eAPm\T'OLcU
%4;NX;=Y%.@1(,bJLaih`?P\?^.F(1_A+KCtg9Rq2+>!pk=.I?o89eaXJi%Zf:!@6Alq1ASI:[57Ncka]_;&?TOlc65ZsP`=C(:cS
%c."f0/=NqkHVn5n/t0k%8].oB1m*J&dsf\4p9!6\kI>Jks7MkKUiW'(>F;]Xr.SXN&fde)1![ZG9NTGjs)ZJ*(>%<E@(p:8/E5[_
%V3O:-nFi]RMe]s&kMk`s^N9(r/6\nZGAJjkZep/3]K"2#N@ArCltk#ciq3,-H:I&@N6'8c(?GscH.Fda-;0>q)2C';(;f%6)qXn6
%;ORPo%e+\$`N324X!Iks`gP_o9J\b(=_)3POJ+Br>FI+:(QE5mL\ulcjk,rg"e@lIoh7Hq7(\pT-HMbp(Dm+2m.j,T>\-q?!R)0\
%rAEt5A-m:+c"nE<?IU]A+fS_r0r?Z*?IU^,^Q.9u5oh0X%Z<BfP^D+Q*Fi9tpnEeRW+4%B*<UBE@5ZM?_aUFb&*qGPrG$1OD8#3m
%Zg@MLhb>AThu/P-<1AXu:R7JJ3huC40^iYOj2PioRmK`jB=Qm^ZoVlbqi)\m7]2OuE/q;tAuV8fgoSsf)E*AY[,Pu%G_>CDS#o@N
%(i"J/S@X:-Ia_p&(DdO?7qcnicu23aERE.mU7n'kBP:0/)9NR?c2QN]>!BjI:;^t8XJ@r>OmcGfgWnepWEI6Vj7a6NY&\C+mje5T
%O8>cL(<HJk('Wmhp6/0apU%-d/?T6RI2Y1KKi4emf7pJ&kfh>,YJ</gUn'$,V/"q<A(+Kp&Y/DD?Wg3mmgWXA8R^;R/LP)]*&3)"
%G\qm[nL/sH>5XY$nM_>X/onMeb2oq.cm"sk)/WMeF,Ol&^REDY#[8(tg`i4lA93[r@4<U934(o&q-4-*(?sTuSQhn2Mf`j!c7RJT
%3D\h>q+Bg*Teedpgq.I5Ibq8?0scdCDCT\;<Ak*8>W*ki4.j]@k^(sj/jm(R\5hPNF.G<Spc9es9$Di,=BpqBrE7n7U<bj4+QI'k
%d4Im/pf#,sVla_$E[/Ujh-RM?*<'-f<!F?OJ$lR]WC=Fg'"NrS/l00;cA9NuZ-##)7V*:HRFItAX)8F2El[10kf[4d1g,gl[)Y"Q
%n#iM_/4`R+IEVV?iO#)+ba?V5rm+/.oB/Q>'C7=@3rA2%Z_udsrSXRBbP[gf;6?99Q4C=:.BG:@*?0t6B@U01.pCoo;p6h%8W)?L
%?s$-OfeJ_j7_d%.PGZSDO@md:Kht5Cq5sY"fcF^."nZ$U'L$\p$a(C"pfGH:^=)_0_l$Cr<2PgqFa<(m:5!`!,.u&l7WVXWF`S-"
%/`NEl`/qg%A?`aFnTOosFZYRV0gkl&.1V3qA?QOX`BTdPTP+oN/RkIS?;,GdFEj[8UA6=ucXi>b`>@R44P3m)^7IYa;!g2s([X\h
%$eo=:,%U1rQWZ`C;SP43>0Z"l[@%q:cD!o-NB@!6<m9"cP_@!!SEaYJ19F7V#<(Cc8@uqnKS+8c3+QB@>WBcXF8Xi4^Mo33N7,Qr
%:'hEZmME3CqR$.=/#L/_3SufS($*>DK@:b2r#R4B48elUZ^==@R);"5k43Z%H+oJbif,Xu)"5fD.qs)#,5dC,9[p43G8Y:cQjF_G
%$XXFaCn$h]Mf9Ce2t]$.QIEd%P5b"qP;/muZPYmZnA[8r<k&*LS?>SqR@)U\1$8+)gg#0ZRD0tVJ"Ftprk?7oc.qZM+`WtI4!muE
%QV:)*hTt$73il8T^)t\Q4h=]c+/[nDr>f8:+'^5)R4Kc0bH3Q<:90*m_[4GQYma\iG`.+K?Y%@WZUV^bm*AVPk;W41=^2X^<_p&`
%@4&"<H7m)J'-[93CNV/WqM)+DH.8f6cD2>G-R$Yp3A!2Y@^`l[Z^V^d2ZLd5qaNN":l9lqSr`d!cJU7s9+"TGo5e(2i77K\$TbI,
%92C!7j3"9W(8[(AK.XIlXjCh]*lXPd%-OVpAQFZrZaRjD2pL9<O!$"hp6^$/e#E5*+VDpbd)i>+k5]h%CM[#TI(OCTm&7\snUI`g
%J,:1Gs&S=oO7917!=6i+:A<'Er<oH5q%HH/$MsH"E-_]Z-Xf&N[X5-2hakrXj8[3f*Vc9$<J2@/s5Y24\=Si3o!W+3\qbdfY3jp3
%LLWE)5m!6_b]%YSoS7%hY+BuI^jb@1OnZW[?dI]7mf<5@a0aXFgnuf/Y5S\(G_jRrU$FC"g:rRL<[mDZKbRc>'CDIHC(,k,NnqN#
%Tjqdt6R3YtFpT`jdrib)o:Es<;p9@Zdij*')"spo$cGCXhZ")m)ZJ]Vs#[/*&T@Ic?&U%XreEnCdX#c<Ft*8LfFF#;;7r?r;uh]8
%Gf2&TS,?"&"Ke==O++K4].NC7s&6<O!_jV"9Y/`UNS4qIQ`<Cq`R;ks"JGDH5=;k$!/b8Wpc70S6=\p"r`e2`djSr(E9Uo75?g0O
%^=O6mr2fSs)\\b[1r^Ua-AVS:#2t'W4K2)F*IQm_nqK):$R@lM$ssT@16>.G^+pGEFs*@#JnV2h]510R-]2L[RpN!hr,Y2`%2kI,
%ZLPM_eW<InObLD+c?qGU[F&C7D?!)30GR\rc1J.<b`4!X]oo2k<Y8UZ<&*Z**t!`L];5EFH?1ogVpN1ATD;CH_:bI0n(ss.9a7_3
%D19^=Bkb,c_a_$k#30N<i6im8=)_dS[nI=ldN!idEGlmSVOQ.)e0]&8jV+!oPZF3T:W@,.r`ko.Y:79oN6QOT3t@n3mLTGu9&j`t
%hf#)^Xp!0`iZClh$phmq(I./pj66gn^pd%W4PGd'[1:U72,)$ea-4&4(F>5<18hK+ODe:2>E),N&?Yq9V0?:1G?`nPC?r+O)molj
%,@gB3j).Zk2Z+eWH)PB3e6RWQ@F*+sqnpm#[9q8-2;gJXGM[95<1;ILn)p.JAJnNp;jKMY_AnfK]$bJP$bsAi+-0RB4Ic$!T_Z>l
%7(hM"8f`rG01Y_Amks^bk6V]I.).QS8^LeO?4Vk99iJYb\;ZlW6*EA/[]?j*8ha?!b8!LaDXO_i(cM3k&q9Gh*b.2Z1V([=V"NQk
%&<Q=?HK3a<#MiF'fDlgJW0@p5mH&ZE?DA%LCQDZ8rn%WA]E5]F0k.TM)Lc1!=tE]95HBF3&-ir'%f2/NU]7Z_4)XsRbjEoL_s1sB
%eJq3EA8&]Miro'G_]B@[&sUbc*B&Eb,6^GHKg'h9(gKc2AGO]t7_Lfs/&-I/<1`7;=%a^=)>/#]T^&c/!>6%Y_jjVH@\uqWpkP,L
%kBp5lDr_D>4eL'jQoFAjNZ,$4eKOPfh)>+VV#gObm'uu%Q#<_X_J+^-X"B>d9uEY<c,qs?:t;eKgs^:V4paJj>Konf2]28#QbGi;
%-F=fqdj$?!$knjob.eut;&XJ?`m7+InqoGQ/[+T[\Ld*48$/)Qo@l_Vbp`K>9p+c%FTB2L)F3S[NErb?-Y/HcrYbu1HV@p+Z_=fW
%K!p8=[52X]@-1H\#q&QE&1./uQE*5Y&5Xco!`_;O4I4R+<jN#LLfK8G5ZuD6e\Qo7H;`#!59'PB/e09\P4R*tNkhI\,J2cXi7<Dq
%[;Nb9W$b,NDXCGJ)#dgpr!K)t&-cXJPU,At+8_j@$_ju8>-HQ(LQ\NbokM+TYa+\Ml>;o996&2?IB(tXoISB"l[37KqOKT(0D#E"
%D5JZiN?^C:?i]bG"f8$bZ)&:e*%jO4_esD`fIGI4QeEuYn-S-`5VXGa'lD$K,?;8'3!07Zc^k'XQ27.[l<83"98/X@VTU@(U]/Ao
%Qg_@Y'"Vbg(i%s?Vnf#mo=UjpfVFh_+U'feTI8G6l0#$:%)rcN/\>Z?<[18TlJT$0CfbuDk1Jt^gO\c?o)q,`X&iap[;H6E3lE^d
%*$3b^[n?9.osi$?HG8-PJcVH6D.n2!L@V(ns'H=T-T7`J71!CHI,OVo7@$EK?Hok,Aou>7mqlOOT+`n!e9\7NY;)>r2l_!)j(08D
%!+*%44VcGahM)T=WH%+rhSp_c4)\Kg+d7LKUctb\n<A0dFAan+d:%*`V'S&nWX@j?$;7HX(h3tZ<"#-UeQT^L:=Z;f.7RI()YLnM
%2*5I,8aZAsNXA"P<VEO?d/X7D<eEO*X77+Q;8UuD[+ZU\@s`_C(se"NR++1d?^'8">)Pj7HdA^m[8WR(X8U4-AD.o).rKQOj%3#G
%X>A)P>Da.j@L$i$l^r=[Tj4t\@!"FH)eBHKVbN,kABpIqVPSt(M%VSb@o*Mpk$Yi9L5)8=Gnm+>8_nrAlV)!A@Q8+&,%r6k;J:lI
%RlC2'ER_j+N?O&$*P`jA=^llCAi+J.a1lrrIQs9;3_>nK>"6AY/#C/T=GJ=7Ka1YaX<dLL6ZA8'=pSb9l.u,3]=loX;["a,4/1da
%j?Sn*)GD-Q50B2/7m<FS_=['l5mF5Tc-AeLg,NO"NC5Pa$V^-8W,8rkl&K7VXZ\[:UQ32WGHk?m6Hi`lh`WM-?LIFUhU-e4l*fiX
%lKc$YR@bRs\VW4tOD:GV'Y?[V1s4(g\9OEfilPkXGi;lr'J*hE>5Qq5=DTGZj$$lQ@ki;kEH%'Z9l_JPr$$cu&%,1i^7jsbK1;hE
%UY8A>N_#Ejgr`c]?fmTIc(q-r4cG^24ig7@-O9SeLo;nhn-QC[<bk%._.BqX!In`e^lRmZi->*N"sVQhckOBcl7hQ%,kf?UIbm6D
%K;_Eh1fMSuSSh7uaYc.ZOV&rT16rXI>[_Pe))5B&_K%E_PmUsKWRcHqa!0)iMP<:VQs(T+[eld3GEc:?$T1!U>_uY3U,K[$](VGV
%ZF6O)XAI[MBGi9mrH7;]kR,hVes"1oqohSahKUfl_X15L`Z&J7RHQB!FQX0L"\%R+k$O,!6)/q\#io#<LiX'mp8`>[UN=s\>u\n?
%jtKb]k?h4#V*^f(74%j$`HO'0.hBWab;.d9/$pZ@bN2NHXk&=!.,`3iV,'(aK2VN@$ljcK3.9Otr&MbfajtiVYGk^H\AJV3%e>p*
%*>_/;%`HWIp$p\i9K)R?1]oImqp"h-oTU6IJmLp8:71HX\9^/i'Tgd]LN;+u[KdpKH_F,\_BcQ;\US:0@Vb6$a%o%b<3,_=I`pj5
%$a>8oC;5m`E%36`iuFFUh#BU[rHZfSj9F/,.([r(%V>M<I4$<\K=Y<1J3Oh7h,@.9;V>DibidgkW+5V[!WOe%nZV@/f)r(=lZR;V
%^[W,/#4M2s$?!-%iSW`2[9C\g^jZM/^cOLA@RmgqY"?pGRVPq!GJA)c'JOD^COGMe0WJF:K_IMRWk/J+nWCe8^__g(Eo"'06Hqf6
%e@EMM4o#e?Q8F>fC].j@2)Jf&E\mn$"`Zp7ooSL1$8H]`h29`(?i"Rs"rYGA/"sHifGPb"cl>d,5o8bW/*_'t*FrH+8ks(H.PJE)
%DXF1UD*uD@B8>r5NSEVfRMUAKU=kYCe1H$qGBg%[;1)_9;Ys`f'V`J)Mc'AY;f/u@P^S.;"F1A,7]2LUU\=&F\oP[-'(KXW$E@:t
%G(tc#h,uiGBAKhu9-T;UijfZHmPnn_9Tk3g'3`0#FmUmr#s&0/9KF)T_N\b/=:ZH+!dI^A6itBg_UYL8mF7U=l6c'00RQ9qA$sTF
%BhlX?!2bSD6sCo#2OW"m8;VXKN]k6Mlud&NH(mF4'(P\\?uqcLc*>C&r0EST8CaKM2/:@PN?9tR3dFbo%.@ks`"kcA`7>)@c[(I'
%:>k=W/nGen]0F?&!g>j_\d;-&o0agn/FH+7&H4H><h/]EME$SGOt-%q\1Amdok[inbd#'\b8`<^1R#:B+aSm9UJU9#:TMB*oiK$A
%G8"aoIP=QuhdmW>&qrQ^rQE?:AWbIQ%jrsDUjfj;Z/V)GBooT)TembZZg^&[1h<u<8PtVeVA/83]6@p5[gYFk=VUgf;dpLFmCWV*
%I<I&[*CQr&cb$*cIK#F62fTg5h$"L-VE!3:>BaPT60d/B%.gmpaA3(QO_q:CRDY63\a]#C=j]4/rbT6#9Vr-g.n&ZEIT7`+5O59.
%mqu7^DT\@_Nf&11Y#U),f'2,lP505"hPWl5miLBDW4lVaDVWuRh;7Gc[P-4X41CfJDlkSJ0/fm,_-Qr_ZQ8qgqUV.l-SN`Bl]ofj
%?Z,O,25e*^^N>g0C#77E60Wa\HptZZ[IH-SE,0Nk2qT%]d+;ZmXc:K*^23Ii\:+ACF_,@;C`F1ZO.Xooq>C3_fN=F8#8kf:Q'^'m
%O1W<XpFk:`a46GA]3?-Q<JD<NT%J6VjcXo`h=gTorHBqhktHGQRb6A#a#eA!^Adc8E*UW%9cmAP\,KrSo<S:*COM:_5:WcdNQTGV
%oeRG>kZ.TdI^sRojdia6g1n<.5MNmh(,)2=/4>V=pI[;Dq6@@'o_pr/&PRLIr-J@M$\."0;;/)>h:c1X^Y^U_Xkr=38\D7X7kfnr
%IJH`WVe3VK/manm)k2O-j5-Qu="E/LD&)NS.2NquLJQbj^N6YWX&UhCYNDUNZcWFnRV?P;Vr,/aD8#c<H%!<4o^r,ts3^",TlP8D
%#9rYFCZG5E!Q3P/Dng*'3jnkP7uq"pX?#[oO.2092E3K"rRr<>FLf]p/o.<HK==*+kC1<oB5$u2AoXp[9P,q"0<_N8[Th$CS)a"3
%ZF!WegV!,qB>q4HC5(*m-i;1&VqCtEB_-*>e%1!Sk6pt[UpC1P4g?*c6+20Hhq>1p8?+&lQOiF_+eWc>'odXPo<P`(h7Qh'p#om-
%LU$B)YLEq;JRPq7gNt:Gj3a(]VYFruh9HDb^::K?NVB<"d.]eWheS:E4P<lb92EkUMiQXWhV>&ZJ+]):l-C4CgY]I#0[OS3\Nbd$
%_%bPmj$RY50F;@Ig+Jp-\KSJ2C>'csn$U#Pl2.7(g"M?+44WWp]A*&DS(F.U8gdCA`tu-liS\V@A`6`M:]q-NQOe;uU\`$%pYVR&
%Hn'-p%8#m;bFgf'Q1$r$9`*0gSK7+IM58L:otdCNG;e;t/n*'[bg$NAoQJu:s1H"pmpE^^f3c7=8mHD=B&<e&5$WB?h=\KOW>S02
%-+tQ=B.e?2_e_G]4BaA(>&7DiDQUhVltT8Od1cDa]<uW@]NmLG4rhP@)<%GZHHH-[rEBOh7[s)rh^h/e2*1@JjlLj&#K7)JnDhfn
%[e[/WkkA/c`kg[EIjU[04uk+)Kp1\YA8ZJ]>8^H77D?/'h5L`3^q&_OrFiqom!mi?=Y?:/G;]*RZsGB9gE4M"-LbGf]4F3U(NaO*
%.uuo45<HUN3&1dW#3O=c0C<'u2.3N;RqQUHm;2`,2a6,4],LUT1>M9Q54uQY)s41,9fD\Lh6UR3d'Uo:Y'rFY+5GOr(>uUJ=MNGl
%SN_FO6MButj6%MVb>HSMK2"/[f;6X-h;Lr=>r_]S]X67;]NjS>SDA[,(QMjGcaVaPmo@Ommd'U$biU-ekHdsHhTeafQ!V1;YJ1=^
%O1_%;jc=b/"B(IbQ(.#bTC,dr<^+6)3,J7/WpO+oT7JH(D`WXi&+bJk+-&B9N+11GK9NEIkMCZmo&H*k>fag0V6e&;Y9B6O=>$4.
%\91)nJ-#'p5dd]BaKJJEYeanlo-g4q"Lktsh,ub@4U+6eIKqA%rpHO/O)9Mu/KCm/Fc+H+lT-56$_&-&?G(Nk>2J&>*mh*Dc2#6e
%Dh%\*CMCER>g"A,4p?i/\5/S)c)nIQCX0c&Q\Xr"l^NKGn(-;8rP@<n7CHF%CuJ_s5gn=qX`:rOPcZJQTDGc>0MM6dhNVFCcY^%N
%7J`2HBcg@IfD+ZAqV30dLp1aQ<FKsVlr^<b6iH(UD[2bJU4pV\#V#RZD.BVJ5t?;>*&-0gQ9Y<qrYHO'"K-<+F.u5K2UG<P:BiQ8
%39.B-5fX/bT\b9/W/i?lE7.=QdQ]&*Yfidq60Y-Rr07h=)GlVV`n>>uG0W$Qqa<CfP5<(4Wn7FoHnq#&R@+ZG":PrP#6+tn'm*3,
%&?3M\Gt`Gds.lgqTm),\^bB2O5"QC"Z#&B_VS@Mkpo)"nKqp#P7g@Y^`YBT!5[L1J/$MUAf40gkBoo.3irEk2]UqUDLs!Rg4rGG4
%0_NPn*q&'&GWNh%>P^34WoQmIJ;W-8=Sj?T?>>G;-mYb8L-NWZhi)MO("eb-QIKhRE\!=j.l9Y:'EP#+ht`H]CIlPB3dNYl,b>:9
%D>GL(/.ZTa4kQ[I3"(+=*W'^Q%*\Nk6T@E9cm]s+S\K]*o0k=l575GL?ZaFpN*X:S]1]a`5Se.g<[*jWl_Vksamf)aeqS?eld=#4
%pWoXR>J7)U(eUS89r$3].+">?n=TuunfoH+@icmP0=L9F&/.8&PaZJM)]pTlJoQ)13FrM*PTE]u!5l>&kF/``\oMDK?9J0pWl&YF
%1^]#/UGmn%iEglo;.XT)r+i@GjXp.9c>iV%8C.&:H_6=J'_[I>#8GjIW2gr5%A]s?SV;&`+qSC^p?&U;I"$NHHJX/H/ZFASp$Bk.
%iPiF\(dj4l]ihr%*UG`]+ssDDgYg4=kP`mS5<cIlT3"k1+]Ad8c#MTfBtPjb]cJ/q2%Ml:8A4ViaFeJ"^\qko[Zm41_(]W4'F604
%`tS";L&H&Vqn&&$o=M]EERnGWLX>c="0t&bjuA.h0$\>l#b+58Hdqm)FG0cJHCM+V_g^ec%\Ap1=!'Qd,J5q+I"ME:s*jLtd>-^b
%o?$$8_65Pl6E/*R8:S>nABSZ8<'D9a,8S(n`Z;-9<4M9&)-(:3Q?1i._Sn[bK7deg9K[q!+IjB!;tVa^08b9XrDECFaV1kbqnY:F
%XF3UjoNh'"[,9KE*dj"/0LF32jM9YZQd4GMg'+N_0'No34'WLLSOJn'E?k1"oA4&IIQ?Mn?QS&QmrV%VoHg^.8eK]\\\%RWF_[3)
%gTM-r!1OMd=/$6[qQNqDrT`T`\b)OIIgBT!HV\]88#HSqji(peaJ>TM$2rm1ntp[%q:>D;-bC`R;SKm+JW9IAgQsQ86/[63(+AW4
%<b9!_?g<\j"[Dbc")Ya.DJA<5?6R-L#'CMO$55nDm\*&Loh&6D?N0VmVf/V#j9WfOf#EUY[ir`'\/"FZ^MpParsl\egt0$lh"$73
%`.Z1S,JAY[G=Ffi9m_1@(_N[Zf3i&rR'0NRj*7eLdUT1Z)fP0-Q(j^b[;KoQN=NZ=No*f#^^06XXo*IfJE]1#okeiYe:I;"<k3RC
%-9'.eH7[TKm4G(O)keJ:GYQb2]5XrqC,V)!Wj+;m<9&$6kjj@Yejd2\IFK?%q=*KS]ZU`6!2\S1U;krQP7&Q`o&bf-HrS61elT?3
%?[]]]IFbZO]A+imC*JJlC@=[%=^$0eYpDtf^Tht0q"bFk3Y8XP/Njm3o\F!b4hn_ehLC,p/JO5X1:R!J`^_0GiF(ir6i0Ps@=e'E
%5hUAMr,B-rhu.5+S38qshcbM:<kIAbS#?&<.Ft3?Mf5bGYb+eUME_nO[:MnlLGe#Ka,Nul[pPgG_nK&(miY:W]f:Id3uHk#gSu6G
%kBhN!k="W`.@hKGYX#k-dX=,*=BgJT410^lK1H\&WgW$CQXF+4gWj3oe_@r\AIJ1Y>E)F.F*Xh$lAZ,ULML8JRpXu-i;1'@a;ZGj
%iVr*3)TYY7+bVG>hipnp0%Qbll;)l9J^`ek[XL?@21cp3?_`4"g,mWeB5^iS%+pMYg@<u@X6&HGpE9#G40@l65p*ha`C[gJh/9X.
%1D$"uO7ne1r=<*O4cdRE'CCT7d+!&BG9<]jU*f4!qWX&cPE2ajc22b#>\r&ZL#Z'rD7A:^Y,8E#BPss@^MXY4<+?T*-!K,L>^QJW
%Pc+/ZE-T%g,;(*_#0#`bQ\2F5nl""eC;8XX^+-jFlA(A-oJb'-ZhCB*=$&Os2W*c:)#(f%\HU8HHX0s,rj:ZJqck2"!*M!2&*!<"
%hKX%LE)o$7o>Ph&Hheig8^3#V=$.J@hTd$FPeBk^&+2'@TTF*[S?@;,Ku7pp2u!+(h4sP_SU3kWiM4^\?b[+e<47aLFEb69])?Rc
%L09$%aS8^o5/)4k,Vi0ir-g/jW$PuL_G.?6kN<O.H$6)j/:<$$EGH)cKB:P(Z/q;iq0]m!_Tm/;nIEl.o@nF-d+m2MS"O,e@P7=]
%[Bjo?LM`-N*P[#K\[D7/LW`*?Xc@QXTo[4ejo+00D=b[42pWOp2Xb:q<Q'B\?C(2TBpd)W=-0$?FB&LO\%:cFT4<Ed&@RNZO?n9d
%Jj.bRHg=]-_2!YOiPc%&=%7W9i`3ZkDgO".'b?\d1)TugbO`LfF-GDXG$ugLl`Y_UoD@`OpNu/KHep6C5&;isQ#HWGEhV$o9f:FV
%d%C[&K&HL+inESDM\hju4GM<l+0CiQf\(:j]l84#EqS6D3.g0Jqf019AD:GU=f&fHCFNkQ=pGRg3aWBEYi\S3p24B6/##V)/#._-
%jXk=o!fZT<Q>\ok@?BZd_2g]!1s#FrqY8Q?qDB<H5MujHF6n:>b?nIHOX3+ULQ1lq?G#-$I"$49>WR+T<*njX?t\=RcF8c"O(P&L
%,!(=jK"-^S!Xm<$SRMX!qeU%h2?+eE(i4>5(Q6M0U",/8=112W"`ntdc-Gn<oF'@e(8[?U=SYK]!"E95O?UlcAQsY'G+@1i]DoO(
%M=lcnpL=/rRTb\L=d"4u.3,AgIbju:XWSb$oMY?qp[dh$mM?[mk&R7S*`gEj5QnO`;LCf(SJ4HG>;&YFrJOB=Gb<V=h=AGg.lKdc
%jq;2C>:j$bgh:r?[pgB(If;gU<NT7`e]Sm^[t?e-/nq=9n(#b,b:e$%Q.%"aY<Up\+'OAne(ts<.!>F\q0)YDqcsN$[\!/@q!&al
%)]Ik0Yuu3-?LJsMN^dsZ\:_'_V7h%n!.Jar%9%)rj_lf=]_&.1Isht<?,`0'b+3(7b<Wu<\ne^Ee*aQm$13cA^&,*6rO-os]D^rb
%ij4&);dtofYMKAnS'!pF88j@e`c+?OF*7VDI.m%7K]@E_Hm_Y.oR$W;qsqEtYH_r)[NQB;KNq+)WC_Hi"`p-iBl/A"I]ui+X1o^A
%ShDa`EBSH*Y<3P'eM]ii42ZDl\)bo^EHsDbY,rrQ[j&]Vhl3CCXV>)+49;'WCGXL#59C?B]hc80&[d_Q5hJsr?@VY@FB&85<H"Y.
%)?/@f7oc3'2msH>J/Z`_Z(tZS!akJH\TE"uGK1c=(d9RE[.8"k@@CP)c@I3mLX,bJ7n:(`oI.j$j$C_9+Mk,pbkq.H*ddWjXl/UW
%L:@`p!kl;4qlR\epU<dKSq$Q5C2A@4*AEIc"Q)mlgLi[R,bN]Tp!`kd=[0rF4ik@/4Y*-5^T<a1mPg0D.sa,<M_I%ED`@`8]sW1F
%_LO/K]-#khcTA&FKm0A7lWuAVaa><[m?d:O\]GJ#fcbOsmK[">/7*_Xr)#'dD"Z@d%S#8n2:8j^0^l5F.on;r&"@>lB@GLIm!LqM
%g[Rq*eDpmWs/:mjW`j@Co=(u>Z:bsl'CF_QF8YFY>.HI>d.6=7#Xe$`QHGc89CSn#&%4,M2HN?"''\s,N8;nF\/oGjiKd>_qYKoo
%oq79@Cj,+0V/sUtM?_+F"Jl:th@pI3Q#HA[*tL!S`#?b1I=JT/Zgq])(4<0lK9@k7$bZ#m-5,^fO,)%SVsbR[TQX,&m=%%ZI3XC/
%X&05sI0PPNiaX\*X5uEds7N^r&.gu.KDjfM2U0>sWTp[RLF?/lp7$^2)Q<"lQ1>PlL@"d0iC`A1XYW\jJN*!OqsBHN!dTUm;T2e"
%FRD(W8Lr]qGhsm?Fh^&56;q@P>?LlA(TY^!];'cBCZ37Q#AtXc\>A-_:2P+MX1SDU3;/;rk8WNHQ+-'VD#B<RGIeAf*q&5rnbf,/
%+4nlqd%pUMHM26MqdZjb>=S<Z?^`))KU0=S;m?86qY"JcJl&cO)Ih`njnlY_j_&EpDh8D_h;*JCq4g$;3co.^GGfVq;Q"@<n+<LZ
%gqJ1I\UT3^gh*KSrl*REpprL9*#G.Za@to]Lp*p]$f+.E*6aH;@Or<R[Pkk4flfE'a/nppr/6SXJYUfIRd:JWa$C^[Z+10#LSE:h
%o"EjO0A,QS^NIkLCYR1)kP"H2LQD;WXjugHMb^s3f/nK6LWM`tCYcF%Z$GZaIFO`V%r4C%g>19h\U<^DnKEOLTm[lCJN'L==DhDR
%`rCAuCtf>9%P6!ZSY=;Xd2dK9qX^@[mDR=.HI;>14_WC:[gC&u(b3k`7%Q/:_T,KWO$Aj6<G8!TIgh*h[r_'=l^!fW4T%DqB-FL"
%qT&Uf;raDI+BRgSp;'(FQui`/S%V^;4i^d!5\j+1m0&lmnLlo?H(Nr02Y:b1q`f'1L#/1%K!IW-@s_7:?NT#;J)LROr*L370?<&O
%TSB.iaED31pk`^GB]_!SAhZC:Qo`Em\sAh0/]XM]%F*#\L1VR\a;_!jcl`PAnqM$jCYR&pbd.I4ed7rO51!f-$m5#e>h?:O=WboY
%$t^_9nudVKp4WHb9nSW<k.pPrD7R;\:NL>,2&#g?*'OVR2#.h`-62JAbR=^)9uCN:S<7]WL>`]][(PG`becl)*!iogIkG?)Bf>Y%
%nph:D$%0kqQW;Xjd65qnA,9Tied"6j'`kVQkAe)tH,GBiEV+??kD1g>D[Bf0o]QS91hPm-8TU%Of/.*g1J*=8GW$2l0K]S[_P`kC
%gN3]sc#Y`UT3#KfmFi3!!$u#,:j"mtnJNTG<^JAGrkZF^/'r<B:KMe,`5e<SYA%^UVSHEhV84"(\ZX$WN-UA3%W\UcY%S/Y[;mP"
%L2EBLpnhKYN#3\uQp-jA:2#<,DM337:f=<V9L-mh&Ue/>Gi@_*.rT/hSf%XlYcIiIZ#DOiRdT5W=#YgAQq1uJbM+)*[UMYkJakXs
%VOX18R1cT8Lp%:EK9("aJ;%Ll5W\gsBWeoN9TA9H-PqA?gYcJZ8-T)!ece'Ak]mOb)hNVdRo1pBYjN\ZJi#.^dj=AJ]P#T]R$Dmc
%$=O,4.#htk94+(pZ:E,m^J%q>Hs1m*7_S,5=#V\5E8WAhAIc:a!B,rWRKPmlgpj3tC'_ss=JDKt+]3@-aD7AbE0u[V?)4Y5e8(P+
%JLrK4eNk;Q3-HA0U_ebGW64+8+"A^FM1?mNBHUnK.e<r.P#5*PN*oGZl%;M<)$/k#b<0!$PUkgWC"uGiQrH[i>4JKZ]nCrV8.s@,
%m$_>XF^KdV4:8:o-CCPI,`j'd&9KT-"#hHh<<:!FL?WpI1"5:Miui[Kk(-&`6D[Anc2A?R!YB=\n<sR'5*u]5[4TZO9/F,TY]NAG
%5hsZ#9Pe!O(Y=?O&Ja80Y!equ-;ICa)AG_q!BDu#GYG],Ua6Q!b2c1eN1T'DjEU4>4r[kTZZI#]!rZP2p^;.#_aAi];MB5f2j:BE
%1rO>>):29;08.dV'K)*:Lr"W-$Cq?:O_2[5bAfjBQS:%4%dJnI2?b*%T0a.u<:rB*5T$`QiRS(sW6)Ok+L%sSL!q"u+p9\b;sL3q
%U+hB=\7JRSSE6"i'U0!h7VW3hd<%OS0fI=;CR[ho+goDCm'(M1,WMZV8bs?(m>/b4&s@&cOt97`&PB?1$"bd2rc(<)RV#u(q9WeN
%R4F!?'=,_FCMLRLVCi0Krh!Sgmg/M_76=W['"'$c=(<7Kb^DprWi&M\L_8f!#;^5:,3!"G**jU&p]>$"Cbg$$^>LFo+elWu!%R'?
%&cjd2$X$]\(R&VE:_;hd;iU#sGH283r:,:+IpR$g614\5FL,L?2!.&rKY]]Z#!MpaBqU*eL`jP6HJq(:V@4Y>2:.?$O-,N+!%g#2
%esMO^4hs!B:Rt$aW)JMf,<O(j."$nGX*>'[$<SfaGF3tI3ta0GGbmllDM0Y+D)==0IIPD'0QZ8Aj^Ms[Q8Da403j.1@&SQ`QD^Dq
%T1!EtREkB!">E]Ad(5VT,mh#7ad2=l,DbrklMubNbOGfOED?duH=YY_Y[O8c2:KB"\4)r+8RTWMU0u.K#*A-R,@tit3U'uU/d<an
%<3rN8i7S[/RF/Yu7GZt'8Q'!O]&Sl+33MYBm$j)QOUsd&AMD7[/WG4qLO)[HE:G'M80E?1(5*Ni0P>KO[UmKf4HE<h/g_3)%nNS0
%-r]2qI)7?eaTES!pgBAL3$XO8\<%tm:9pC\Krlkh2&@O&.sPqd;<^rs*E#"$ZN>-UF^8]E:-%<^O/iL;K@7[3Su\A+hVKm7C8:K2
%2fo)0W#WL=:g*@/*@Y!cGWh"R(e-P'-?uDC_$6%;`8o7\5TA2k++VoK.I]H-dTfTS%n+EXCe'#NI9].iaj_a(G=8@u5@S4i.2,Di
%:&tu,3JHN#a#j*$ALADHYm<].2A^0M9a5jG)<`5+_o2c4(8L_6g"H[XW'q:P7_S"G4VQiin@1:rKdMH_"<Rc!aA+O.JKbctBu8B&
%U&LisAjaW@F;fpRiZ++n/:#2BW!##o0bV^+0]2&#&l3<&F3b#IKUSX!_e><ZM%M;U+:0b*9R"J-2@_1uA2+Mc+:8<&fUh"$-Jcna
%,)L$%![WnI'1H<`25?NC?qILn1)5Ec'Rg-M'opEVLtRLT1#X4Oj/HEQ`UM6SH9+3oXp]5'/F6T]T\0ki</AO:))Q/ZK!rYGL9T=K
%%NobB]E)5'GR_O0&-e/]d=a6KofSfs'%k1m(;W$Ym0M/1nTb*X(JHmt"0lkLblTTo"Oe#69;soe-p=dVPh#q1LSWKU6HI43oX@Fi
%-H>'c?\Sl>DsAIm@3eSZOrGaG2s:L)n,S&C%n#g41^L0kC(b:(O@]K]bRsr0+WH_L$,eYA,8/YEE70AQk`dhH9QN>t"(B]s0Fth/
%WV`:qYU"H>"r=kfO`[lW4pu("RMBBlb[/c>RR;\&Bbnhppf`G5VN`Q7W%@RX.57`m[V+jPV@`?G&nXS>>6nt3IR,H#9`MWI_"<5(
%$5d0$#h)?/0^6HcEu:d*</=k/0M!&!et2*U_X]75C52!D%NK)*>Zbk<nY``4N)L7_$:5hP2/Fge';&No:m+i!2&-[(*uLR.<jcL4
%.6`E-75DFe!S]"M2V2<Y.KKa)LZaf&`+8fB$W8=)`=R6fG_:DHTb`@jY[eS9HQ(OW%EjGB(q::#HQ%W+,_uJR-&bJ;A0`41^>BWp
%<o-.Ucp4c%#af5W6BRXNLmeU$_7=QiV,7GX0\r!4b<.-\K4G&,=[i-H#7I\9,#IbhO9&eqd$;T3_a7[&7FF`;V'>`X*S)mCSI(aP
%Up(HeNi7=r5Z3P1P&X(#6O=MYafm)G5W"g,l;_+*#`2<X-aQEtPB:h<Nmam5QV:f9O^MJ'1i*IR;IqpY%?f3eVHIE";p:NG_1C32
%E/kMh.`X:n8.!B?(;_rR#Y>^I02P,:Prof$AX*$"TMhF5&MV-52U9de5`cQ`6>_Z^P#V7$eY<bOhag-QMj4IucC<[XBKeR^@9Cba
%Ko*>9i/'G>FXcg=:[8oK;A9Xfgu6ZQgQC,C^hHJ-Bt77qU3=?s>'^GV&ojL-N!Z&5Bo-#@ZI`-<6@j=hgPYQL%*ju\Uo0_34AX64
%PGJRc`5+&W>lJr7T=!5Z<tRP6f+W8X+&G?e+Y]8ah8J#g(i4G!3JqqlJ1WHe14+mD7D1tfS%+h\Ho5:ka&FLS7-(!lQ(VGglQ?AK
%2=X@DQ_^>,;jp>:6.@;2o15B-=F;fk>#^jpm-)i-g[GW==t!;Q6O'F6^g^tBBE]`.6?,<l%e1:2"sI\S$;s8@;=K`A<%._uKtT/t
%#ch+84C`*8$=O+dDjX444]YXY?!hf,9!(C9!`WL4*F3193'^9]@!J(1EXuV=\75sHOAb,k)TL62=:EtETb3Q\4B45l1-+I$MiC_R
%-?MSi/2VX,Ro;NVgYdBe+V[)9CNFBDVdpJl5iMlF6/#FCT-Q4.@"_,1LP0[Il[r3$MOBY>?k0$l23Yl[Mt'o/X0+n9Y]f5d9f=?n
%I-0-2]9Yg<FVSHIJt\,Y`7HmUJr&"]RD_@N=MRbrj'\"t$R6p*&VOt"+kQEB&gWTIQ#sHmCR7dKM+P,@'J$7nRCFN"rY_aA[%@km
%;[>8M&$01WoIE4\j@#Ec%RVO43Mm?X1$44XDk`#^#WE;-86^WT?<!L]`rKM%6na&o+rYj3&5!s7TrC7$L%[5Z7CX_5.Xd/n95Xe1
%9a^CWOIX*S%F)8S,%Y6;8r6XmI0%P.dbsGQ3!TNhOrm@G:lm)hMUs@<i$C3#]bPE7n9>Z-;1,9ERXo(+8c*#h+9l#Jp*\/TG*lcs
%!D/BH\@C)+MPW.(Z:W1#/'63c=i<_A9Msao<KDu@/Z^Hgdj,5p'D<]b8CF+U<P,+F'i6S8MB?Yh0t4*')^*W_pY?8P&ePR-J)a!8
%idE9X!F6[_=Dcil@T^>_lE7:20LS;arj-SW!buKtmm'b^@(Kj&M2h%gaKc6_!\R9Ue1LYWD?/)'N50![%b".TR%Qs(/F*==1F](!
%0EoQ4:3r9J'?nBu70EfaP_m]g0Wo$RDGG:F2&h'KXs7=>?C/P<Uk'L+j@V7?(c?>e>TTuY^hH_pmWl77^hV<!BmfJ;;dB?DFU=i>
%[A%.6F8X>n.PN!p2$N#.Ck`UD3U.:jH"-1OPB4cXPY39pBle\&'sel7ONZYlg2Y.I_A.dheMUD398a3h&;]%B,SNYpZM]!ZglaW4
%[j2G!5+/U!->h's0XE?((`eTnZkadY\IP5G8>Ui>=@eN%R>f!j!1O25hSJ$H*+Tnp+:)hB7Zd%oNAV'm`.4KUZ7SWi!XI/@!_-0E
%%0atX=Tkg?R[An^qi=;k+fLYSR'^Z60FR1Z**Yq9q;Bsjm0"WM(nM$'Cf_EpeMZ1C0N5:t6#56)I1+;E)%]5*-Wc'r-6AB;UCF:S
%N4'g#"0[;jUGVG&)8^2tnWUj!S+7MK=g%/gUYB%&^^t2a(DO7'RXc9g$t*J6LP>hs%Bdsrh/WcK!/&H/A9)NWI.#D5G-8<]$tAP4
%cKtpE"5)W<7`T'W-`?5b^mM846Y'+q(-u%TP?REO;%fP5ab4g-R-5%tCk^-)Na'p`?YN6(6la">B*nN[2($>J*N=7U5,+T`.p?_U
%I$Ot^G2<p<]u\YRc*X3!poie/0#9eTb8*]g35VeLn1^Om)P88l80jju]5*QZ6GUN%9;$!5<6;ou8iK/^_j;YpaL?>+]-8gabE</3
%DKcI#%Ugst*/1@2!j%fA5DCe!bk6Y^FrWMb\U9%8_*!:XK5Qi[2Jmda>'Qo`'=R._gt"jU>SP%mH/,/&E(,:oS]`op!T'l;lZ4',
%M@q;>BtBIDQIp:L)WVe<:WQmsrp#H!OOSD(Tb\EI0AA`ngog+H^ID6)^p\$8l!#bNFE)f)mXuRXN>nmc)lS8ej$#HSNS:umQlF'[
%W'b\r!QAe/XcMKf9I</liWYc%BV(<)a6'W4KH$$4q`[8h4b9d#n,a1SATPM#<+FleQmO4mR6FV5&/dh@R3jJP7hm#[-B%+sR":/L
%NrQWmlaXQ$#5+SHgCS7g@c:<=<p[?eAsV(-((3(.;rJ8"-7T@`bsA?023^2\26r/;'+<MRN,R!M\@5"Zj.0Gm7Ma08ZU0:QYIJ&\
%VhY)"jd&8$<Xr#?*:)[(D.LI[%?7f1@K@?*>IR&qTK"bX_nE@Q5H4jEee5'"L)0r]TJa/;M.>P4*(sKW_sst0"#)Ru[*]ag7,M$=
%T%Z&<A5Q3ScSWfaO)WMeP%H8]?it6Hf$Q)nbVa&I]&[32:MYR4ZsXP]Wq1ite0PZo@#!^`c^EgMcQVe^/45NM_?F!K11uqY'Z)D+
%.j:m8%=o*^0dej\9g-K_"Y?SeQ%K&f9$I'ic/`2[7l.",5n$0YHmM`7_SlG&%G`?YXfL3(P;fG$-\NWc)-1PU"naG#Ukpnud&06)
%RqK,&)\!722[HZ_^73kFknE,I0Lad,n_5jAg!k*)AoJ22<Z%]\@Yn1j6[Y_e3$,ms/b7mU(L0rC&B"Fg%\Xpkdbics!rN69CW\F;
%Nc.TRP'XjI??\Q8Gm8,L;Ak"Z5\C._=V06DqA_=LYcOu8rn.c.]*Ql&s6L]EF$plKla?e?\:i"5[(-F`!^(Fs0Zt1gFVQIk?&=+9
%CM4uGKigm0U(`A,DWCY;g9$3`6'Vc7%`As$p47n>'ZS5S#9"ni-</`@9I&-<F"CZFc!5jj7\giA1+=[Q[@!ou:]e0S*M^G=c1RST
%9K-h/mo+fmQo6M1;pV6a56,<&HB+;B@3pJsVnf&L5Gc1M9l\CoTL8nda5QTBbJQXIE9@WI!=>e5d=X.*#rdhm`J98P#YnI<?p+F^
%@E+<]c*I_2q'Q=F8O@n)]3$TloY[oO_'TV;j-kX'nnl?fIY;3feJb_j$qhtN)e-I5EOe@jd)"8*.2<'N+:9a`6YM0-E"efn:6ufZ
%FUG+ePIRdB6qbS;+,A603mpd@NP\rU4'2&=k@a2cj!t]qH>Z5HaqKPGn2M$B^SFJ\1L@#CYFo;5o+a)R)3^:CXPZm_=(NZ%E$Q<g
%A6Ta(>=ms/bnB#j0GZS&A6VWpaL5RBMG'm`8.!g/?U[quDTJ]`l,2:5!Dh*sA=\RUf)uU!nRljGiqegCAD!Bo_.Z>>6msT;B0%Rh
%<`l'$]TDah+<dYq:C3:Q>mWl<TptPlR)'=][2mBp'@ci%m:8coJ"n/u,Zp@?aN.W2*YZnuL]8-YQ#NO4Eb=l=cf:-sChD;'R>$5Z
%MiM"6%,-hG;+5:pA8+#8N&i#G2oA2E/fuGV(.ZFiUY'h.Q8IQ9gX:[omnnW\bks1ta(CL'J#5"d0iLaX/.M1T!i+Fj/3d2j/2BT&
%O2g`!+"Y:$&/Yk@`_Sdt?n<I)r;9J#(rKV-8d('s3!pLD-+l/?`l#^RS5+Z`8X'_Y[3R/)>9FGCAAk8p<<qP&HTaGp'%daQ&eUue
%c.cS:8-%s197qpJf*N*&@msfdHt!=7aVXA+")pdt-rojO"=I'<P,'aVD[U91`D]\sn(9f7""eJs@]Ci-g30R;`-VD!p9l5GV<DLn
%SjhR(W?j)Ch9=m#Ee5[!6!Li&P;uOeEGKhG\Wc?X9&XY;RgTVl)q@A_6o2Ze3o\5UM<0?3\/E=Jq0Q*j(_qc:WpXSm+XVh#_mn^'
%'F3&H0kp\(XX2WL$p=g7%1e]3TSp(ZqFarE<&MJ>M2a#sQA-n,Ic8</`SZ?:>t7aa_*Gn3C]_=BF%D\&KY"O8:Jfj)7GJ!^QjWSN
%3*HuS2G>^R'O7CQ#SRMr=cP_*,BH9.VbaoMH)W8`d]47O,s=B1is]dX.iF&=WJT+12CY7(TrEPGXeJ,nJ>IJ*;qef0X"Cb6//iDL
%VYjL\"WGVEJLDPn-aL<WjOjqXR#;Oc^aN@sAqsIr0J*r@\.@Ec7%S<P9BS"\i)a-MGs`BL3=sj%R6%4"\=\UcSg1BoY\i')!&JT0
%UAWf1='!t`$="0Ne!9`[9nsm2U7Nh*-%UH.8q4#iKu`7;9-c;7"Q;PP?"UT/EA:/=jEbILiAoiP0VK@<dt?/:TDk/$9Fl?1kV=eI
%BF,_fVX:;#@^R5-]"jh;(^\,:HE:?7[&=RgfnSYn?OO(\F!V%Q*8q"aL<;M?,=4n31/2*<APWYM8L8N7/0Le2A6]n<.:W@08W@8f
%OYtRO?durHdENsDBLH`X\Hr4u#2S84(e?>0Y@d:$%UR)jU+eqJRi56[kb4lc^'DOj+/(b+PqN,LkdJQ)_*ISWIE5<R]$NQ<2p&#V
%p3aH*$99CX?crg4$W'R=S:d`L67l]in0+MNK%6,?)"VJ][lY]@,akeT_F*-)Z>o..%CIUs`(3uW>XK+;R*bu7-q.9`A;G=CA()FJ
%QX#MB"9FE,N!g,%cshZsR[uKnb-PV`4Wp+]-a2a.'2=ZoM".Ik<=9>5$BQgAd#)?:k*`Y;Q4e]of..H;J`lNAFjgGdd1'e.)/Uuo
%9k(].8A9D)ougF_,ZRN9fs#WiQ!P&a<3q]p?';9cgg%h">*AF9-IN:V8@52$/M3s^Mkt2]Z'=Z<!p9J-/A\i5+^(gD'HgOU,!%Tt
%*CZK"*3AqG,_$YSSOK5.Ra0+(MD/.Wg5K/XBsJT<.P=Yr:5&uTjh:Lu.F+1afYIrIW)jBAFE(ZYK4h(p'`#3QU#OI;1k^h+`Y+5:
%Ak_ig*p];/:@qd>1,Nt%TZMgJLr#$Td_r;`#),ns%imV2m7:n-?o99i2!!YU65\<]rWt8t5c/BK2a1J!VWML\fj8%]M-kA_7+ja.
%l,Z!8e'(e"-ROKQ!ehsrf?&N3FJ@[b;\I6bW)R.\fC9([nP0?`[k?o_'Wg?CYFQ0Rpi`kEW'o!f@a3*#.4E2)&4b9:,RQ&5Vmq&\
%KrY@\NXJp_eg5%o2'&TP1E^EHP^+P")-rT3LX6RI>1B^BGh\6o].*h)DF?-pWJ";[OsSmZ#2kSRBO]/$"Ipl1a\nI'E^JHg*&0B+
%nOBT&K0+H$;iuK36^FjpC.bSrRjgB9FLE*cB2]O2i2G[J'j;Q\0TnAkY2GkA[,PXa0!*7/2VuPu'V0=dpOk6WX,G`9q:&*NGus0M
%E&;9=dUjKbjR3hScpKTp/Ub+G`e,8!*B-2K[8Y-"W6JdZSKC69G<]LMKd`DfP%+oEBg2X$rUKD$fYVEYMojGZNf'$8&e/.7JkEj:
%Ba+mmPt]VNcA#`<ckTuD9b(,X/r>uRn[Y^l9CgT0T')KH9?MKn6'QsQKXms^E!>LV/6hbh>hW+b:u:4=lLX!Ve[@WOSma^,;">A<
%?`TPD?pUo^>EMbH(bgcQp`5S18)OAa0gE^EX/#m\W7X3;Z>n-I#uM8CS@\Xp[:2N+BY1D,cd/CCd0R1"lRo=&l\q1CnW\pmE1"g)
%3tiEj*'nXNqR:QD;=bV<T6i1r]`p/(eQIURA\W8N=omY`7H/PEJdn&bKS#FTUMq%PH]a`lkf5.FpW?7@bF/&1TFAn7l&ke=6TtQq
%,1Eu.P\8f+SBrhNQ4Q2A#n$8E^9F?=[#eH(L5T"6A$.'GZ5gW2C#P&n2CF'q[p_!a0(n85H'aC<+W(d.o08RL617D_*3]W;dd8^r
%Bi<07EZ;4U[S:aQ]SYCc8Wmr)TSPlej#Y5!E9@5#Rhjl`V)GY;ci6mQ\Ki>XaKA*IAOJ7WV`jZG!>>lHTi`!bkuML5B&UH/BcVUU
%eQ1es-D[N-`[dW):a$[p;^A7^Sr<Rs9noSuTI&0Ba`'X.$gdr5L+#8%:F$*;ma*[*(PeYt9Hu_h'Lf7:&cq%@"QLM94RY1I+cpk%
%`oR"Ue=@#L9N(*Y9f?=#fbQR4N8LTD7,U,lk`eRkPYBeM&b&l=\@CKE1Fpt<dDe#(O$Xf1/VZ3OE#WKMGt]B$#c<4bPe;@/+e%+?
%rML$;,;9BXAN;jQ$]\:4?k71R'SQ`sj3]NOTV9&<W'K/,8Hn[m3ilC\/X'-f8Q@!=*E@8_3)[shP$(A]5b>rjE>?JCaf$MS5;JIh
%'fOZW:d'(1Zbsc4&uRb"Cl3:3>[fi<9^<a)MEM9@,#=A4Vs$C?W^N(dJl@Q:YR!5Tm1R'@`.8\Xg+^QhU(W#mh[\Plj3&/)#Gb:@
%MX2cG+f9X>B)i]6?&=)Oirg%-f73nm*c4Ur9#l&L\(.)0@;dE[%#'[)'[Mc-p6Zsd4ljYKgIRE^GAE#X=D`s!4[-"6W''#?#N)p>
%&SO[D6kunF&Z$8t3.oa[`sO'Mi`19/J2fl\@VUph1u[aN58dF82kum5oXsrOU;WIqVOZn`:J;63`<tq<6tSL;Vp"9(=3?r@+PN)L
%3Z7Le0JpB=W.bSt*GO;3,X_*,Q,SoZV@7ec0GYk#fW@Xk"p:kO&Ql"r`>"9_rp["hQ<!AdFS)#F4N2!k*lFo:3AV<Zcc#Mq1"pC]
%gM<VD#r^TId1<;-4LtpaXM=s3jOOeA<k4+^hskYG,V+]aPU()pKdRnM<mr[)bN$3b,=NJ4j(`=T+S364.iOIKOBC,LXmU::[nbsV
%+"ghpLR6]R`_]D@]KTTP;-]KC`B:e(TL*T[$%\RrTtQF_TJ#0mI]fA>"\'(;F$k-:M!)6h(KX;KE-PH7(>O5-4RIAXJ#cU="1u3q
%LS$6[o?kM@IXkZ#0PDa>([ZW1SU-:4);eVXE4h/1_\="&TAAHsBmAGT!5T?/_0CM[L<IQs$!p!L.YNS.@F-:4P@fq:BaL\-]`]>$
%p_,;(T[HhH-8N(X(iRb=ogiSNP%4UC(^Jb3]ZIG>dn_S3[PU@enR+,%292FAO#]FD)3S=h!OB7"G-3,^O#O807N?1I/r1;WNW:\Z
%%";c%%Z(H3dUSI$\0XQ;<&dCje-RQrQVBi'Ls'oUU39V%:];af"J#ENHF,(q5Rkp"oOa+N0,jqRmVoQ.lSqjL`*R;p@>*hLE.]cN
%+h1!3*XP@R4oc.lL_[3$:q+D@_[mfSLW-)'3"=Io,pb\"G562IY%bK[1;mo#[q]+AUk3<#qh!-$a^(;_%gM'GMT:Ei1B7_Cr&;J)
%#:+iFO+sMuE8;)d$QA%G.#dmcYs)X\cj_O"!d./KY2iD"9QU9Q0h#;PQ_W4lR0XP+o4:M.!soe9YJfCO=U:76p=W&:'?I..i*[hN
%KY//5/tSFaC"j492dt,c4E7F&5cMcIG27CQ4CTcD2D2j$\]-dcVXb?(1RJNi>=@uW?#G0M]Et']JXE8p[X8QPJX_$kF[a+A.kP#B
%E:5"P/^p%q)iQA6]?%_5IEBD:%sMc/qgs$%F1sZEPf@jnF^5_aqa8)iAVJkckfeg\/d^B9,&l==6,Ea&g3@HB_XR,!9>%hPeUZth
%Hf;S?%'Rji;/l+4A)b0;>t!cKq@""oj)d"hq]<f^AhIVS'Wt(O(I]//)=t_)*P0nH'uT:)lZ"&kdLgd0:/CS60nq4;Nb^VKZ!\ci
%C>qZiph6<NoeZXV3N,?](4$r749o4a&EXp=0f,X))]UZ5AA7n0Pg<Fg6qpD*l%f@r)$X)S;QWTT)+l_gAD_d?$2^$%#uf%pfiX_t
%)j<.f%,Vt-XqY+a;CK'SA!I>/*?WSN,Uq>D76aLBOq]CKI,c5Pg`\#[(%7ROB;84)NbA`_To'3Fr\IhA/8lT4kIFVq10(!/@c"?k
%(IDJc^ic"$IRM)AY"qlU"s]J5qS0(+Q5"5W_UiIG0&V!8fH$GMN6+,rg_doM"@4L)EjJ2&8Pa[ZcL2Z$Ae]K9L4ViU&rq^.)\]p=
%$)'K<HY0c"4DZS$:5mh`ko"!JUp$n6L>(S42*Xqm(k[-V.UuB7F=Bc+<Ki-\_#rpCfdXS^_I/Cr,=-)`(9<DbkmTG6$GjQ9)(%jS
%L#ZBf%NQ`hLZ@3NY5^1\)")VTE!B8$aT8tV,rIIM>U%jZ8tH^J_6sW64aK%GUM_EYnhiScQGA]_r<TY^Aa0ag:)VY0KPS"8LP'0G
%%4=hD)_6(o<s\#m!X4cYaV8tj3#oSqOo('@0Vo%XZ;;m7fLS:j5&K*-Ls*W^RM&n!lRS!HnX6;`+0SN2rdS.GD-ZVT^g#7V$FeQ)
%n]\d8TWYQ``!u@'#-UOqQ6WB$CFGe5>H!k2]t@N21MGYRYB6]I.<X>NrVWeW)%Gs/=eDn_pctls#^oRM80PL;(BdM8j8K05>Wec9
%F^(/YGk$aLPI*HehB\"l8JAakl<+B'V0\GfGN(FlV_-kfXA[12)$2tI%@>D(=BlN@2sArS87P:KrGJT^B$_hGb#kBcL9f'?6dC[X
%cO=!Vjr'Xq4u;[??s7[[Qd5pY2hEM].@qj51ansS8,VqFE:F?LknmI2C.'HfNm,^mnVf[mb&p]5SqRFuMe>!f?_(5TB*KF5'$BVY
%cO@B6d.S,9=ZA^W5q<dE:iGi]Zt)GI_uC"hceUp,-+C[(\2LhOIdmj(=ER>$6A>W3rN5(IJXDit"t#4?#+\SsAZE\,B.3(,Xjr1d
%_Xaj@R?=J)LT&,`4aIFhVGk#tEf#j_HZUQD3"mStm`A[5dT-E)*om+mD$['cE?ViTX@;'!>;VikAh-SM+K*?^i*dKCmT7`um:r3f
%ng8/kh<=""5cM_qK1<MYa8Erf\.$C\>H+2;gsqok<=Lpen[hb%Q0ObE<3'XT\5GIGkVO*"6[n\:JX4MtQ0K6T(Q2K1^NrB37FrgB
%GXW%[fV=XIiT_:1Ju3g*UiBXT5")eMWJ%3hRI+M)[`J%;Z9XQ_>^uRn^q6Wb2nEc"$qL'UmR*guL4h;NL7_JB,,VYO/YD#!k`0/,
%CMa8n<an1+oZLkQA<%sO5(<<di3jeE5.l845g'JccU'mnJ/3_e'snNW(+SfFC;Y,jWYh!X8C_0<OX(,&2)n01'=Bl1!b/#mQ't\L
%P%]]8bZ:Ht9=BRhV@s=n^91"jNu$DiI>_pP6?FgI#LienLMK1YN1%DM#E<jh<VY$",tXrml8RSA`LUH>>k+IY^,G8DjbT!9`[YX+
%DD<r"Jf>Lbo^f3tQ:hCYeB_*u;Ee$pIe=,)1.<JJ=3m$ds*%Jh'#O$<oGW_7"^FWV;mM36=bhVW3$T$7"Z$gCYq.p^9^`m7B,#O#
%4FC1eB1b"\i\iE2A[/fZWh&B-.LRe(X`5`1Ui=#7ShMKcqV$g>#$km_QNE1n1@DEHUo2"<U`_[!9bB..%YU`2C@M_-GuJqI`@rU$
%$Gg_'\\Y`gK]%*5&N?jAi)&Yh%/)2a$<S'_%(qVCdR0al7.R!gQDAtH&L2Y*_.!gEUKF6+?VfK/M&fIB&XlA8eF<`=c&,^DK'Na1
%_$=(NR04Wr`aCf8ZE$6eDPk:gnq,JmF%m1_e)W#V*g>o%U`6H]"iIO5WOeeSbt'cENkS[U)d@cKo`$Soc2Q!M@7W=(<n7:_>o$-'
%nS*XQEsjY_(V:LnVMjV,LlDnI9/6chn;U[U'?-Cf!jNa+3\$5C)a&f>BND&dXe,&XZ.`Z?5kn(e8r2:",+ou`qg]/[kn%4uE[aFT
%7[LoZ^e5&f\T!Jj0'H:=.ME*(JJMA1+X"682Y\&Hr?ucR)MW1'kfiYYb6YelA?aS;-f-I`)Bi"cUMpX\kl#1SiJT^$4m:l;5p?5l
%G6$^BoJ"kh6B)"o]^<NEFW1C:fV-(])q,Bl'7RDE7gcBJ.<$+?#%bAp;["i-B+bf$'F$e\I0O0V,t&gY*mhsP1W,'2-]f(.49hD.
%B3qsM`@q5tpSn3n@8Yta.S@06cH6i#ncZ;l>:N_Y?,fGYW<3pi[-]hq<4Ito4ZVtc"iA&f?qnIIPs"ikV]hA8K#W&BJT"4[\lF8(
%>uKTE/o%j.BlsaiH.;*T9bk<m53#&0`LMSWA>c:B'Y;-QYfq`LctsruP=[J[=?K&:gQ54p79;`O]L?;K4Ls8aPsY\==SO_lj_h"'
%:9_XQG.:f9I4edikp^E(2f5:p.Y*(a1W+(O>)?SUc","R!&5cTR:=l0SDao^7S`=bpnH/'1?nufd'r@"2iW8r1>"WH#-q/BVG86:
%f-*\oFg69Z/BqU[No$GHI1Ej+F)6;cf^X/o7&`Al]TNh`A6Va)*JNP8%,=k@UHTZ=&)S:eqSD>B@=`CO:8BHK,-UtrSLVDd58:Vf
%=+[un:q+#eYF[eK.7fi0TmX:@;[':rdl7eal\_lSnb>47*Yn*Q6Dc>lZRRRWJ]P>=?DOhVT">8NWrQ-$WGipqV:tucAI]jj.2,`#
%/#WX-`p"U:6r)*O@O);s,qdt5RSa]kG>+)AEfYqmBhZPoN!P7S@#.2X4MW9,<l$haK1[>1_LCMVC9lS>3lJ/e<R4VAUP!CXI$6u6
%C.>D:g@FeJg/qgan4EhDeQi+kMUG9=>j4c.Su"7=k=<m8gdk4qJD!naQ"X:p3%%Y`PmAAK"tu+;7/BK-/,bupni=J3PTIMkh[M[K
%/fp%g-a3<B2]l@_^sS0(L:h+KkU-hBoFmJAct'nps7(S^oW/K;giE;6GJ`8MCr`h-Dj]jshK(hDB83<Ij;gq$bj5r^pL3k&Z!uPa
%Bk>`"piQN"28p'OHm:snjXnfC1SdaWQ#RWeoTN_K='L6OX(*kbA+Z4i.ka6>EAJ#YgUK%8:.^"pp(He,'GO!o&:H5UR(V@>PBS3B
%+Kb@#imNNOS-BlFLVmWNbJLoAGg3LS+^OPT:S:7q";B1FE'!27i:M=L!Zcn2.fU09Je"lWGN=*oe]+b:.8b1[pTjkHjE5bM+rb8`
%;':@R4b0@FQQ*G^,<bV92!JmV]PtZ`WX3-):J:6lqj@+UAMT4P$5^(-8PK1\BB/Z(P+dT(al=;?/oM-<98.)>f*?@p3Ll(RMm_u/
%/+o\k_3-$FI/b6jaVdaa:*d)'FjC_?M]U6`URA8T9<%D>r5jLB/mm'I9Se<i2FLr>U1\(Aph$8FgY.T*%=IA.Vq8LZTF$R``5T8:
%S@3'dRCQ^s\S9!9Bnp$%UMCr#YYYT;VciE@/In@;V5obu<<hmp&/k`sBXs?d1;%+I$8\VeNhM5?7(9(^3Ya[*C!q]R[V%U_`XY$Z
%;ZK,')$fGm/Wk8IqTC)UJFDc$6H`&Mb(nj+o]WfS/q>jnp^mS%*ZC'rK+Ad"WC5^.Ns,);2oK]"2m/d1F<K5tPo>l4&+LGP=8F[B
%Gm1s[R+?;+=A?r?DTA2l_O;$tDQlYCn<i-D!%PD2`GF.*^_@>6\rdM2W2M&$!=f'3*X*%2AfA,G7hrTeW+3o(Gr0nYM?sU`Yl=Aq
%)E!.;+=>+7FM.eq2;N<ViuH5S7a2Q\.Y1k%n2XG!N&6PDe;'uo$0G;5E!-*XgCsAHCfffJMX.!YRo+bM'ZXokYSVm1`bW)L'.p]?
%FWIOCdQZBXHZ[8_@=<c87LSWi`0\'[+3Y.MK*63T_q3qZhshZGV2L'Q.&5fq+9\M=-UJ,6\c%2s[O]lI+s85dg6ujEkpulmZ&!3f
%,uieh8h*[t5/g7"C4#Ro]cm'.3E#$G*d\2>o^,"J2gsd_dc4ktO-k]ifh`qDeb17lWAKg)@/gikA[5J#2V<tu9X<6(j'-:G/grV8
%c')%bO)!3u9_kF.pg$-5s/t;_4Z?@idPN@LfA_ZJ_(eFXBFM%)h*guWETM4'a"s9BSD_@!Q9tha5h,:((lb+D:kUS,'G=([X)K6P
%PmAA5#kRgCB+0]C9[M8<q'FI/]s!F?eRBiU^^C%XbFkUZ6S-TEU_j`)lSboi<Kjbb0j,6/ADnH'"OJL`&U$S;CN0YRR,M-dI1</#
%5/Y4'Bmh8]OiTS:r7FQ18%E%fY.-N!"A]O]i0p0c'N<KF`//-Ke?6cMBf]mV8;rW3/k7B`R=pEoQOd!5-nUi_(/qTMr0:lEj-E&n
%q>G(QaJ#plIT5D6E?R$2]"&Q.j":.U[5&J7j(1-?SdbA\L]TO)_F9Ai7`db)i<`[7&q6p*>URu6Cde.2nHoZ=rZJ!'8@15fV=kf[
%]oG`QeG+`o-Q+XdRmP-e0ec7Nj)&UYR$"93i$u5M@X/5-jFa05"g5uc:=+1Dig1kF.GBkMpkT$8.m_e)$;u7IP`kPJWfp7l`8fkJ
%U39L`]%\`K5LrXVoRG\$8LD(9rTdT#jU\D\_L:WmiJDqRdeB^B?AZJfAR*8QSp0;PUk"_:->MSufJJ46o9mhM@u-Lo%s)h"+ZSnM
%ocF]BqFQ<H"Vh:277?G$V(E`IL`Y^i`&YmJ-J;jL[bs&a]"h1uFbeReE;'p\b@#QTNuc,2J`BTQ9mSOjT/?=R]WSP<Ua\nV?OO*C
%.S&*HH'ZX;%7JADRQFL.o]Yg@*nB#TiRbkIfY\^<T%N"ld"gDipCAH+)fNosVli.dW#ESU@V.[^]3%r&kl*L1,%SiLj*f":rIY+)
%`k-n@4CIO'qZXF$)1ljZh1o%J:ja1B\RQtP8p26$9^)Ql5T8K%8.B](k[rn=VKE>pODP[">'2t3J[P\;2i:W9<Cq^;%?Iqf^j'&/
%F@/%G<d/k2>!Y#<P@CQ9--]IGr#`sK2X]5i*%/o&FIZhS8_'J5^*eb`MF?_,5Qs!a=+iHaZ\d:]j+*0"84sH6:Jce^VM!J*4&N3k
%.6QG@Rg+V^1sLi/n_#80Ne29"2(nJ#8R:jQUeeWK1'\bYj#Y1;Nt+\"">#7'$#4cL>E';@clP!(PY%W_2k2.tc>A(=`dKDH(FGeE
%2l!r-63f3d'@NTT*+CHm%BtbI6&I3>8m_)^@[)A5DQ1UcRCKFRl>A`>2kUB_5Sn;6XiG-KXQsY]#"RWhE41BM7B^-'[#V#1$qWqV
%6\Z5F'Gj7G-#i_Y1ouI4.8r>5:"2T:'S,]n-03dI;aX?+O"Sg\@1IeK^.+_"?l(IJol?`YWOup-6DGdLnAOM"o,JQ4I'A-0C_lgd
%GMiY/UAqd':;5_?Gn0pN_+5_OQm=P'[f9doL)pN"];(Ig*<@BrZ!:efUR&JZ_TF0u'ua2bJR]XHn*rn36fT:nE&UV1PiA0`5bJt*
%D03gC"q-t[hWW2dDJ%@t/3.OO3/BLGq^sELBUX^FbC!k7?s;:scX\P64>j9g:(3*)hM0r>*=0P,"bBB^qpD=j=rMNm1+NB!2t9>Q
%-=/lh&V-k@eRW>fn>J;^^X8BoFA%[Mq`f4P%5NHNI(g++*hSS1[:&F<W)iBGM)5`M=&iZGEU^p]"j0MYrX$V'(_%_sQ:++Y<W2Nj
%0?OXXMK27J.>(*R*Z7eOLD;)7i;`i-I7^UgbAlBF!<9smBZW`h_pZ8\!<WRg(C&j-15H]M2S^g\PY"7BhYG-PQ!"iEqK:[_K3l6H
%YKtJ9+Ykh8=I*r7l[fp0Thup12,l*cs+-'7YS9)#bJ9V'd)4sN^0NedTcII:g,]V8R2gR$Hok4LTIP.fiLIkR#Im^EAC+-_YrnjB
%^uSXdHY)U%mg`K/W)P@c\(2RFhMQ-P_Q?c2OoG'p'3sa_R"#V:%#bWfm>=c93rSZR_S,cCoWb)McR4p+4oQ%5Il,"s0=:J1jis7[
%qm4<nU>/Z7nM@&$=.1cLHIAO--kVdJo:WejisISf#teFhnH$,9K[iD=O-4r_^g6qATWe2<.^(mA'gaC%5h?$eH'0G6mp%7:FJEiR
%6>ZU=Atoqj`6\@id<KWO(:N[R6BbFQK.f<JW"jO0G&$jEFg(>?9FPRglS@TCRISQ7$D!gH^3#q3s'L,4p4!dte,>APiDcYec:D7*
%FOf^(h8d,pHTe0":O2;t=oslbOASq;dSE`J4q\WbX:aBVqsb[%L(Y<Y,@<fl>.ejlhW#F7H/k6F.Sk306n@BDRd&:l%e/WVT)WDG
%RbjncX"Rco-]^cN0(@Mo#/`+c&+lD:n]PVSS:YiUO*G1$IRK/iqOL8i&4)D)Q_m/Y$e0S,HUU6kWq013jWSIHh4a#Z"Zei#TV;7;
%1"5SFlLEQarF^<M*22pPh#l?1OU,O2mNnl(Lb-55]U#'4E=0(dou)GMCUl#p4gA"_&PX2K3]$)?C[P,T)],CCa9>9K'm:1,NB%N(
%iC5!QN^/0<;RquT7/3a6qiCu=_V?3`)Dqkqq[j"%5gF&sASd]Lo:]Hap++BrqfSVep99LXE6;$im.#'.JfXGQ9Xh6RE7nZ^(F`a>
%T8P5B^LJPd,I>N9-e)X%.G>M@?(+u/Eh;9`clD@k>[;haV[,'MN^W5k\kn`o>V?b9b[?-+W*SoZd!J%S5s?!2Knl1NoF$oe<C!p"
%-qZ+i3HZ5#%S$G7:ZmGg^cK;e4n$u?&.c0G=8B,=gN!eckQ]nQl8&'#-/hX?N8k=C$?;X/gf8sPRiT&;e+k,)i+%l#W;S,R_LhM?
%m02>nE\hQZOk6k9=5f>^c%H?%Inm;qMC+3;^J<"-Fc;)9nk42[POX!loZ]Mb=W`:O_#(K7.8rHr54o8V,uMEiC'0-N4XU`>EOLs=
%WTiB'3[@8l!$.?eD\kAXJ,nP_E:$]kPN=Q<a7p?p=[Qkm(hLo9EnO<V4G=jY4%'?,,K,U#E-;-+!m-[O9LUI7Stp2?JPo>PPVtM8
%;UOtajgTA!MG\0l!h"+($V[TkZ5o4(7Ot@01.qnjF^LD?5A_$;2I)SmIqIh*DJ+C(`oH,<pc.?FH0a7-PE#C<1i[NshU*Q?Y'"JG
%GI*68ZasZ5)]7*FiP.Rm6PAoc8"Ld's7miZ$)RZJPX^eOM<9mJ(H=)3@m`WFoUNrc`!sA<nP0"Z:o#''CsGp&Abi3rq_rL)<NN4d
%&3')5`p&tK>4q^(:.7t9*5ZA'oAMa?%524]^H&7&VXlh`h7o?b\*c?hIKL[%Hoi?<7"%m]qPL!bo7Zj5dY66qDW##`f/Wb-Utd]a
%+/fMXp`0K5TMk_%I;J,i[$MqRi+7jcLEl'tY5L3N+]J'K$GN(o??\eDqZS#Xlk%\Ffcf[AU=pDWAkYc#$]O]ke3,jICd,)NFSYdO
%kg*+HN>c.T5G]^peB@G#El$>10CYLq*-,3/FmWNp?M%rG56Wn*L#tHEpi1lnX@M4H0Z[2`"0h;V[r$I+j6],A&2HI'5P:r\OnKq/
%Cu(ZdVW+"^gP?I/']T+3_>(3pGof15eh]h/XShBRZS.ERaS8[./ls]0o_=V'84@g!<n0JL`/nlX?,A%+VX$*ml:_XGiU4u_+2G.'
%'JjE4'e(Q/TeYE68b&ITbJ447BDd;'jk#hJ/'FF^5b4._AM%SQ?!KF?F)V>Mb@NCRAGbt-i0kYX].XAjNLSQ&Q@T@&rOeNbf9\M`
%@M%H1]!O1\+nQ<(@W6`jOH?.q8\<9p-oHf!+D:LQ*DD-_7i6*AO=XSX&#'/_nakr^F4&C-j1qT*[:7>l:ccSIrMSZ]Jp++hYkAVD
%-o;09-T_Wa*S5r?35]]n/CVF#^Ei'K$#O[$(/XIdhIB_C^+kU&D>0Y4=diQN@m-72ZX<rf9e;5VbY[9=#p*l2UX,1kA32!(2f:Da
%N46^BjkR>;U)%:h#-;MDf',T`D,C9#D)s*!9kM6M>[.\5iR1VR'?nW*K:W]cR2VXtb=/<oJ^fs_=q[GSc;5%cUG^nb(^T0P(NfH/
%Ip"c6P,U))K6(GTqC=,jnZj@g<Co)RY3TG'#?Ln6K:4UB+X<'/FH["-.Mo0c;S.s],%4(>"OA5Mlr_+JH#8aK?j,(XRU)`CFa:U,
%kM,t.,t=a7XfDW%e`u`LM,<HlIBli&=Z::TDPWmoEn4j&GSR-8Qm4K$Vi$D\"WCmh+EoMm\r=;Jj71@)s''K=UgIoos.$_+K5sRN
%Ppp:0f22=:7:C/C5%!9nG%<'DfMDkf755nT4nPD5JP2pT5#((fS+Kjq'\;+h]QWl?O5$(pi.]BmWGgu,=kIpI#98r5i7@*`U!2[F
%0@s#\&kgJ:(Qtap#A9<j.3s]TO)OLg+_8p,rJqPAVb\;Hdu-=ZWO'NLd7GK3k%-_6lbg./Gt4DZrXojH(o'^F6p?`$^$DgbomQf.
%_>dXh9s#2YN/(TVW`2B49VbsL&3>^Y2b@2.^mD>B-1)1b`'):I+UKYA34Pii3*B]\.<7hhO<>CR%KbNJl"TWZ26DmeS_pKIs(?)3
%G0jK*H*!<ZCtd6dBHJ^UgnZ&D>)"@b7hfJE;F2\(;__G8+X[e_6MBAMkKSE/-M#mH+j%&HV)m\@J&kkU"Wp"Toe@O9R)pM+ae[e:
%Eu)7rr3s_q$Hh)8OiaDqHl-@P`S<$cFU2386gK2Ao^gG5?2PbqpmH`tNEV'Z\Z/Do\oa0ImsJ''TCb^oBH(us*E?`WU"g7uZ0,Hu
%"M76>\:GF,#\02`f:*aVE:cON(h?/?50pumf3?8sm^OsaC*E#WlNJ<%ZbBQdeH\:2nJ5Z&lBf7+;GPWB-Kkb0j^\D(=aR]QW&aH0
%l67/078B),g]B?`TRe%3,ip%.o@.u2lX*:1IjY#Fo:4YrW`LCh_I,+iSsBm#Z=!7V`9](LrIBbWW0ueS(e%:Ej^A\ul5T^?!SC7n
%;OUlW`AnN4i2l/to>5j2q>%mG[coR@hi^et=HXLRckfh9V`4P>p<bUelKcfH6RRnj'ZV`*#fk2qE9$nE[dKVj3Xu&>j6*$_?qFO3
%bnMKuQ#6#DP?U[sI438\,,OP_^Ot^RgUTSWM6f3&]%2<95)t:(EfN:JiN*'SQpT1a7#e#&Jtg=l.^)a4(%+msb4nEd^2OX`,91cY
%$I*Psd_TmDk&A?X\:oU63[PJD<fg/!E'ioUKL(pD9qU@JTRa_,`Q[/l"r:.>&oe6DSU:h=[[&0`.WAg,LD-R6ie1O\>ttVd-r)>+
%Kds$?lRB&p9^u$=#Dqc-3p8"41l)deg_g5q^*7.T.!7+"r@odp88(-;k5jd-a6J#1Pua!!Tb/j$kA^>9p<#9@(,?&d_iEo\NfYEJ
%CH-I"(=#lb/('EuZ^p+2#Dpi_Cs9$#*#]+.-pNBJ0ojUPMW[@[?u?3)T!l]H/NCI$lQTE4TM9ZIg5rKQMVTO3cOO>7q%G_u"/fp:
%nY&5!<]DE<ZNl9n6^;-K8V9gm?SEY09%Q=/p>8c+Pu9B@[n-Ns[,3$A>g>W$5"TeWp=#)Mb_Sh4TIZ1J&WpnGT^-(W#;+HHQNoJg
%-S[JimM(W`5.iI8O"kZ<Ct(@A@`m1A?+VDAB,=pmrKZMJ+BL%4["@$jXuI/9ck3eYDF@>W$B-jP_IB*'"`/L5gpm.?a%;;##`].(
%q&d*La58!*-8gG3%-$BC9UJ8CEl29D_&!8HD+El$p@?+<Bb<c7'b?^Q-jmPWEBc#LL*Kr*!(4lq3Weu;4K,Up]8B=pD"YpQTM+cj
%_&/B#SH'm,dUWKP"#pu!=Q-_sYf![53GuB-kmnj*dWZQ0EM#pPK;29'FU#CbEhX-8`n6Bi\;O^Fj[?%(j!Idn`E=B>keZk\NXFep
%%R$";=5,I+3b]#M*^!`\YJ<@/N6,k9VbG@q&EcfJMLJ2M-E,B=P;ug2n.]8qM,*Vr>`_,a?lV$0gC7RLhB)Dg7OUrbN;"s>%J%T!
%CZ*8o7e`\]]f`ePms7ciSj^abBjS8g\L.GbmYTrX4Xj\$A%=!8H=fMSd7u7!=E]=OqOr#Noh^1*OI.ACO'6lm:?khG7?OZL-'b.=
%RHq5mHcc,gQH&=f-s2emCT=10"AH&3c)3Q^/W/sG^Ve,4BDV@e<@;2Jr.+%lriRIOXm_=_1f`17pWT-q?h\bih0kWIrBhh$'P3:P
%Iq$sU[V)toMcmh";V(rhs(@`cjbR?66'QLl`"8@"TLT.aSa/ar++ej=M4Z5#5'#pneFl!23i%9t8/Q2_>G&PlH_J["902/f+s+%6
%m?5sl(L\G!l-qJsWekec?BHW\TSAm^eN(r]1D0;E3%&X7I.Z,0\77\j.QN_K4*E@MKA4?mSO7*;E9\7m9briJbeYlYY5=7^C28*3
%hULN$i)dD6m_/8X^?_iSV+&f.l8GP'CR/VB3qM%,_1g@!K9F@Ml6\_]H?J+V++onM^(&pg,a$H@MHa_*Z?!?3P8IVl3GYi[-8^o>
%RN1sSh3u"PNf2XChg-?fGNA2>YobCk,r;/VpI/7j@\9k]k3Y`dJITGO1P"pbh7a[a2or^Nk2!\\`A]a4i!q(U1$S%r-k5a\UNKNR
%FP>\gOYCS"&Jb]%GWG5!=mJ(+T'gO6Qd6*?6e+3]l*]bse[)?il#Y+MN^rr9MH<q;+f#hrE/4b_o4)H$rq+1>]InESORZq2PIL;a
%-@Z;=4Q+d`Dn\\oNtl@JQHBNP!uq`:[4KJ"$7?Ce10%7XnSq=K=8m4/d[d3j.GYB9[^9h,`HNN5.;t]=q4/@@M>X5g?j^4V[h.qB
%[p-eRVfUKBCsg7eK1q-d?G&%(0iMgC7D-=9oOed[d-,AUB6N#%'G>GQ:00tUO(8D;ohl\/Ti!+mc!WS4qR*]H7*D9^L;]TA<)BHX
%TW-CPe2lc+%^9"\9+$C#&\>?J6ZXR2Jp\%tG,=Sf:NM'XgkB5J:"g,qP[=gu=="I0gab,'FUmGRd?.RqEW\=FC&<7"U>Bn?)"'H6
%BO]I.JtK2_"C*5bH%G8rGA]=1l<Q9h]6f$m==qqoNiN1V8^1m23T7$0f7h.;:BZJo0YM/[/N:pb@);b=&%HqkmN;[9:=;)he@t;N
%EqJ99s#OfNBBuB^[\/S"aNR<T1pd]Ge=rLg4M#V*#R0#'$_I08)5]C()\/_Y^Q5V`7%'8Nh;7AZdUp-sFgb"7<"PH$]8OZ7<(&4Z
%kLu$`hC.VJ[]DF#<O0?TZgX?cpUKp1k*`n<%dI%cP*FR1?<#uHZ:8/i.Sk%"NZmGY]Oll@qN>es[A,gN,8I@)RB>`nRE&(K&Ro5f
%cUUMW1>a;*mnk?qYJd`&+joANLP`O-VX;o;cE`8_ja=kupaEun#7$WVCZuF)Q3Bdh$Pm(Sl0,@VGQBrDjQ'?Z8VR/@22s=WpRQcg
%&1&kMRhWH#VK$QM8-]/F7Zs-2;)>]uO`t!#B&=b57L%taeEZq6<o;2>r-#,Zl"]-^XM///<3%[5OG8/&f+1SO.'f4*H%R)Q\njc+
%i2KEd&SdoSA8,AZ0NKn>f>J:O2e&OVJE/7oYb!%2eOMdXd#+(6BbWkN)i!?'"T$,-%5]YeD4LnsI#8`m7o::4jM.V\B52K_:9DuU
%F.V(&53O%?2J5&<h<#]"=30IH"*c*Ol3+,"bn2lrW(#TDXpX7K[Sr9hm9aFXfS#'Z3!tqUkV,X7V6#oWp55oVZZ+AO3<_6!bXL8!
%[Rq`l"T?O,!Wq%2YKU!d5m0SnCF'W&-U3@@;.U\5NI;ElcN3!tY$G*0h9,Ob2,p!!/"Gf/&N/?HZgUZXBS?5t,G9p2R/IYg<_X3<
%&f`'V6j9JT;3iue\3)46`qd>fj^$(QUc'<S*lX)"&t^%nX$Sui&?U/)NEY=I8E+$B@6*:n4QA;ti(YE,mUHVK:f4D23=(o*.5n9!
%L]RCHHkGF=X0Q=?!PIeB#m-86hfDU[YB6o(!BLZi>6a60jH!W3;2'uHl(Xs(:NY=bc9nLBCJ'q6.>7Fh`G/dil)aLd.4DLY)+a,d
%+u4G?"dH\q;'dZ'_J"0H/[Oun/8C@Cel6>KTc=/Fa%&_D!-uLZX[kE-MB\aX3Irn#rFL(3!/f]k]JKh9r3Zlu?C#;j8sWJ5H6q(a
%&rOU@84QB,[Y`YOW69=_$TJiOEZ$":@%n`9L#.(pLiD\\Nf@3#\JCeP2=jj=;TInIKafcQo5CHgE(!0?p\Wi8^H`VZ:Om7ElF,]$
%["S[?os^F.Bcd?7j&E>V`up1%VpOYh8'$S/<Vm'^4ulWaEZgX4F@Pf[N#/"V*)u)li\a)N9g#<"3_T=ZZa%[f#']3<$OV/,Sq?:`
%`]c`85A!_,,O'@kAuI8077@&D!F$7jq=]*PTIW\F1mm@[S8+j;+TQk$PJKFJTDd[m6mA3P.,F4eLGJ9n,HUM*g5*ThRmT(6'[80G
%=jjIqAPVe#i(^='U*(\RZ.TSkh*)-<b0fM\A!`XgHfs^+"=d?t'b@D2@dT-m+L4$j*@#`,"F'?K4Baj6_((&<U65:>p#bCT8Xh*Q
%SdW;ZqZ*0U+Wd<J`C'5K;8@r\e&g_[do;Ph$kU"P)QC@3G6BmO^lV7=En"gR6<n-D:ZEJ-XoX8Fh(nVXUK9LM>XY$MhR_3:9"pV7
%5/N8F'eMgI,]e08Ds1?"@'@2m=I`Bj]f3BUe"Nao?^Lkh<_4U<aW`I'C!dq'E"`Aie7tDV`p>@P6r&'noeTm,Q8A'^E!(B'netlc
%Zk](c1CpoE,E--\?I.Hl8WqNF:BTtTX<M&ARm>B+?2%f)ppuc%_6qA$9$%o!`kUW'U9#"`TAYiO?Ch$oH\IhSMu9#3g>tMd7eKVg
%$bT_I.a$IVM)ga)ZAnp=b3>`m'Xq"a3r"9]Ds+]XqSnF<i#pcnR00&XQIStV44i`gL]KL5k=MJf5m[EMK#]`^Ju9066WAmjJ[_oW
%P<arK8a;MU08*@;GM^iE;M+=_$d:`:8"h9`7HiW(#u&.>74]WGN((D_A&AFJ&O,;d;U?`GittojQBD"*'$-@l#]b"=3C5uC?(&R(
%=Nkd/e3K%ibn0Nlc.)EFK]!K.:hnTi'/601'k\I"ahUcO'h^`i53EBtIbO0h_uC9Sdma:%dIAXARO0VU+Y\f,^42h1^1@:eNk:m*
%KYTK(Ye)C539lMo.4pn!6op/689Nr0WX@4g&\CUKVTGIJEKMN9?lBhEHkkkE?G\N(oN&rRi,V]D_pBn9K3gl3n1EN5Q<X<X>8<>k
%&XPNS8o`Bc@irJ2b"/BkLV70,B*oFj;sB"rFlTrI'*&Jd^,_ZU$SQ+#JIJu?>32J:OXOWJOC>-=,[nd$D2YdI*G46Db,fC]eBfDH
%T]?@P(gqb+-oFh?(jf5qn_F)e;4(2sh6CU4TA]n>\E>/4!<[.n2:=*049sUFht,XuD-m76,Tm#48k:2#2BY4gD##bYVm+A@]8/iQ
%=nH.p7G2`]nJCqT21S-B>9A&]?LB9aZpMV8.L*8[P!J,+j']Q+Z'+Db[$@+s!d#XG"u%E*Y;.+s+3\EXejC3iOW6fCLc&75;Y7M8
%/N^66Ji.*kH5Fcc7hiR):FkBi+,D4d9uZcWG"oeom$cp<lrjtpjqbR@HI4=2]BPj#oAnYDIk*e"G-QMna^c;_l=*M'MJ-'gmS<&R
%77:(A]TYHP1"?tOn"a;X;Dpu/>P["feh*m#:'33#"]M\9dm>UN`Dg_m25(tsa]>VsA^"-/mSl;I+#K6Q9?Xus858dMU?(/Z_kuF0
%Wn@(B\=pQ>>5k']^bd.#L5%djKOr!(9HA>#OW,6sBl($_1R8Kj2YPoCL.ihTBl:L::#22A9S8[G*&A%<VTJ5N5'LM\]3>/N%>9Hj
%d53rAfI0IHk+1bc[Zd.LeJn,GSZUHslrk1_4);*8=uMAeG8=uC]PSS(DiEg;#55)Drm#7sReTTi^n'ZH`m%mP,])q'l09sn+u^PW
%gYH=!AtF9f/=2FV*3pSVaB]@NIEc'=Xr,7gV>t:%Ml'a)-\NB>X!u`YMSYV"Cs(=QK"*8;S+?NK114i,VN,*N,F7V(lSpj"OJt=0
%>1S[&Anl7]Sp-qCReieYC#5hcQ4@[Z]=2d?<`#S,4o$YF^pH`Q#0]/=Vem;/9W3]Vop]dYff8]!:WM"KB%bu-%!8p8ca<T*)$t44
%MPfdg2H6,G:"0)U>3KkJH)BEdhF;/q'M[&OBrCm+0@7hTVEI-PA"7,<]<h!pk!7C7G\:SE9p2CDd^8Q#)$DP7TkS*9-<@-fm"O"Z
%2?Gb;LlRt_O./BH1ShsL5Ddj$Z"G)7jM,=J9%a)&l`^R'[b7qr]uq>\Z"+lD&Kk,]L_3U,(OoluWu+\cFp&3qco"/R6Ym!S,`rs^
%F;LEW"YuJh:UfjkAh]JfG'+UrAHm7ETjN"`@Q-Sa7ekY2W1"UTAd6',7E_*mF_23A?,W<PhId#ohFA"n+bhqlLj%jR)<PT97,C@.
%R\?$Z;!*0+V\SN3#DM#&OBOC2B!ArhR6O/V;q4u*XbA^9M:Q:WSJdu2`poH_J)B<rT%tF@cH#F6QsQ#(Q]'gp0g.PkDP*tjaDrW\
%%[0!CMWKT'GM/A_SZ=-ZFrPi_UX9?l[N_L8USt@>f4K!qD'\jMfXD_@IN)"!Kq=c"l?<j-B)&tU."<%5Dhd0h_>9H>hKIRVY5K_V
%!+sH*)-q3J6Xh=2gn^fp2ihNEH83lYm**a&<AjK!hUa+2kQ^GMAOONB>2XdaM0Nu=cL2Z\9U(FECl2_F(TAe8+,qJij(OG=:Nc4t
%AZ?_mfHf!a?m:DdhhG%>aP>h?['/M'0l43jO!%RTr/YWM*HD^?\MS@J]W'*]%DfuhXGIRQ:aA9DSf>WI%Y6!B.uG(.h^]aR2/oS-
%ct!0;NU(6`SMa?KA@cG.Lr_\.S&sN*k,7BmC9j("1R8QC"hR^:=V>M[90$&-)mr$]*Zcq>p9G)4.eu0,2J6Gm>%,eY!:tPnRT>Sf
%UaKjtYH"j6gec1TOkj+$#ZU\jXPm/7q$-'SiDYTDlH%LGYlmG_f>HfPN4ZX)r4jUWq[DH/h-Efu`Hgc%KJDH=Ir]KC0mL#XXNn="
%=86c:>R^O:9k.MH@Go`Loaq)+U<IZ6_=82OU,pJd==+%iMSu#q1!i3!WN%id&Y*\i*`)VE3#san5@H$56&`mY7BK_@3AYja;\*=%
%:l</\kE>P9JU^"&It]E'Z/&+%1lnamp?h0A?$#R<M9-GAKmElFeN.OajRd&F=:D*++d8n8q2VGYI9"ORa,busO:P1SX!hLWk6dbj
%]`O3[D6_UTJ\]pE3o(f8F5=[^1^@g4FoNOb>Rh.6$fuK31c=GL1uRt)P>Ym6M*,0OoO&lRIYsgq:gK9"akM:"`C.7h-V?R$3-)Ra
%CkE3I@RH18liiU&f7[[Amk5ed>i4(CQ7%+SV![Eg"P+9jR3X_YiC&QX`>\u\rh>>u9il=c.)QMuXnLdYQ&rSCNtV\qYs)`FO7g!6
%Mt>-f64!ZTc8Z50I+;`!p;)p1*d,1"n)nN3(UQ(>_VsJHm-oI;-`A2%7$3C4QoPR@'j*(i],nJ69T3!JZ)p6FBu6o]<XWK86AZB+
%"GT(\>s&*MMd>fn8.tT[/q<A]FMX.4g=^J>J]A'm:hod"KeM,aC5k<o-6Q*-Yd@`DaTP?T:p7*K>KqMCAccW-YgLZ8LG=(:agXqb
%B6(m/ek(74`X(nr#EIT"&m@T\21(]O7#l&`A]]KMS38R8i.^lCmYPqSXuGhF'6ej;%=EFcXdAbZ/F+*N9c$-QIF-f<g@,DUg.mtB
%W'pP9p>Cc8d6Go9PZr!AfmVI[JJ`YQf:2e_L.cEL?R7M`f1$MRSG+G6i2H1B-k\m776UD4In6B+!pj(H^.>IUq0_0U")4N(>EO0)
%Gef+"2k1*2lE=IhU2aT$Fb]?<d%K=Ip+`ZW;=DsJ9@j>2'4\G/c*gLJ9:o\)/nL,fbi_E%GNf!3F#58IR`l-\*JC0_EZp2cX#DAH
%Y7<c?#?u,[+ZDeq3#608>*+"-mU/iM1TM?J+.AFO<>uDaObh@'4sZgO7f,9[?ls3pcH`-l:8NKZ#8GhSUK_I#qtm)\(mjb[AEI3'
%]@,Ql,rI@KCDqA!7rmQ6gC`:9*j1HH<KS_ZVWA2G-@t0@4grh5/ME"ea1eaM*"lPa"lITD;+D7Z\'rb7NS-.61.-%;/<8-Kbl8%8
%-Mhhh09'2n&WSn*81iTbT3nP_peNEk+oih-hL;>0m@Rb=LPjfobKGi(d)"\[J6u-)-a,Kuoo988l!rK5)<>O!CjfYu[&`3fQ;LM5
%]LeO.3<]GulI9i1IU%34JeJ#KTZT8Fm\*f[52g9a:k?Q1%r?dr/uoi;@T[Vi+mZerd-#U(TmsL?.j$I&5FoQC?tN7-0Di*^k.4X7
%$5*N`jL=$;=,,b_kA&foi)-"*F!HaP]H7"&=*5rL2ZD_Fb;nggH^f_KfX%$F6Il_L`[R#X\C0(4&%\i2LdD=u.-ssjb\]ETMJfaq
%/EAhqh^fMuHp,b3C*q70fCN?h#o96![[7j44OZ!&g"!,%U;jrI4M"7ZS'qS7<'mRK]].p`Ep<WF_rMJe/l&FJY'ABNR<;X(JFl`m
%.31jR$2gfElb-PP4S\4CCAH.+=rW#rODVrK^E[A_YZkNR\,2".\b636n)B52G?1_Sq$=l25Cn'Ao&1[^GZFM";Z$m=2dG"MS>Jc#
%lML,XN-t6Ke_uI_U#!.GK(#1S*9d(f?[)+FS,[J_jfE^XnVc$N+`[!GT[IC-I%k4NAQNgq\-5A13f7]Y7R^]OpM]3.SZ,&dH#@9`
%=sL,RSY4>FTK<r&qrAN3V199c\TFgd2Yb+n4lpe6Z=e[#Wt5*&p_qPt3,/(.7.qfNYln_2]nX1YDm9Oe#MlK#\DWB^Bo9Ku_]g4s
%3fWTp3@Hl)!6(MArO=mhm0KMl%Z1_VB269e).DM;61pUiBe-@EMZ#up+jha^:Z2p\qRsfJbmT>ekTrq*dDSo"4nS,O*kn7$a'[uI
%>+IX,X=pUsE',J^40=Og-m+A2*?nTD8@NV"cKj/umc#0is)H'?W75(CKBtB\<Aa*[90a\7-uhl(!U^*"iJl=+Q=7&<;#?`iEG'%6
%I@_B-/j&P:^:CK;8U)sb27df02\J)hd#4]l7#?S?dd>961t.fj,@)a)_BuL)DKq$E7c1'I/1@MC<-D3!a5'Va5/]I7,0/n&\$H_6
%>n0Qd[=&oL^DsX?:uKP2[$[^1]>bGi4!o%F.N5:ZW"p>9'LnB#&Zj>.T'c<_@])40(soApE&Uu63`:$c4_ZV(T<L>R(L8Fgo:i1r
%m0F19:*'_309h)X*ETa?k&LHRSJDSF1f$Wc*'rQNlhLq3I$Y.fSM'le5>)8H$"nQg:n7_m\<0:,RHnuuVq(&ZW'N^==S?NZ89a_^
%U":bagr=,8l[^)k+,OG"m:KTVd<W!;jj`9Z<NFa+M(iGfr0CQ7@-cWPcq3cJLr[cM?D>o=oZH]ok,OHrH*%"T`Ku"!+h]m8b,.2#
%B5jM7ZJd3A<(Q.(^:kccY\i]+m'L(e1tSW&%2#jA-70/1'?#IC?.12rH,Z(*=AVt`k)eJ1`#?urAZ#pTc=]sMrNAunSubQCFnOrl
%bR%(3I<qU&E7q@S'.eLRRQ*F,e6i&3L5]Y)C7'>ff7C&WI%\O.NY.=(\F.p^'6S48@bb\SDl8+f_TmS?k@ksh2Pl7*$9/6[KOX;r
%/)2l:@mS-]ZnCZgT@/_KXF7P&j*N.tS?YKjhn>2BaC-f(MZM_?+<uR0HQ;-LW-.jK96_B\[H&9"%f2d8F=bq)_7ofpC_tU\P86Br
%jX?aA07HDl3b0'peG69BYXsT#qe*X,hg&(c\(>l"^FMTg,)mlM)M6t.r+6N3pVd)AR?jND?#a895#$mZ&GurfbS8h`na:b`n0Tqo
%)NCThgrTI2X3Ki+`/%[]5-8PS*dGTP9cPT'IDV$YN/n4STZ\H:n1b2%"'"gJrol@k=#S[Z5JG-g8Nd<ca_=!Q3N]8)gV2#<WFJlW
%J5_QgORdU'oaOgF'Q+a;@o'U46ZP2kLJFX,$f.`T3k,.NM]Y`,2ct1h`(&\=.@5`9,`$_sO52n8V7SaD7b_)s[g;d#LJ8)GV=?PL
%D2Z#HKOr9GO)7jOGhmpUk4*G[7g2%=SY!6R:Y9ZQfZ$][g:8IXgXN2eI,jRI'h81cj'.\o?c0d$G(DFqJTYMTGm)Rr$P%/+*GKa)
%;)amulO%(!?4^3Mb@je*e?]/h8'`q?_Pe$3d#hQOV4VtWe7qp2mF?oSF-T.]mZSn+B'P&%`8=<eMW"4HWGtn+#[$R/KXSb]O<qAG
%SD"dbo\Z>tKVG'Dq:;_mFK#%Q<ljGJj8W?ablA>*Gg9j1OZ@SS`<4f6F`XKW<F*(s@<BPLqlZ]":^^\nSV-tPYcrD749sr*,0#'r
%hZX4HoIrM,K*^im/Dif$+>Rpio*UoAC?lLo#D%iLpO0k3ibJ8BZ9@70*S[[m0K53<!D/XIA`"r(%uu5&I#taiR&K*l;1BrT+ioKa
%9jSbO0-il'NFuA6@!L,Vo!M&abH*$NlN5peinp&K>a9/INf0`<WV9<Yi3DUg>s1qq\^ke_ml#*//>Zo6jUoB\NR<OX,-3$,-!'pF
%drB?;1jmdrb\P)to&2PTH@[Lp+.91QOM5`!MtQCnI?i:Fe1GkB.8jAKfS?!Lrq-@W-9?oe(3E^V&Jr$bkg(3D1=G2-9KG>q!_\7c
%_aHMInp0o&32HA)1JEL]i<ee*9V>]rRHf;Z_@Uu]["+;>%RG*-Eo4f^"r7b:o1WRmbo@V+rc$rIel(3I_[^[mZAlh[oJsG2Q[g>f
%,,bXZeA0Ee3-@E@9W\CQ6;kp4h;NP%:?_4u_0;r#aMBL"0MWS<5o<'X9af_M&@n*oA'K9Z35h*dcjUo"GB2*m8pWqk6\_W:Zo=tZ
%`/%(0:,7d6(dq,?dt'NGkMa571O(jCQ+ib5VD&:1"n_b<(RSl(iF<EF*M%h1%scA/cdFR%[*^C\ju&JZ/jVoX_Y7o\k`muJMKedH
%SC6$r`c0mo?NZ>0J/-p_loE]lLS\K@)tX@KC`[(P014i^#7LVklMGde#f6$4lQ?U3g,m#md-*3fK:I&jmlU&X$`9uQcb"8R/)<gP
%k7sdu7kM74Wm9)P>@#g4I(*7rA*$)G<FR0&bFf(EME#E,*u"&MW]+iY:#uFhGVPi+fl9.kL'uub4RZ?D&nRKY!02qg@DP[UHSZL#
%eVD&Gj$=/G6?\^#!E4!WI3nu;+mW]"<5ajS>_U31Te$1+[Q#JZ3=1V"C`""0>cJ&C.#M)^aDdRKYsfP@)_<cf$'"`)!^WcLl?s$[
%2<cj5O%geI4]F&-_tubtr"GhiVoie[Da/B+DJJ!^4L"5=$`rrABHu0(/dIMpftg9Tglb^pAE=:sU]+4N$+4e%Q@@N2.ri8;8prM@
%o]$emf^s2O?$EZ#6b,-tNZ8L;([*'$&g@+n6kQ%3H2W24X9<<S@i-Yh9V*<e+aU<H,PI]C%B?h7qmpKh+P,*BGdb&M)fP8%f>PBV
%pOIS`eL2*,;K-2uBo=E!RPCfLASh8@ZU;<,p'q&.RH9.tom+4*'D"ED>Wq]gp,$3R0P/Q`BaAcsZ3Q``\f*%-,;:a-VqPH?;g`&C
%g\bR:q)$1QoCdVQ8nEUoW2R6$nItB5AIqjiIOIjY^<4\"k.Vt9=#J+s#L\BLTb*Rn1=&$ZX<;pBkZTGNS'=n?Wljn<=LX9(4f88W
%Vb8_Fo?XAeR@Z%^RY!8$4XEn#r<S/E8Qb1+g=")GVtj?lS4`28^FW@#SO`$e)$Z/KNu*3I;%0MOT0cj(U^Id7Ltn8),E/WUcSm-X
%ms+EQ#V;HfVL\i8lm)F&TcUmD'2fFO3$o;9>%45='^C_2Oi$L3&lRpZ'oL@,KO"3Z2>C-WL!o$qe:cO8Ln2NNK@E>U&f_W\b#C'I
%/1i-A8pqt:WB:SsKX&ZqM>oiVV;g#E1bE,@8CD@E:ES=_@,n)pcP[W@gBrt+?h`c^l75,2(rS[L%sEtPD;FLrK?.O'r0B7l;9%^D
%!/TiWVeOLFP$@2J:JnsV-c&[mOf26jhS?ehT7@S<(8s3Dm9hJ5)0.F?[UYQ>=-#Q^\Bj+-*L1]>&,EjY+3c6@:)_+Ha9t:%J_HA;
%R>,I9?"kePh/n+boPUPae)dK,Y3go0A9t+Z\>[?h"1WKN<.X9TH^Q9spVdO&n;tB-Pnt:68Xb;_!"P94>2r6,/29O?qDcVEr'bl8
%1k%K96!p4/7\e+`FAS2U6FVoR=\e=ad(4/_o[EE6pgq2jEmTjf7:#94q!JopdDUb:/J<P]nUsU00fEnD00.@*K\XEe`n4,G`m%`q
%^V693)F!%QY8Prm1=o\$)S?nU^6C,,'S$prf?bnEiPDafp(e>S".!(0UoT@3)`q)PPhB/I54cf$76WnB:'V`%>T"4Wj(f@NR%W&E
%hTc"Bc-'g,7-h^-=8RC(=7Wk2)&@"m\<+\6/B2kN"2QUT\<Ui.Xmij*<?b6<*QU%[eMs9$qTG&iLtfWJ`aq0fWb:eKkm=tPb>W&e
%M#653*t"RrhN\jQ7YuO6#;oA(E74^qU0B;u:EK-nKpEf.3,re[qG<0!mO4'`d[PB?s&t[!%"\.(8,aG(OX7j$bPN"i^:M**Tt6\F
%aEX95Mp'UV&9;EN*DT(]?Y-nPm/7*2;Vkhf7>Isc>4#m2<-l7CBK(YY=9p2Lp]ZO;eOEPC"V1='@A99]TC4qM]3(A+J'V<.O8\ih
%ARtgs@p`0DCNJu)%%7MDC$^([4$/D"QP=Rn@6[WJVj9+(;.G@SDVXV4?FV!I!65SE"\.PeaNopf*843MrCdo#(#!mG4cr73`\5R8
%,"bP0TL4>qlu,&C9:/0Q)iVOT04/,"*ddW-OS>shP&[%:@u-6,kp%NZ@2M:-micFp.@gT;e.Y*g,+RSQ9)=/0DG3$`:BbZ+6N`Pu
%c3't.VpIs>'@04HpNEV@#$(L6$JQ^jpc?g+YMI>sn>PC>9DQFj0JQtEM";8A,Mm;RG;ANLGhEm,l/SA&:*4a9+oOg<1h65$3uf_o
%4rLs5$TUXC5eqqg&.tAYkQO6YEPsn#=o7kj04+\A4jfXBVL$X\]8*V528U%@aGGUT;5E,8,V>*g6AN-R&Bc9je3PCeEDHi&Vk#n=
%<UAQ@fS_]Le&oqP"E`eEBKP9&[k;@`!")[+]5\^^6ikpO7]@e\LRq><:?OCtZ>f,>Y9o>t-0RW)<&2N\$;FiCInC8XhsJ!=3=VZ6
%,Y"NT]U#&o%J>l>WH8F?7K2QJ@\BGMaMN0jSif$bDnU6;IcSUOH05j22*hG/l;F3berLJLUubsX_Alg_US;Qg?BUPi?oMX!C%L8Z
%:L$XmEMB5Z=HH_lM%+=u38&P*D?FHb2"H6n8m@B"g'ph3d`&]_F'KT0BPd"i'Vrg%AM&d<^r!DH3QSKno4oj'1OHV*pb>J`/9Zld
%j3rVG\cgY4`_Vsn/k]682iTkBKG>S:JG>dcF#kN8G&UU>MD)$bEHKjSFJd+AZt@`].KZ3&@kFpLW%`_W$8RT(NpJK)5IZ1O$*Etp
%66!'8?U$KYaP,hO,s6&CGD'TOZf6?BMXt`%\Bd#>'Lr8P080eQPRODaKPd&b_Fa<]FK<!=O1E*Y6ecSYA4"Jh,,!6+>2]9Wa^=PK
%-)B5'?I"eJim\];Q\;5Jg3<,m?RakN?enOC+fcor)(=:[Ll4s2)P,fHoe!?Aj+O0ea,HEi`js!REPB+Q@nS3hi+=>JqW>g)LB/'c
%@\*t-Gg7)&-GIa\(k;CI55"Cm`8#'n52j^-B:N.%J/`auq+2D[-/oL"PgNc?6/iF`Nm=o.Us2Q#@jo!<$urO+m@#j.q?c^Jk4<T0
%FoFMLNe$T00,>RIr+t[K]<[%/6oTKreM6Errp/@B[3DF)h9%Z3!o$tJ-WW?2E`N$W_U0u*j.Y(EmdOeXDtHh)fgtuCjQ4Rq9':#F
%+(pu3O.(H()<D@#_gFP\"UWC2?'_SeH-%&Ek:]K?`K,#QX]Cu7F$CuV)_mrg.Y8C`]K42ABee)*KZ.i=r-mXrlf4UWWEkfO`rto[
%'/p@eGt9[u!j(*u!1gJ1qZ)TN]c_pbZoj-=c"G5.B44P=nWo`KOSc'\m"oLn'8X(dae;F1%kC1PdWl.T4oO$Vlb!Yld?SWZdaSJ?
%P86I:jIYVFBTU,S/9)Y/_@0fg<_eRR,0BtRK$4%c(L6\%65g(]+U.YA-:Is7B::)*!V`2/^adWFP(Mj7MB1q,f^'fq5EK1+PX:Zf
%Cg=o9k8Agu`>ug_da2j=)]rgMU892fh/fF;9`;>nllk^&ZI6h-OVgbs3"IbiV.Q=7<$ZL._l8Wj&kM"iI`<B56&u="l#O7L`HC'e
%.aA$d*'saK;)B('brLoHhis%B][*t:_7T*8j+&Z>;poA0KU381ji:8lSAI386V\Q9EkJYZ3.Y.K,)Vt5L"$?X;F2/<\msJL2!0u,
%I"c/#*uC<j8Nu7F'BON8H9Qd]6Jtm\TG8/U6jHPjkX`W-KNtA1TON3Nh.2eo:P3Tp+]aeY09f2Egm#*-E[Jte':<f;YX2#GK*`8W
%Fl\BHqseB\S6_b2$nZc3/CN-,;[90bYm83V$CA;T9qR\,YScWsL4`uj+2q\L0tgmjgW.O1?8'MUf8E%0s#B%0]1R*499_M*9rm/F
%npc'!6?7@-Jo*CLDNZ;?98us+a/%4=n^c!P9]_`1bS=Yt6q=Sj#tG(K#RK_l3=7>YXF=DQVq3ZbX<XB>+1EiC<-^(:O'C!0.muuW
%OBS9kcOiKN$/omD`sot.6usSK^>>lc/>,[nMQY[G_P\pZ3*:fQ?`f7"o7/W4=K(AJ\X6XcL1M7Xc/aHlb;B#FEFLBl\T$OR0b?[\
%m^PBD2n@jB^anO(h@fE@SaYG0*k1`NB].(WBtgjM#PhZ.Qh.APaTQjN?JLaqOt0eWGGWFk'GBPj(L0N1EQ4\No:-'!k88;2@;Rs,
%ra.0p_325[ip0`.<uapAr.L7NR*`KEU<cB_c!lYAB[:lb%VJpEIij<tE#Q@L.DSjXL,J?76oAc^.Bi1"$t&'s+efXA6=2+!("_IC
%[PDV;oM+^JFLcqI6ue5K<1p2E$k6dn6b3:OLLR>s)Ll)`4Lne8R;SU6Pr6OmQ/31178Qe$d\^Jq0e30[;qp0PJMQYQhiD&&iFK(8
%EE:DHQ/)!^#b1+,#T%kck@o[1]D?AZ^*?eYXL><aiso"1ilgftaVN=`p_Ln,9=FB4e.u<@$;T2KZsaTkqeP51LmS8<qo30`e4U9\
%U@e#hcr+"rrLEM_U]4&Ai%._b6_.n,W'I@IF?/e=[`#QbKEF]N;oJpdAD^CjYXe1;aN@"&'eKG6)dGK.CBi5j,:PDr&8<Z`1.(/]
%^kAJ6n\b@a*f]i\\;u:M<7Eh[\"S+m&Y29Ze-^?FRJ>fqUHa%GN3D9siQF3aaTd[Q":p'Wh?T:eOE@],Toa+T'7ZPBLr`)Gbuhur
%_iJfOaZien+$[]"YqG5&V\=-^M*K9F">Zs.^5[2h+62R_\WjFu4<T-$3G1*F:Af+OTq`;d^S&L"^rIl"h9sF-j\_,V+.F8i8`^:D
%:@M*?)t]`BBp:^W(l#b_m%?UkdoWMlG2?uQcWa[_37hrQN,sb-j)!<&T*d3&?]84>qhj)[dWoHDHU%[Zf`BS=$)@oRV#,LIVW0-K
%PW<#u^Yh0Pj6!tWEb&U=P])Ga;,8[HQR!nmC+W@+qQ/QQ"!1X#'\JI;IEJ>eD(rX#NS.Qjq6BS&0B[8foJ(V_kgXWtKt8SRX$@+W
%3g2GD!VJ>e)dVQ0PJ/k$mP!MYdNp'bfMjniQ0X\87jFn*Rt_S/I+T!OeL\B2*\R@M_pFG6lX7uVa3/k7aXQIuO87CZ!da6#XL05+
%U'b4(8u>mDT>*e^Hb#2u['.L)Bq#WR^C%=(D>o@gkAZW5^!#lRrE7.tp2cYJ[f=PK\+;B#p[PW`q4E/"D'3B@/)q%GO;_ora$\No
%"rTii]u9[=lEYqN$/qg6iV:dC]/7*/S5c5>56S0PYA#%g5fk1*FnONh"<\F$i;cu[:Gb?':1gs?,2Hu@7@8Bf+UmuSqpKQD@4PN\
%p,<?Hnq!\CS#aK$LV_V00)Af5ED1@^#i0l%YQRNC/u!].oQo:AjS1(\A6mNm:`jERIJ+<g.rR[H7H!PQBBu=[;$+V0!XgR#!c(Ur
%XY]drCK]#^K>P[K<`BgO]O=*e?)#1D">H-Mco'e,>l$+gq)`Yu*`)<d2QV4lW5gd89,u%Yq-hVeC0^^k%MDh*/9(=0I1RVT/hhf>
%nc7^B)\8BF.ZutiN)Qbb`^N?!*`t9#*m$_VEb^^Q9jV<>^CFUK+q"Ohg`nm#5\$q;(Z?`l0c"/=A:jHp`kaKO15Ngkk(%oT=_aBK
%U:quQql#+5E?[&a[oE;*I%76m$S6CJH-p!s6h$7,1'088<URrah6Cs8r4`P\d!]5O6C6oU/aC"O9mA,E"\YA)W:;dR-4a40EN:gD
%6+`OEbOlt;Cj88"A%fZf+.[&9]a\mRk@OM@3]O-6FAY3J3L\DSa(387-WO6'-<LU*\f6ZLW)1SB8'Tt4rHY7a9%T[Se(GJr(Y!4(
%cR:9WFhFn_g`*M8`NT'sKLa\FgX2`ga19*SEPB,@1soAOZV78=rA`cjjLmoK<I]aAP;gLJrML;&,'Igq?L[=qKc'B'8di@]g)+0]
%9tArD%o79d*dujK]cQ3cDkF_%XWN817`=TZZO=KqJ8RW%MJjRp`n+!6[,[+sX^:Ma'Bkh):;:"\qm8*WI`jne?<Ds!mJHE/KVTmY
%\4?:F5>Lu]N.WEK-1PQ:4+%q/-+\&pBLpJ#UnME3L*?duq@I&pMEZ3*?-bRO*I`sQn:_ZXiEiZ&1o@)IqQBVTMN2!8ia3rnnBui.
%*VeWj0VO"sRR+r^lO&*+b?R%=Er#7P,BB)#)o7$LT[<-(;t^7Bc<]meJU]BkChUYK2Le,bG&]R,7-+Q[OTXmV8aCm1LX=Z/;,k18
%l[V7Gh&,+OBB>-$i_)=`EntEe$j!FIS8c<bT4Z#$d#/djG)#.q^+0^smf#fd#(GMS.kLaf(\s_XKModedm_>B*$])oJ16X+1Y3]Z
%0pKQn(K+AOPn`Z=)iDl5IO,0]dMuJ<O&&Z(oD0S%+bb("PnY!],6_bBNRb"\(/T8"YoW##Kb[j,!C]d4<U@r0(OXX4auG;UIaE[d
%YY#;h'=?2>JR>"SPnq_bTpN"4!l0mn`.5]53Q;F]:iuiMNQ7)W03KQV8IR,Z'#X)mM[hn_Z25IG2VQI9fT&a:J-m,r,<^ik*I/rc
%"lG+ZiVhhqE"Kne$_e=n@T^I3(m&<q6b*cGMGI]3c.KY6'8(;18dqaCZkA"B?NdBo(kDMFgppQY5\P&hcPP<Zon`sE.),]qh.AVh
%A0HXA>Y3mTe19RN$h8(YrPB^V\*tYr!/m+%(+(3+j0"'>i#<hu5sjVV3!]Q982d=bFKf.')'DN&OrRPNP/5er'PcFF^c9g;=34'*
%MP\lTLDp&0_Y72G"=%/Y]=V'L2s#&b2F_u*9,@fD4gJ-YI!L)u[I3mI:Y_?9!H1$5Z"^Djj]A9r^"EU=;%D3ImG/p@c'o.r\FXj>
%jHo2gG-K/^SpZ367ChmYC9QQA[;Y_=ZrIFa/+4.lfKR49jn=KR%6>05h!<&Ij^.HDEhd,4AhV;H\Q9]A\(`&'pLb:R`TQo;Q0V%\
%f@r:;f3Rj$^Y$'X`u/77Z@Z86U,1T`Rp"i6rq*r&E&.1Nb@P>YM0<+[/-XAlL<<;/`?-ITE8IGMKT9N:b8?aqK@Mn0f89hL0jXI4
%Z^A^9&]O%GVg(KTAI1<=Nfs(aMEal23fdbb)dUI.;/=I"oPl+k'[@@.pbVM*LA3Zr3P;@K%ok1j&o3>U>qs[:7Z+)t\;8U3D91:U
%#'2cD;RBB>XmU0,l5sqVo9dA!'S2>9jfPHHKGT$*fm$@]-%9onDc<G-V"m(5"lH1nbibAa(=2k6c;jkFA:^q.A"aFUmI57dAe!)U
%r>sa=1t%cD+EdGYUmR4NRZI>KhqdS0?+F;g@\dIO^Ub-"Zlo?/`o\f4$`5Y#F_T"N19<fV`?-HI<@Fo6oNT>G_j>Ao5Tjfcd9*\o
%pj&*3U_QDebFpN1*#9Mg.(I_"fI/4!9)6-A"fZ(tC@*OMeL2/fJ5R]!@3%c+I<nEpWGgp`?W#A!R+K@bf6-TN,+^RYCSl,<WU@C)
%K!LYFm8@q0a5`-ERZEL]HZPbI22h=W5<t:OO0?NCTnN[-BOSmCC'PPTL3MuW_Oo)+mt2AkI%uC,OCPuioQ4H!.DLHMN-TiAn;S2[
%;m"R`0r-Su7-[;_gTuD\0eE)h$nFLXI=,nbSa2NtIn\.FkY]6SMVIYSpicQc51bQ:6,JeGSUcNZGFG0n0DK_gb94h,fBMNp(fPn&
%nJh)r38rW^6O2m>SJF@0-T:LrgTuFrnLsZ\r$srII=,nbSa2MinG"0%8NPULr!U4Zs,%o2%W19MAkDGf/(_so^t[g$6QF9R-T?>1
%Fi(=Ar9L^RG'JK?3j^HQ00#'(T^Q*kK'Uf;pic9[5*pYED:tE%KZ2Z%_RRQHIp'sHDi:<^n9hg[!Ffq1Xl[@,V+c,@aT:]oQ7j6d
%0rFi#1d#@`1Fj@_%57KG_^g0e%L"U`&"'V3ml*>P"4&]fjXl[cqf&+qoaUqp&>0j'XXNI6._>p>r?/cd'0HDKUDf\&)^]n3Y&%Zj
%:n[)UR`U7#2bB_l:u*BF[3me+kJ3I<>c2t.,D"A)h4q!dkOAd`>Or*VNSb]HT7ZO(5?[V'JUk\8LC=DepA5EVED;7G5:0^h8=G[3
%fdD4i8)b'mR\2`cEL"I*0gDhNn!#P!?p2:d_/b&p;I9aVgQ*Ei?[gnp+Qhk\\UB`WUZ,6\P<YI],gr$!J)I8*c_*A8XJ#"e(o2fc
%iU+E,9)A,U3JdXEI;X,['j7n[r+tSR,-qJY%N(*O/0>^<Q5PWiJki<jS8jC\]\qc9aiCi8D&^_`(KsL>2gW<ZW+mp`O#Og4#QNVk
%;sfrL??U(9+83GJnb1Qk4<?7tVH3?>.9^ZSME_f9m/3o,AKt"?ck"p:NJ?saEB#/dO8a%-T&-r%"oNC(:\`u43h,'B5Q1+djPTo@
%q%gmfWmd_)/M'>0ne3Al!\hsYL[Jk'"K"#lEg-X)\K3u$$VCMV0]D6QSpYCIR8UXej_IGen3c&V>-\Ss42V?%ard3!Ze>P=U^?[!
%5d1,`:Hq;P6Qm0%r2pV!bM/6,S`ZfuFsnRPprqY,RgJ1F\l096S^\=/m(O^#lhCl^4<Xk$2JW`>lmM4Rk,nd3a1,+SYs*?"f[jj/
%r[Y[?pA8L:Qfq8`AO%kmBH/M2iDcJ,I@1sAXKq!Tp)tl(S5+gGM*B(D(m7\sIOl:lR%ANgi#CBmeli6u7cG\C:R/JdVa61gjMP[O
%^`1fF6Y/X1L\>9DXb"=H3+tMMU\)S1LR4+=["1'G6j:'pF%@A;1(@toa3W`cIMP@gOlNBHo7QtZR.85gjm@EbMu;5_3+IlMkOJQ4
%pl*\9-Ok]gIX+D,hLEYDT/VsR)/$ouPI>,5n9Tbd%H'\9h/UORjJ`Y53\7e&!cY/N%$7O!&P.@L#'6<-oI*%?+AHUDRV#kUG\+pY
%_ZES6]ahgsaNl8TTd[lj"fZ?MDKibmm^K,8OM_B0=P,Mujdbu#P&oAZ/oA(JRC/,<-@#:F0"#^9CuP<H!'Y?(9Ao%,6q(We&;bU%
%CV+jRmXC+*dSN^^*!.a!7i9A[RntL?GI"phVBIirSZR#;ZkH&PQG?Ej'5q$&*8,*:YZ'@B!csc;NO'[@o3J\-:I<]n0P:c%D3NV$
%Gq.dH1^q-e'onpK\R$^G:S5Ek,aOS'LhT7"+n&;pg,:?m"VXrE2Wa#!X*e!I*YS6$:K8W<X#[.ELMF2s9S^i1kuYVh27d#5@r;mn
%,.&;CPSLQTm.gc*)Si(h%3/BhU.0ta%K(&J&O]0T@^!qk0gIA_[j7W?q`s/A]7>f!4dDrH#;Z.t/Of6SgC@gP^MUFCI>lO6+#j$N
%b"sC6!fpu4d?k/6H2Yt?!]L>95o:qe`.G+5\=mSb=L_QM:fE;N2&b\BT3=kS5-O_2_Qhi=%L^<p[l@>8e&_(Flk@]oCmmN\\\0YM
%b!.*q)sm:YbchW7Ci]&-Q>aJJ5P4<tW`,31FAeUBMHEm4OqfE!kJ9.lje?WKfH)&,f4f,O:IQA>,!:O),4!-jH?A;UA\M"'>BYGi
%T'Mm.DOSoMNGN"E&O.V5h!'irhR>"l4M\&:7+6!JC<h+fO+l,JQFN%`jr69AR&De)1"VL^UjCS&-_ZqXqFe22F$!+$n4n]p"jS2%
%@rKU2Q6BctRV5jE/@jK%/e]deFY55b[*N,)'?jM*LFS6B.S)LaR>=aN[>bS"Tc"&k?YrHG2`7!bBrVY%C5/FFR**UcVK8XNR0qG8
%gX7:E?.'3:hp/&_!QJV\^$]rDM1d2q2=Umm@^NAho#.PFD4;e_Rc](,=m]C,s3k8)\eHAcIJ#s$(P>.]9b[uL=bW/]mdOeX(DSbp
%,%'CI@N9#Ifqsi%7g4B'a^pu(Hl;+RT'D,@6XalS38rOF`eTd[r,KSt$cF%I#$scEc%a8260MKdK5/#ISA*[B)Vd8->Xl9AQXP?o
%WVZCN"8EE,3WJi'pm6JVr;PURn>G1CFo[$l?[i%$J,$3sqYgHliue9mS%nj`J,B1Orp]XYJ,'n6"odJ1NIQ9Ok<Jq(hu<Abrojr3
%s7S\Vp&>$.+3d%FqnN/dJ,E*Wq7HY7Dck%`~>
%AI9_PrivateDataEnd
